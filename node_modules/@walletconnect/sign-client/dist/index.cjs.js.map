{"version":3,"file":"index.cjs.js","sources":["../src/constants/client.ts","../src/constants/history.ts","../src/constants/proposal.ts","../src/constants/session.ts","../src/constants/engine.ts","../src/constants/pendingRequest.ts","../src/constants/verify.ts","../src/constants/auth.ts","../src/controllers/engine.ts","../src/controllers/proposal.ts","../src/controllers/session.ts","../src/controllers/pendingRequest.ts","../src/controllers/authKey.ts","../src/controllers/authPairingTopic.ts","../src/controllers/authRequest.ts","../src/controllers/authStore.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { SignClientTypes } from \"@walletconnect/types\";\n\nexport const SIGN_CLIENT_PROTOCOL = \"wc\";\nexport const SIGN_CLIENT_VERSION = 2;\nexport const SIGN_CLIENT_CONTEXT = \"client\";\n\nexport const SIGN_CLIENT_STORAGE_PREFIX = `${SIGN_CLIENT_PROTOCOL}@${SIGN_CLIENT_VERSION}:${SIGN_CLIENT_CONTEXT}:`;\n\nexport const SIGN_CLIENT_DEFAULT = {\n  name: SIGN_CLIENT_CONTEXT,\n  logger: \"error\",\n  controller: false,\n  relayUrl: \"wss://relay.walletconnect.com\",\n};\n\nexport const SIGN_CLIENT_EVENTS: Record<SignClientTypes.Event, SignClientTypes.Event> = {\n  session_proposal: \"session_proposal\",\n  session_update: \"session_update\",\n  session_extend: \"session_extend\",\n  session_ping: \"session_ping\",\n  session_delete: \"session_delete\",\n  session_expire: \"session_expire\",\n  session_request: \"session_request\",\n  session_request_sent: \"session_request_sent\",\n  session_event: \"session_event\",\n  proposal_expire: \"proposal_expire\",\n  session_authenticate: \"session_authenticate\",\n  session_request_expire: \"session_request_expire\",\n};\n\nexport const SIGN_CLIENT_STORAGE_OPTIONS = {\n  database: \":memory:\",\n};\n\nexport const WALLETCONNECT_DEEPLINK_CHOICE = \"WALLETCONNECT_DEEPLINK_CHOICE\";\n","export const HISTORY_EVENTS = {\n  created: \"history_created\",\n  updated: \"history_updated\",\n  deleted: \"history_deleted\",\n  sync: \"history_sync\",\n};\n\nexport const HISTORY_CONTEXT = \"history\";\n\nexport const HISTORY_STORAGE_VERSION = \"0.3\";\n","import { THIRTY_DAYS } from \"@walletconnect/time\";\n\nexport const PROPOSAL_CONTEXT = \"proposal\";\n\nexport const PROPOSAL_EXPIRY = THIRTY_DAYS;\n\nexport const PROPOSAL_EXPIRY_MESSAGE = \"Proposal expired\";\n","import { SEVEN_DAYS } from \"@walletconnect/time\";\n\nexport const SESSION_CONTEXT = \"session\";\n\nexport const SESSION_EXPIRY = SEVEN_DAYS;\n","import { FIVE_MINUTES, ONE_DAY, ONE_HOUR, SEVEN_DAYS } from \"@walletconnect/time\";\nimport { EngineTypes } from \"@walletconnect/types\";\n\nexport const ENGINE_CONTEXT = \"engine\";\n\nexport const ENGINE_RPC_OPTS: EngineTypes.RpcOptsMap = {\n  wc_sessionPropose: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1100,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1101,\n    },\n  },\n  wc_sessionSettle: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1102,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1103,\n    },\n  },\n  wc_sessionUpdate: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1104,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1105,\n    },\n  },\n  wc_sessionExtend: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1106,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1107,\n    },\n  },\n  wc_sessionRequest: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1108,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1109,\n    },\n  },\n  wc_sessionEvent: {\n    req: {\n      ttl: FIVE_MINUTES,\n      prompt: true,\n      tag: 1110,\n    },\n    res: {\n      ttl: FIVE_MINUTES,\n      prompt: false,\n      tag: 1111,\n    },\n  },\n\n  wc_sessionDelete: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1112,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1113,\n    },\n  },\n  wc_sessionPing: {\n    req: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1114,\n    },\n    res: {\n      ttl: ONE_DAY,\n      prompt: false,\n      tag: 1115,\n    },\n  },\n  wc_sessionAuthenticate: {\n    req: {\n      ttl: ONE_HOUR,\n      prompt: true,\n      tag: 1116,\n    },\n    res: {\n      ttl: ONE_HOUR,\n      prompt: false,\n      tag: 1117,\n    },\n  },\n};\n\nexport const SESSION_REQUEST_EXPIRY_BOUNDARIES = {\n  min: FIVE_MINUTES,\n  max: SEVEN_DAYS,\n};\n\nexport const ENGINE_QUEUE_STATES: { idle: \"IDLE\"; active: \"ACTIVE\" } = {\n  idle: \"IDLE\",\n  active: \"ACTIVE\",\n};\n","export const REQUEST_CONTEXT = \"request\";\n","export const METHODS_TO_VERIFY = [\"wc_sessionPropose\", \"wc_sessionRequest\", \"wc_authRequest\"];\n","export const AUTH_PROTOCOL = \"wc\";\nexport const AUTH_VERSION = 1.5;\nexport const AUTH_CONTEXT = \"auth\";\nexport const AUTH_KEYS_CONTEXT = \"authKeys\";\nexport const AUTH_PAIRING_TOPIC_CONTEXT = \"pairingTopics\";\nexport const AUTH_REQUEST_CONTEXT = \"requests\";\n\nexport const AUTH_STORAGE_PREFIX = `${AUTH_PROTOCOL}@${AUTH_VERSION}:${AUTH_CONTEXT}:`;\nexport const AUTH_PUBLIC_KEY_NAME = `${AUTH_STORAGE_PREFIX}:PUB_KEY`;\n","import {\n  EXPIRER_EVENTS,\n  PAIRING_EVENTS,\n  RELAYER_DEFAULT_PROTOCOL,\n  RELAYER_EVENTS,\n  VERIFY_SERVER,\n} from \"@walletconnect/core\";\n\nimport {\n  formatJsonRpcError,\n  formatJsonRpcRequest,\n  formatJsonRpcResult,\n  payloadId,\n  isJsonRpcError,\n  isJsonRpcRequest,\n  isJsonRpcResponse,\n  isJsonRpcResult,\n  JsonRpcRequest,\n  ErrorResponse,\n  getBigIntRpcId,\n} from \"@walletconnect/jsonrpc-utils\";\nimport { FIVE_MINUTES, ONE_SECOND, toMiliseconds } from \"@walletconnect/time\";\nimport {\n  EnginePrivate,\n  EngineTypes,\n  ExpirerTypes,\n  IEngine,\n  IEngineEvents,\n  JsonRpcTypes,\n  PendingRequestTypes,\n  Verify,\n  CoreTypes,\n  ProposalTypes,\n  RelayerTypes,\n  SessionTypes,\n  PairingTypes,\n  AuthTypes,\n} from \"@walletconnect/types\";\nimport {\n  calcExpiry,\n  createDelayedPromise,\n  engineEvent,\n  getInternalError,\n  getSdkError,\n  isConformingNamespaces,\n  isExpired,\n  isSessionCompatible,\n  isUndefined,\n  isValidController,\n  isValidErrorReason,\n  isValidEvent,\n  isValidId,\n  isValidNamespaces,\n  isValidNamespacesChainId,\n  isValidNamespacesEvent,\n  isValidNamespacesRequest,\n  isValidObject,\n  isValidParams,\n  isValidRelay,\n  isValidRelays,\n  isValidRequest,\n  isValidRequestExpiry,\n  hashMessage,\n  isBrowser,\n  isValidRequiredNamespaces,\n  isValidResponse,\n  isValidString,\n  parseExpirerTarget,\n  TYPE_1,\n  handleDeeplinkRedirect,\n  MemoryStore,\n  getDeepLink,\n  hashKey,\n  getDidAddress,\n  formatMessage,\n  getMethodsFromRecap,\n  buildNamespacesFromAuth,\n  createEncodedRecap,\n  getChainsFromRecap,\n  mergeEncodedRecaps,\n  getRecapFromResources,\n  validateSignedCacao,\n  getNamespacedDidChainId,\n  parseChainId,\n} from \"@walletconnect/utils\";\nimport EventEmmiter from \"events\";\nimport {\n  ENGINE_CONTEXT,\n  ENGINE_RPC_OPTS,\n  PROPOSAL_EXPIRY_MESSAGE,\n  SESSION_EXPIRY,\n  SESSION_REQUEST_EXPIRY_BOUNDARIES,\n  METHODS_TO_VERIFY,\n  WALLETCONNECT_DEEPLINK_CHOICE,\n  ENGINE_QUEUE_STATES,\n  AUTH_PUBLIC_KEY_NAME,\n} from \"../constants\";\n\nexport class Engine extends IEngine {\n  public name = ENGINE_CONTEXT;\n\n  private events: IEngineEvents = new EventEmmiter();\n  private initialized = false;\n\n  /**\n   * Queue responsible for processing incoming requests such as session_update, session_event, session_ping etc\n   * It's needed when the client receives multiple requests at once from the mailbox immediately after initialization and to avoid attempting to process them all at the same time\n   */\n  private requestQueue: EngineTypes.EngineQueue<EngineTypes.EventCallback<JsonRpcRequest>> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  /**\n   * Queue responsible for processing incoming session_request\n   * The queue emits the next request only after the previous one has been responded to\n   */\n  private sessionRequestQueue: EngineTypes.EngineQueue<PendingRequestTypes.Struct> = {\n    state: ENGINE_QUEUE_STATES.idle,\n    queue: [],\n  };\n\n  private requestQueueDelay = ONE_SECOND;\n\n  private expectedPairingMethodMap: Map<string, string[]> = new Map();\n\n  // Ephemeral (in-memory) map to store recently deleted items\n  private recentlyDeletedMap = new Map<\n    string | number,\n    \"pairing\" | \"session\" | \"proposal\" | \"request\"\n  >();\n\n  private recentlyDeletedLimit = 200;\n\n  constructor(client: IEngine[\"client\"]) {\n    super(client);\n  }\n\n  public init: IEngine[\"init\"] = async () => {\n    if (!this.initialized) {\n      await this.cleanup();\n      this.registerRelayerEvents();\n      this.registerExpirerEvents();\n      this.registerPairingEvents();\n      this.client.core.pairing.register({ methods: Object.keys(ENGINE_RPC_OPTS) });\n      this.initialized = true;\n      setTimeout(() => {\n        this.sessionRequestQueue.queue = this.getPendingSessionRequests();\n        this.processSessionRequestQueue();\n      }, toMiliseconds(this.requestQueueDelay));\n    }\n  };\n\n  // ---------- Public ------------------------------------------------ //\n\n  public connect: IEngine[\"connect\"] = async (params) => {\n    await this.isInitialized();\n    const connectParams = {\n      ...params,\n      requiredNamespaces: params.requiredNamespaces || {},\n      optionalNamespaces: params.optionalNamespaces || {},\n    };\n    await this.isValidConnect(connectParams);\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      connectParams;\n    let topic = pairingTopic;\n    let uri: string | undefined;\n    let active = false;\n\n    try {\n      if (topic) {\n        const pairing = this.client.core.pairing.pairings.get(topic);\n        active = pairing.active;\n      }\n    } catch (error) {\n      this.client.logger.error(`connect() -> pairing.get(${topic}) failed`);\n      throw error;\n    }\n    if (!topic || !active) {\n      const { topic: newTopic, uri: newUri } = await this.client.core.pairing.create();\n      topic = newTopic;\n      uri = newUri;\n    }\n    // safety check to ensure pairing topic is available\n    if (!topic) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `connect() pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n\n    const expiry = ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl || FIVE_MINUTES;\n    const expiryTimestamp = calcExpiry(expiry);\n    const proposal = {\n      requiredNamespaces,\n      optionalNamespaces,\n      relays: relays ?? [{ protocol: RELAYER_DEFAULT_PROTOCOL }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n      ...(sessionProperties && { sessionProperties }),\n    };\n    const {\n      reject,\n      resolve,\n      done: approval,\n    } = createDelayedPromise<SessionTypes.Struct>(expiry, PROPOSAL_EXPIRY_MESSAGE);\n    this.events.once<\"session_connect\">(\n      engineEvent(\"session_connect\"),\n      async ({ error, session }) => {\n        if (error) reject(error);\n        else if (session) {\n          session.self.publicKey = publicKey;\n          const completeSession = {\n            ...session,\n            requiredNamespaces: proposal.requiredNamespaces,\n            optionalNamespaces: proposal.optionalNamespaces,\n          };\n          await this.client.session.set(session.topic, completeSession);\n          await this.setExpiry(session.topic, session.expiry);\n          if (topic) {\n            await this.client.core.pairing.updateMetadata({\n              topic,\n              metadata: session.peer.metadata,\n            });\n          }\n          resolve(completeSession);\n        }\n      },\n    );\n    const id = await this.sendRequest({\n      topic,\n      method: \"wc_sessionPropose\",\n      params: proposal,\n      throwOnFailedPublish: true,\n    });\n    await this.setProposal(id, { id, ...proposal });\n    return { uri, approval };\n  };\n\n  public pair: IEngine[\"pair\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      return await this.client.core.pairing.pair(params);\n    } catch (error) {\n      this.client.logger.error(\"pair() failed\");\n      throw error;\n    }\n  };\n\n  public approve: IEngine[\"approve\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidApprove(params);\n    } catch (error) {\n      this.client.logger.error(\"approve() -> isValidApprove() failed\");\n      throw error;\n    }\n    const { id, relayProtocol, namespaces, sessionProperties, sessionConfig } = params;\n    let proposal;\n    try {\n      proposal = this.client.proposal.get(id);\n    } catch (error) {\n      this.client.logger.error(`approve() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    let { pairingTopic, proposer, requiredNamespaces, optionalNamespaces } = proposal;\n    pairingTopic = pairingTopic || \"\";\n\n    const selfPublicKey = await this.client.core.crypto.generateKeyPair();\n    const peerPublicKey = proposer.publicKey;\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      selfPublicKey,\n      peerPublicKey,\n    );\n    const sessionSettle = {\n      relay: { protocol: relayProtocol ?? \"irn\" },\n      namespaces,\n      pairingTopic,\n      controller: { publicKey: selfPublicKey, metadata: this.client.metadata },\n      expiry: calcExpiry(SESSION_EXPIRY),\n      ...(sessionProperties && { sessionProperties }),\n      ...(sessionConfig && { sessionConfig }),\n    };\n    await this.client.core.relayer.subscribe(sessionTopic);\n    const session = {\n      ...sessionSettle,\n      topic: sessionTopic,\n      requiredNamespaces,\n      optionalNamespaces,\n      pairingTopic,\n      acknowledged: false,\n      self: sessionSettle.controller,\n      peer: {\n        publicKey: proposer.publicKey,\n        metadata: proposer.metadata,\n      },\n      controller: selfPublicKey,\n    };\n    await this.client.session.set(sessionTopic, session);\n    try {\n      await this.sendResult<\"wc_sessionPropose\">({\n        id,\n        topic: pairingTopic,\n        result: {\n          relay: {\n            protocol: relayProtocol ?? \"irn\",\n          },\n          responderPublicKey: selfPublicKey,\n        },\n        throwOnFailedPublish: true,\n      });\n      await this.sendRequest({\n        topic: sessionTopic,\n        method: \"wc_sessionSettle\",\n        params: sessionSettle,\n        throwOnFailedPublish: true,\n      });\n    } catch (error) {\n      this.client.logger.error(error);\n      // if the publish fails, delete the session and throw an error\n      this.client.session.delete(sessionTopic, getSdkError(\"USER_DISCONNECTED\"));\n      await this.client.core.relayer.unsubscribe(sessionTopic);\n      throw error;\n    }\n\n    await this.client.core.pairing.updateMetadata({\n      topic: pairingTopic,\n      metadata: proposer.metadata,\n    });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    await this.client.core.pairing.activate({ topic: pairingTopic });\n    await this.setExpiry(sessionTopic, calcExpiry(SESSION_EXPIRY));\n    return {\n      topic: sessionTopic,\n      acknowledged: () =>\n        new Promise((resolve) =>\n          setTimeout(() => resolve(this.client.session.get(sessionTopic)), 5_00),\n        ), // artificial delay to allow for the session to be processed by the peer\n    };\n  };\n\n  public reject: IEngine[\"reject\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidReject(params);\n    } catch (error) {\n      this.client.logger.error(\"reject() -> isValidReject() failed\");\n      throw error;\n    }\n    const { id, reason } = params;\n    let pairingTopic;\n    try {\n      const proposal = this.client.proposal.get(id);\n      pairingTopic = proposal.pairingTopic;\n    } catch (error) {\n      this.client.logger.error(`reject() -> proposal.get(${id}) failed`);\n      throw error;\n    }\n\n    if (pairingTopic) {\n      await this.sendError({\n        id,\n        topic: pairingTopic,\n        error: reason,\n      });\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n    }\n  };\n\n  public update: IEngine[\"update\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidUpdate(params);\n    } catch (error) {\n      this.client.logger.error(\"update() -> isValidUpdate() failed\");\n      throw error;\n    }\n    const { topic, namespaces } = params;\n\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n\n    const oldNamespaces = this.client.session.get(topic).namespaces;\n    this.events.once(engineEvent(\"session_update\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else {\n        resolve();\n      }\n    });\n    // Update the session with the new namespaces, if the publish fails, revert to the old.\n    // This allows the client to use the updated session like emitting events\n    // without waiting for the peer to acknowledge\n    await this.client.session.update(topic, { namespaces });\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionUpdate\",\n      params: { namespaces },\n      throwOnFailedPublish: true,\n      clientRpcId,\n      relayRpcId,\n    }).catch((error) => {\n      this.client.logger.error(error);\n      this.client.session.update(topic, { namespaces: oldNamespaces });\n      reject(error);\n    });\n    return { acknowledged };\n  };\n\n  public extend: IEngine[\"extend\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidExtend(params);\n    } catch (error) {\n      this.client.logger.error(\"extend() -> isValidExtend() failed\");\n      throw error;\n    }\n\n    const { topic } = params;\n    const clientRpcId = payloadId();\n    const { done: acknowledged, resolve, reject } = createDelayedPromise<void>();\n    this.events.once(engineEvent(\"session_extend\", clientRpcId), ({ error }: any) => {\n      if (error) reject(error);\n      else resolve();\n    });\n\n    await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n    this.sendRequest({\n      topic,\n      method: \"wc_sessionExtend\",\n      params: {},\n      clientRpcId,\n      throwOnFailedPublish: true,\n    }).catch((e) => {\n      reject(e);\n    });\n\n    return { acknowledged };\n  };\n\n  public request: IEngine[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    await this.isInitialized();\n    try {\n      await this.isValidRequest(params);\n    } catch (error) {\n      this.client.logger.error(\"request() -> isValidRequest() failed\");\n      throw error;\n    }\n    const { chainId, request, topic, expiry = ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl } = params;\n    const session = this.client.session.get(topic);\n    const clientRpcId = payloadId();\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    const { done, resolve, reject } = createDelayedPromise<T>(\n      expiry,\n      \"Request expired. Please try again.\",\n    );\n    this.events.once<\"session_request\">(\n      engineEvent(\"session_request\", clientRpcId),\n      ({ error, result }) => {\n        if (error) reject(error);\n        else resolve(result);\n      },\n    );\n    return await Promise.all([\n      new Promise<void>(async (resolve) => {\n        await this.sendRequest({\n          clientRpcId,\n          relayRpcId,\n          topic,\n          method: \"wc_sessionRequest\",\n          params: {\n            request: {\n              ...request,\n              expiryTimestamp: calcExpiry(expiry),\n            },\n            chainId,\n          },\n          expiry,\n          throwOnFailedPublish: true,\n        }).catch((error) => reject(error));\n        this.client.events.emit(\"session_request_sent\", {\n          topic,\n          request,\n          chainId,\n          id: clientRpcId,\n        });\n        resolve();\n      }),\n      new Promise<void>(async (resolve) => {\n        // only attempt to handle deeplinks if they are not explicitly disabled in the session config\n        if (!session.sessionConfig?.disableDeepLink) {\n          const wcDeepLink = await getDeepLink(\n            this.client.core.storage,\n            WALLETCONNECT_DEEPLINK_CHOICE,\n          );\n          handleDeeplinkRedirect({ id: clientRpcId, topic, wcDeepLink });\n        }\n        resolve();\n      }),\n      done(),\n    ]).then((result) => result[2]); // order is important here, we want to return the result of the `done` promise\n  };\n\n  public respond: IEngine[\"respond\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidRespond(params);\n    const { topic, response } = params;\n    const { id } = response;\n    if (isJsonRpcResult(response)) {\n      await this.sendResult({ id, topic, result: response.result, throwOnFailedPublish: true });\n    } else if (isJsonRpcError(response)) {\n      await this.sendError({ id, topic, error: response.error });\n    }\n    this.cleanupAfterResponse(params);\n  };\n\n  public ping: IEngine[\"ping\"] = async (params) => {\n    await this.isInitialized();\n    try {\n      await this.isValidPing(params);\n    } catch (error) {\n      this.client.logger.error(\"ping() -> isValidPing() failed\");\n      throw error;\n    }\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      const clientRpcId = payloadId();\n      const relayRpcId = getBigIntRpcId().toString() as any;\n      const { done, resolve, reject } = createDelayedPromise<void>();\n      this.events.once(engineEvent(\"session_ping\", clientRpcId), ({ error }: any) => {\n        if (error) reject(error);\n        else resolve();\n      });\n      await Promise.all([\n        this.sendRequest({\n          topic,\n          method: \"wc_sessionPing\",\n          params: {},\n          throwOnFailedPublish: true,\n          clientRpcId,\n          relayRpcId,\n        }),\n        done(),\n      ]);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.ping({ topic });\n    }\n  };\n\n  public emit: IEngine[\"emit\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidEmit(params);\n    const { topic, event, chainId } = params;\n    const relayRpcId = getBigIntRpcId().toString() as any;\n    await this.sendRequest({\n      topic,\n      method: \"wc_sessionEvent\",\n      params: { event, chainId },\n      throwOnFailedPublish: true,\n      relayRpcId,\n    });\n  };\n\n  public disconnect: IEngine[\"disconnect\"] = async (params) => {\n    await this.isInitialized();\n    await this.isValidDisconnect(params);\n    const { topic } = params;\n    if (this.client.session.keys.includes(topic)) {\n      // await an ack to ensure the relay has received the disconnect request\n      await this.sendRequest({\n        topic,\n        method: \"wc_sessionDelete\",\n        params: getSdkError(\"USER_DISCONNECTED\"),\n        throwOnFailedPublish: true,\n      });\n      await this.deleteSession({ topic, emitEvent: false });\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      await this.client.core.pairing.disconnect({ topic });\n    } else {\n      const { message } = getInternalError(\n        \"MISMATCHED_TOPIC\",\n        `Session or pairing topic not found: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  public find: IEngine[\"find\"] = (params) => {\n    this.isInitialized();\n    return this.client.session.getAll().filter((session) => isSessionCompatible(session, params));\n  };\n\n  public getPendingSessionRequests: IEngine[\"getPendingSessionRequests\"] = () => {\n    return this.client.pendingRequest.getAll();\n  };\n\n  // ---------- Auth ------------------------------------------------ //\n\n  public authenticate: IEngine[\"authenticate\"] = async (params) => {\n    this.isInitialized();\n    this.isValidAuthenticate(params);\n\n    const { chains, statement = \"\", uri, domain, nonce, type, exp, nbf, methods = [] } = params;\n    // reassign resources to remove reference as the array is modified and might cause side effects\n    const resources = [...(params.resources || [])];\n\n    const { topic: pairingTopic, uri: connectionUri } = await this.client.core.pairing.create({\n      methods: [\"wc_sessionAuthenticate\"],\n    });\n\n    this.client.logger.info({\n      message: \"Generated new pairing\",\n      pairing: { topic: pairingTopic, uri: connectionUri },\n    });\n\n    const publicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(publicKey);\n\n    await Promise.all([\n      this.client.auth.authKeys.set(AUTH_PUBLIC_KEY_NAME, { responseTopic, publicKey }),\n      this.client.auth.pairingTopics.set(responseTopic, { topic: responseTopic, pairingTopic }),\n    ]);\n    // Subscribe to response topic\n    await this.client.core.relayer.subscribe(responseTopic);\n\n    this.client.logger.info(`sending request to new pairing topic: ${pairingTopic}`);\n\n    if (methods.length > 0) {\n      const { namespace } = parseChainId(chains[0]);\n      let recap = createEncodedRecap(namespace, \"request\", methods);\n      const existingRecap = getRecapFromResources(resources);\n      if (existingRecap) {\n        // per Recaps spec, recap must occupy the last position in the resources array\n        // using .pop to remove the element given we already checked it's a recap and will replace it\n        const mergedRecap = mergeEncodedRecaps(recap, resources.pop() as string);\n        recap = mergedRecap;\n      }\n      resources.push(recap);\n    }\n\n    const expiryTimestamp = calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n    const request = {\n      authPayload: {\n        type: type ?? \"caip122\",\n        chains,\n        statement,\n        aud: uri,\n        domain,\n        version: \"1\",\n        nonce,\n        iat: new Date().toISOString(),\n        exp,\n        nbf,\n        resources,\n      },\n      requester: { publicKey, metadata: this.client.metadata },\n      expiryTimestamp,\n    };\n\n    // ----- build namespaces for fallback session proposal ----- //\n    const namespaces = {\n      eip155: {\n        chains,\n        // request `personal_sign` method by default to allow for fallback siwe\n        methods: [...new Set([\"personal_sign\", ...methods])],\n        events: [\"chainChanged\", \"accountsChanged\"],\n      },\n    };\n\n    const proposal = {\n      requiredNamespaces: {},\n      optionalNamespaces: namespaces,\n      relays: [{ protocol: \"irn\" }],\n      proposer: {\n        publicKey,\n        metadata: this.client.metadata,\n      },\n      expiryTimestamp,\n    };\n\n    const { done, resolve, reject } = createDelayedPromise(\n      ENGINE_RPC_OPTS.wc_sessionAuthenticate.req.ttl,\n      \"Request expired\",\n    );\n\n    // handle fallback session proposal response\n    const onSessionConnect = async ({ error, session }: any) => {\n      // cleanup listener for authenticate response\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      if (error) reject(error);\n      else if (session) {\n        session.self.publicKey = publicKey;\n        await this.client.session.set(session.topic, session);\n        await this.setExpiry(session.topic, session.expiry);\n        if (pairingTopic) {\n          await this.client.core.pairing.updateMetadata({\n            topic: pairingTopic,\n            metadata: session.peer.metadata,\n          });\n        }\n        const sessionObject = this.client.session.get(session.topic);\n        resolve({\n          session: sessionObject,\n        });\n      }\n    };\n    // handle session authenticate response\n    const onAuthenticate = async (payload: any) => {\n      if (payload.error) {\n        // wallets that do not support wc_sessionAuthenticate will return an error\n        // we should not reject the promise in this case as the fallback session proposal will be used\n        const error = getSdkError(\"WC_METHOD_UNSUPPORTED\", \"wc_sessionAuthenticate\");\n        if (payload.error.code === error.code) return;\n\n        // cleanup listener for fallback response\n        this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n        return reject(payload.error.message);\n      }\n\n      // cleanup listener for fallback response\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n\n      const {\n        cacaos,\n        responder,\n      }: {\n        cacaos: AuthTypes.SessionAuthenticateResponseParams[\"cacaos\"];\n        responder: AuthTypes.SessionAuthenticateResponseParams[\"responder\"];\n      } = payload.result;\n\n      const approvedMethods: string[] = [];\n      const approvedAccounts: string[] = [];\n      for (const cacao of cacaos) {\n        const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n        if (!isValid) {\n          this.client.logger.error(cacao, \"Signature verification failed\");\n          reject(getSdkError(\"SESSION_SETTLEMENT_FAILED\", \"Signature verification failed\"));\n        }\n\n        const { p: payload } = cacao;\n        const recap = getRecapFromResources(payload.resources);\n\n        const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n        const parsedAddress = getDidAddress(payload.iss) as string;\n\n        if (recap) {\n          const methodsfromRecap = getMethodsFromRecap(recap);\n          const chainsFromRecap = getChainsFromRecap(recap);\n          approvedMethods.push(...methodsfromRecap);\n          approvedChains.push(...chainsFromRecap);\n        }\n\n        for (const chain of approvedChains) {\n          approvedAccounts.push(`${chain}:${parsedAddress}`);\n        }\n      }\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        publicKey,\n        responder.publicKey,\n      );\n\n      //create session object\n      let session: SessionTypes.Struct | undefined;\n\n      if (approvedMethods.length > 0) {\n        session = {\n          topic: sessionTopic,\n          acknowledged: true,\n          self: {\n            publicKey,\n            metadata: this.client.metadata,\n          },\n          peer: responder,\n          controller: responder.publicKey,\n          expiry: calcExpiry(SESSION_EXPIRY),\n          requiredNamespaces: {},\n          optionalNamespaces: {},\n          relay: { protocol: \"irn\" },\n          pairingTopic,\n          namespaces: buildNamespacesFromAuth(\n            [...new Set(approvedMethods)],\n            [...new Set(approvedAccounts)],\n          ),\n        };\n\n        await this.client.core.relayer.subscribe(sessionTopic);\n        await this.client.session.set(sessionTopic, session);\n\n        session = this.client.session.get(sessionTopic);\n      }\n      resolve({\n        auths: cacaos,\n        session,\n      });\n    };\n\n    // set the ids for both requests\n    const id = payloadId();\n    const fallbackId = payloadId();\n\n    // subscribe to response events\n    this.events.once<\"session_connect\">(engineEvent(\"session_connect\"), onSessionConnect);\n    this.events.once(engineEvent(\"session_request\", id), onAuthenticate);\n\n    try {\n      // send both (main & fallback) requests\n      await Promise.all([\n        this.sendRequest({\n          topic: pairingTopic,\n          method: \"wc_sessionAuthenticate\",\n          params: request,\n          expiry: params.expiry,\n          throwOnFailedPublish: true,\n          clientRpcId: id,\n        }),\n        this.sendRequest({\n          topic: pairingTopic,\n          method: \"wc_sessionPropose\",\n          params: proposal,\n          expiry: ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl,\n          throwOnFailedPublish: true,\n          clientRpcId: fallbackId,\n        }),\n      ]);\n    } catch (error) {\n      // cleanup listeners on failed publish\n      this.events.off(engineEvent(\"session_connect\"), onSessionConnect);\n      this.events.off(engineEvent(\"session_request\", id), onAuthenticate);\n      throw error;\n    }\n\n    await this.setProposal(fallbackId, { id: fallbackId, ...proposal });\n\n    await this.client.auth.requests.set(id, {\n      authPayload: request.authPayload,\n      requester: request.requester,\n      expiryTimestamp,\n      id,\n      pairingTopic,\n      verifyContext: {} as any,\n    });\n\n    return {\n      uri: connectionUri,\n      response: done,\n    } as EngineTypes.SessionAuthenticateResponsePromise;\n  };\n\n  public approveSessionAuthenticate: IEngine[\"approveSessionAuthenticate\"] = async (\n    sessionAuthenticateResponseParams,\n  ) => {\n    this.isInitialized();\n\n    const { id, auths } = sessionAuthenticateResponseParams;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    const approvedMethods: string[] = [];\n    const approvedAccounts: string[] = [];\n    for (const cacao of auths) {\n      const isValid = await validateSignedCacao({ cacao, projectId: this.client.core.projectId });\n      if (!isValid) {\n        const invalidErr = getSdkError(\n          \"SESSION_SETTLEMENT_FAILED\",\n          \"Signature verification failed\",\n        );\n\n        await this.sendError({\n          id,\n          topic: responseTopic,\n          error: invalidErr,\n          encodeOpts,\n        });\n\n        throw new Error(invalidErr.message);\n      }\n\n      const { p: payload } = cacao;\n      const recap = getRecapFromResources(payload.resources);\n\n      const approvedChains: string[] = [getNamespacedDidChainId(payload.iss) as string];\n\n      const parsedAddress = getDidAddress(payload.iss) as string;\n\n      if (recap) {\n        const methodsfromRecap = getMethodsFromRecap(recap);\n        const chainsFromRecap = getChainsFromRecap(recap);\n        approvedMethods.push(...methodsfromRecap);\n        approvedChains.push(...chainsFromRecap);\n      }\n      for (const chain of approvedChains) {\n        approvedAccounts.push(`${chain}:${parsedAddress}`);\n      }\n    }\n\n    const sessionTopic = await this.client.core.crypto.generateSharedKey(\n      senderPublicKey,\n      receiverPublicKey,\n    );\n    let session: SessionTypes.Struct | undefined;\n    if (approvedMethods?.length > 0) {\n      session = {\n        topic: sessionTopic,\n        acknowledged: true,\n        self: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: receiverPublicKey,\n          metadata: pendingRequest.requester.metadata,\n        },\n        controller: receiverPublicKey,\n        expiry: calcExpiry(SESSION_EXPIRY),\n        authentication: auths,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        relay: { protocol: \"irn\" },\n        pairingTopic: \"\",\n        namespaces: buildNamespacesFromAuth(\n          [...new Set(approvedMethods)],\n          [...new Set(approvedAccounts)],\n        ),\n      };\n\n      await this.client.core.relayer.subscribe(sessionTopic);\n      await this.client.session.set(sessionTopic, session);\n    }\n\n    await this.sendResult<\"wc_sessionAuthenticate\">({\n      topic: responseTopic,\n      id,\n      result: {\n        cacaos: auths,\n        responder: {\n          publicKey: senderPublicKey,\n          metadata: this.client.metadata,\n        },\n      },\n      encodeOpts,\n      throwOnFailedPublish: true,\n    });\n    await this.client.auth.requests.delete(id, { message: \"fullfilled\", code: 0 });\n    await this.client.core.pairing.activate({ topic: pendingRequest.pairingTopic });\n    return { session };\n  };\n\n  public rejectSessionAuthenticate: IEngine[\"rejectSessionAuthenticate\"] = async (params) => {\n    await this.isInitialized();\n\n    const { id, reason } = params;\n\n    const pendingRequest = this.getPendingAuthRequest(id);\n\n    if (!pendingRequest) {\n      throw new Error(`Could not find pending auth request with id ${id}`);\n    }\n\n    const receiverPublicKey = pendingRequest.requester.publicKey;\n    const senderPublicKey = await this.client.core.crypto.generateKeyPair();\n    const responseTopic = hashKey(receiverPublicKey);\n\n    const encodeOpts = {\n      type: TYPE_1,\n      receiverPublicKey,\n      senderPublicKey,\n    };\n\n    await this.sendError({\n      id,\n      topic: responseTopic,\n      error: reason,\n      encodeOpts,\n    });\n    await this.client.auth.requests.delete(id, { message: \"rejected\", code: 0 });\n    await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n  };\n\n  public formatAuthMessage: IEngine[\"formatAuthMessage\"] = (params) => {\n    this.isInitialized();\n    const { request, iss } = params;\n    return formatMessage(request, iss);\n  };\n\n  // ---------- Private Helpers --------------------------------------- //\n\n  private cleanupDuplicatePairings: EnginePrivate[\"cleanupDuplicatePairings\"] = async (\n    session: SessionTypes.Struct,\n  ) => {\n    // older SDK versions are missing the `pairingTopic` prop thus we need to check for it\n    if (!session.pairingTopic) return;\n\n    try {\n      const pairing = this.client.core.pairing.pairings.get(session.pairingTopic);\n      const allPairings = this.client.core.pairing.pairings.getAll();\n      const duplicates = allPairings.filter(\n        (p) =>\n          p.peerMetadata?.url &&\n          p.peerMetadata?.url === session.peer.metadata.url &&\n          p.topic &&\n          p.topic !== pairing.topic,\n      );\n      if (duplicates.length === 0) return;\n      this.client.logger.info(`Cleaning up ${duplicates.length} duplicate pairing(s)`);\n      await Promise.all(\n        duplicates.map((p) => this.client.core.pairing.disconnect({ topic: p.topic })),\n      );\n      this.client.logger.info(`Duplicate pairings clean up finished`);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  private deleteSession: EnginePrivate[\"deleteSession\"] = async (params) => {\n    const { topic, expirerHasDeleted = false, emitEvent = true, id = 0 } = params;\n    const { self } = this.client.session.get(topic);\n    // Await the unsubscribe first to avoid deleting the symKey too early below.\n    await this.client.core.relayer.unsubscribe(topic);\n    await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n    this.addToRecentlyDeleted(topic, \"session\");\n    if (this.client.core.crypto.keychain.has(self.publicKey)) {\n      await this.client.core.crypto.deleteKeyPair(self.publicKey);\n    }\n    if (this.client.core.crypto.keychain.has(topic)) {\n      await this.client.core.crypto.deleteSymKey(topic);\n    }\n    if (!expirerHasDeleted) this.client.core.expirer.del(topic);\n    // remove any deeplinks from storage after the session is deleted\n    // to avoid navigating to incorrect deeplink later on\n    this.client.core.storage\n      .removeItem(WALLETCONNECT_DEEPLINK_CHOICE)\n      .catch((e) => this.client.logger.warn(e));\n    this.getPendingSessionRequests().forEach((r) => {\n      if (r.topic === topic) {\n        this.deletePendingSessionRequest(r.id, getSdkError(\"USER_DISCONNECTED\"));\n      }\n    });\n    if (emitEvent) this.client.events.emit(\"session_delete\", { id, topic });\n  };\n\n  private deleteProposal: EnginePrivate[\"deleteProposal\"] = async (id, expirerHasDeleted) => {\n    await Promise.all([\n      this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\")),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"proposal\");\n  };\n\n  private deletePendingSessionRequest: EnginePrivate[\"deletePendingSessionRequest\"] = async (\n    id,\n    reason,\n    expirerHasDeleted = false,\n  ) => {\n    await Promise.all([\n      this.client.pendingRequest.delete(id, reason),\n      expirerHasDeleted ? Promise.resolve() : this.client.core.expirer.del(id),\n    ]);\n    this.addToRecentlyDeleted(id, \"request\");\n    this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((r) => r.id !== id);\n    // set the requestQueue state to idle if expirer has deleted a request as trying to respond to it would result in an exception\n    if (expirerHasDeleted) {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.client.events.emit(\"session_request_expire\", { id });\n    }\n  };\n\n  private setExpiry: EnginePrivate[\"setExpiry\"] = async (topic, expiry) => {\n    if (this.client.session.keys.includes(topic)) {\n      await this.client.session.update(topic, { expiry });\n    }\n    this.client.core.expirer.set(topic, expiry);\n  };\n\n  private setProposal: EnginePrivate[\"setProposal\"] = async (id, proposal) => {\n    await this.client.proposal.set(id, proposal);\n    this.client.core.expirer.set(id, calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl));\n  };\n\n  private setPendingSessionRequest: EnginePrivate[\"setPendingSessionRequest\"] = async (\n    pendingRequest: PendingRequestTypes.Struct,\n  ) => {\n    const { id, topic, params, verifyContext } = pendingRequest;\n    const expiry =\n      params.request.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionRequest.req.ttl);\n    await this.client.pendingRequest.set(id, {\n      id,\n      topic,\n      params,\n      verifyContext,\n    });\n    if (expiry) this.client.core.expirer.set(id, expiry);\n  };\n\n  private sendRequest: EnginePrivate[\"sendRequest\"] = async (args) => {\n    const { topic, method, params, expiry, relayRpcId, clientRpcId, throwOnFailedPublish } = args;\n    const payload = formatJsonRpcRequest(method, params, clientRpcId);\n    if (isBrowser() && METHODS_TO_VERIFY.includes(method)) {\n      const hash = hashMessage(JSON.stringify(payload));\n      this.client.core.verify.register({ attestationId: hash });\n    }\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload);\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    const opts = ENGINE_RPC_OPTS[method].req;\n    if (expiry) opts.ttl = expiry;\n    if (relayRpcId) opts.id = relayRpcId;\n    this.client.core.history.set(topic, payload);\n    if (throwOnFailedPublish) {\n      opts.internal = {\n        ...opts.internal,\n        throwOnFailedPublish: true,\n      };\n      await this.client.core.relayer.publish(topic, message, opts);\n    } else {\n      this.client.core.relayer\n        .publish(topic, message, opts)\n        .catch((error) => this.client.logger.error(error));\n    }\n    return payload.id;\n  };\n\n  private sendResult: EnginePrivate[\"sendResult\"] = async (args) => {\n    const { id, topic, result, throwOnFailedPublish, encodeOpts } = args;\n    const payload = formatJsonRpcResult(id, result);\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload, encodeOpts);\n    } catch (error) {\n      // if encoding fails e.g. due to missing keychain, we want to cleanup all related data as its unusable\n      await this.cleanup();\n      this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendResult() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n    const opts = ENGINE_RPC_OPTS[record.request.method].res;\n    if (throwOnFailedPublish) {\n      opts.internal = {\n        ...opts.internal,\n        throwOnFailedPublish: true,\n      };\n      await this.client.core.relayer.publish(topic, message, opts);\n    } else {\n      this.client.core.relayer\n        .publish(topic, message, opts)\n        .catch((error) => this.client.logger.error(error));\n    }\n    await this.client.core.history.resolve(payload);\n  };\n\n  private sendError: EnginePrivate[\"sendError\"] = async (params) => {\n    const { id, topic, error, encodeOpts } = params;\n    const payload = formatJsonRpcError(id, error);\n    let message;\n    try {\n      message = await this.client.core.crypto.encode(topic, payload, encodeOpts);\n    } catch (error) {\n      await this.cleanup();\n      this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${topic} failed`);\n      throw error;\n    }\n    let record;\n    try {\n      record = await this.client.core.history.get(topic, id);\n    } catch (error) {\n      this.client.logger.error(`sendError() -> history.get(${topic}, ${id}) failed`);\n      throw error;\n    }\n    const opts = ENGINE_RPC_OPTS[record.request.method].res;\n    // await is intentionally omitted to speed up performance\n    this.client.core.relayer.publish(topic, message, opts);\n    await this.client.core.history.resolve(payload);\n  };\n\n  private cleanup: EnginePrivate[\"cleanup\"] = async () => {\n    const sessionTopics: string[] = [];\n    const proposalIds: number[] = [];\n    this.client.session.getAll().forEach((session) => {\n      let toCleanup = false;\n      if (isExpired(session.expiry)) toCleanup = true;\n      if (!this.client.core.crypto.keychain.has(session.topic)) toCleanup = true;\n      if (toCleanup) sessionTopics.push(session.topic);\n    });\n    this.client.proposal.getAll().forEach((proposal) => {\n      if (isExpired(proposal.expiryTimestamp)) proposalIds.push(proposal.id);\n    });\n    await Promise.all([\n      ...sessionTopics.map((topic) => this.deleteSession({ topic })),\n      ...proposalIds.map((id) => this.deleteProposal(id)),\n    ]);\n  };\n\n  private async isInitialized() {\n    if (!this.initialized) {\n      const { message } = getInternalError(\"NOT_INITIALIZED\", this.name);\n      throw new Error(message);\n    }\n    await this.client.core.relayer.confirmOnlineStateOrThrow();\n  }\n\n  // ---------- Relay Events Router ----------------------------------- //\n\n  private registerRelayerEvents() {\n    this.client.core.relayer.on(\n      RELAYER_EVENTS.message,\n      async (event: RelayerTypes.MessageEvent) => {\n        const { topic, message } = event;\n\n        // Retrieve the public key (if defined) to decrypt possible `auth_request` response\n        const { publicKey } = this.client.auth.authKeys.keys.includes(AUTH_PUBLIC_KEY_NAME)\n          ? this.client.auth.authKeys.get(AUTH_PUBLIC_KEY_NAME)\n          : ({ responseTopic: undefined, publicKey: undefined } as any);\n\n        const payload = await this.client.core.crypto.decode(topic, message, {\n          receiverPublicKey: publicKey,\n        });\n\n        try {\n          if (isJsonRpcRequest(payload)) {\n            this.client.core.history.set(topic, payload);\n            this.onRelayEventRequest({ topic, payload });\n          } else if (isJsonRpcResponse(payload)) {\n            await this.client.core.history.resolve(payload);\n            await this.onRelayEventResponse({ topic, payload });\n            this.client.core.history.delete(topic, payload.id);\n          } else {\n            this.onRelayEventUnknownPayload({ topic, payload });\n          }\n        } catch (error) {\n          this.client.logger.error(error);\n        }\n      },\n    );\n  }\n\n  private onRelayEventRequest: EnginePrivate[\"onRelayEventRequest\"] = async (event) => {\n    this.requestQueue.queue.push(event);\n    await this.processRequestsQueue();\n  };\n\n  private processRequestsQueue = async () => {\n    if (this.requestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(`Request queue already active, skipping...`);\n      return;\n    }\n\n    this.client.logger.info(\n      `Request queue starting with ${this.requestQueue.queue.length} requests`,\n    );\n\n    while (this.requestQueue.queue.length > 0) {\n      this.requestQueue.state = ENGINE_QUEUE_STATES.active;\n      const request = this.requestQueue.queue.shift();\n      if (!request) continue;\n\n      try {\n        this.processRequest(request);\n        // small delay to allow for any async tasks to complete\n        await new Promise((resolve) => setTimeout(resolve, 300));\n      } catch (error) {\n        this.client.logger.warn(error);\n      }\n    }\n    this.requestQueue.state = ENGINE_QUEUE_STATES.idle;\n  };\n\n  private processRequest: EnginePrivate[\"onRelayEventRequest\"] = (event) => {\n    const { topic, payload } = event;\n    const reqMethod = payload.method as JsonRpcTypes.WcMethod;\n\n    if (this.shouldIgnorePairingRequest({ topic, requestMethod: reqMethod })) {\n      return;\n    }\n\n    switch (reqMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeRequest(topic, payload);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleRequest(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateRequest(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendRequest(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingRequest(topic, payload);\n      case \"wc_sessionDelete\":\n        return this.onSessionDeleteRequest(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequest(topic, payload);\n      case \"wc_sessionEvent\":\n        return this.onSessionEventRequest(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateRequest(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported request method ${reqMethod}`);\n    }\n  };\n\n  private onRelayEventResponse: EnginePrivate[\"onRelayEventResponse\"] = async (event) => {\n    const { topic, payload } = event;\n    const record = await this.client.core.history.get(topic, payload.id);\n    const resMethod = record.request.method as JsonRpcTypes.WcMethod;\n    switch (resMethod) {\n      case \"wc_sessionPropose\":\n        return this.onSessionProposeResponse(topic, payload);\n      case \"wc_sessionSettle\":\n        return this.onSessionSettleResponse(topic, payload);\n      case \"wc_sessionUpdate\":\n        return this.onSessionUpdateResponse(topic, payload);\n      case \"wc_sessionExtend\":\n        return this.onSessionExtendResponse(topic, payload);\n      case \"wc_sessionPing\":\n        return this.onSessionPingResponse(topic, payload);\n      case \"wc_sessionRequest\":\n        return this.onSessionRequestResponse(topic, payload);\n      case \"wc_sessionAuthenticate\":\n        return this.onSessionAuthenticateResponse(topic, payload);\n      default:\n        return this.client.logger.info(`Unsupported response method ${resMethod}`);\n    }\n  };\n\n  private onRelayEventUnknownPayload: EnginePrivate[\"onRelayEventUnknownPayload\"] = (event) => {\n    const { topic } = event;\n    const { message } = getInternalError(\n      \"MISSING_OR_INVALID\",\n      `Decoded payload on topic ${topic} is not identifiable as a JSON-RPC request or a response.`,\n    );\n    throw new Error(message);\n  };\n\n  private shouldIgnorePairingRequest: EnginePrivate[\"shouldIgnorePairingRequest\"] = (params) => {\n    const { topic, requestMethod } = params;\n    const expectedMethods = this.expectedPairingMethodMap.get(topic);\n    // check if the request method matches the expected method\n    if (!expectedMethods) return false;\n    if (expectedMethods.includes(requestMethod)) return false;\n\n    /**\n     * we want to make sure fallback session proposal is ignored only if there are subscribers\n     * for the `session_authenticate` event, otherwise this would result in no-op for the user\n     */\n    if (expectedMethods.includes(\"wc_sessionAuthenticate\")) {\n      if (this.client.events.listenerCount(\"session_authenticate\") > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // ---------- Relay Events Handlers --------------------------------- //\n\n  private onSessionProposeRequest: EnginePrivate[\"onSessionProposeRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      this.isValidConnect({ ...payload.params });\n      const expiryTimestamp =\n        params.expiryTimestamp || calcExpiry(ENGINE_RPC_OPTS.wc_sessionPropose.req.ttl);\n      const proposal = { id, pairingTopic: topic, expiryTimestamp, ...params };\n      await this.setProposal(id, proposal);\n      const hash = hashMessage(JSON.stringify(payload));\n      const verifyContext = await this.getVerifyContext(hash, proposal.proposer.metadata);\n      this.client.events.emit(\"session_proposal\", { id, params: proposal, verifyContext });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionProposeResponse: EnginePrivate[\"onSessionProposeResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      const { result } = payload;\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", result });\n      const proposal = this.client.proposal.get(id);\n      this.client.logger.trace({ type: \"method\", method: \"onSessionProposeResponse\", proposal });\n      const selfPublicKey = proposal.proposer.publicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        selfPublicKey,\n      });\n      const peerPublicKey = result.responderPublicKey;\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        peerPublicKey,\n      });\n      const sessionTopic = await this.client.core.crypto.generateSharedKey(\n        selfPublicKey,\n        peerPublicKey,\n      );\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        sessionTopic,\n      });\n      const subscriptionId = await this.client.core.relayer.subscribe(sessionTopic);\n      this.client.logger.trace({\n        type: \"method\",\n        method: \"onSessionProposeResponse\",\n        subscriptionId,\n      });\n      await this.client.core.pairing.activate({ topic });\n    } else if (isJsonRpcError(payload)) {\n      await this.client.proposal.delete(id, getSdkError(\"USER_DISCONNECTED\"));\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners, 954`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { error: payload.error });\n    }\n  };\n\n  private onSessionSettleRequest: EnginePrivate[\"onSessionSettleRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      this.isValidSessionSettleRequest(params);\n      const {\n        relay,\n        controller,\n        expiry,\n        namespaces,\n        sessionProperties,\n        pairingTopic,\n        sessionConfig,\n      } = payload.params;\n      const session = {\n        topic,\n        relay,\n        expiry,\n        namespaces,\n        acknowledged: true,\n        pairingTopic,\n        requiredNamespaces: {},\n        optionalNamespaces: {},\n        controller: controller.publicKey,\n        self: {\n          publicKey: \"\",\n          metadata: this.client.metadata,\n        },\n        peer: {\n          publicKey: controller.publicKey,\n          metadata: controller.metadata,\n        },\n        ...(sessionProperties && { sessionProperties }),\n        ...(sessionConfig && { sessionConfig }),\n      };\n      await this.sendResult<\"wc_sessionSettle\">({\n        id: payload.id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      const target = engineEvent(\"session_connect\");\n      const listeners = this.events.listenerCount(target);\n      if (listeners === 0) {\n        throw new Error(`emitting ${target} without any listeners 997`);\n      }\n      this.events.emit(engineEvent(\"session_connect\"), { session });\n      this.cleanupDuplicatePairings(session);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionSettleResponse: EnginePrivate[\"onSessionSettleResponse\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    if (isJsonRpcResult(payload)) {\n      await this.client.session.update(topic, { acknowledged: true });\n      this.events.emit(engineEvent(\"session_approve\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      await this.client.session.delete(topic, getSdkError(\"USER_DISCONNECTED\"));\n      this.events.emit(engineEvent(\"session_approve\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionUpdateRequest: EnginePrivate[\"onSessionUpdateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { params, id } = payload;\n    try {\n      const memoryKey = `${topic}_session_update`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        this.sendError({ id, topic, error: getSdkError(\"INVALID_UPDATE_REQUEST\") });\n        return;\n      }\n      this.isValidUpdate({ topic, ...params });\n      try {\n        MemoryStore.set(memoryKey, id);\n        await this.client.session.update(topic, { namespaces: params.namespaces });\n        await this.sendResult<\"wc_sessionUpdate\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        });\n      } catch (e) {\n        MemoryStore.delete(memoryKey);\n        throw e;\n      }\n      this.client.events.emit(\"session_update\", { id, topic, params });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  // compares the timestamp of the last processed request with the current request\n  // client <-> client rpc ID is timestamp + 3 random digits\n  private isRequestOutOfSync = (lastId: number, currentId: number) => {\n    return parseInt(currentId.toString().slice(0, -3)) <= parseInt(lastId.toString().slice(0, -3));\n  };\n\n  private onSessionUpdateResponse: EnginePrivate[\"onSessionUpdateResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_update\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_update\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionExtendRequest: EnginePrivate[\"onSessionExtendRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidExtend({ topic });\n      await this.setExpiry(topic, calcExpiry(SESSION_EXPIRY));\n      await this.sendResult<\"wc_sessionExtend\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_extend\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionExtendResponse: EnginePrivate[\"onSessionExtendResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_extend\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), {});\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_extend\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionPingRequest: EnginePrivate[\"onSessionPingRequest\"] = async (topic, payload) => {\n    const { id } = payload;\n    try {\n      this.isValidPing({ topic });\n      await this.sendResult<\"wc_sessionPing\">({\n        id,\n        topic,\n        result: true,\n        throwOnFailedPublish: true,\n      });\n      this.client.events.emit(\"session_ping\", { id, topic });\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionPingResponse: EnginePrivate[\"onSessionPingResponse\"] = (_topic, payload) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_ping\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    // put at the end of the stack to avoid a race condition\n    // where session_ping listener is not yet initialized\n    setTimeout(() => {\n      if (isJsonRpcResult(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), {});\n      } else if (isJsonRpcError(payload)) {\n        this.events.emit(engineEvent(\"session_ping\", id), { error: payload.error });\n      }\n    }, 500);\n  };\n\n  private onSessionDeleteRequest: EnginePrivate[\"onSessionDeleteRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    try {\n      this.isValidDisconnect({ topic, reason: payload.params });\n      await Promise.all([\n        new Promise((resolve) => {\n          // RPC request needs to happen before deletion as it utalises session encryption\n          this.client.core.relayer.once(RELAYER_EVENTS.publish, async () => {\n            resolve(await this.deleteSession({ topic, id }));\n          });\n        }),\n        this.sendResult<\"wc_sessionDelete\">({\n          id,\n          topic,\n          result: true,\n          throwOnFailedPublish: true,\n        }),\n        this.cleanupPendingSentRequestsForTopic({ topic, error: getSdkError(\"USER_DISCONNECTED\") }),\n      ]);\n    } catch (err: any) {\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequest: EnginePrivate[\"onSessionRequest\"] = async (topic, payload) => {\n    const { id, params } = payload;\n    try {\n      await this.isValidRequest({ topic, ...params });\n      const hash = hashMessage(\n        JSON.stringify(formatJsonRpcRequest(\"wc_sessionRequest\", params, id)),\n      );\n      const session = this.client.session.get(topic);\n      const verifyContext = await this.getVerifyContext(hash, session.peer.metadata);\n      const request = {\n        id,\n        topic,\n        params,\n        verifyContext,\n      };\n      await this.setPendingSessionRequest(request);\n      this.addSessionRequestToSessionRequestQueue(request);\n      this.processSessionRequestQueue();\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionRequestResponse: EnginePrivate[\"onSessionRequestResponse\"] = (\n    _topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    const target = engineEvent(\"session_request\", id);\n    const listeners = this.events.listenerCount(target);\n    if (listeners === 0) {\n      throw new Error(`emitting ${target} without any listeners`);\n    }\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionEventRequest: EnginePrivate[\"onSessionEventRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { id, params } = payload;\n    try {\n      // similar to session update, we want to discard out of sync requests\n      // additionally we have to check the event type as well e.g. chainChanged/accountsChanged\n      const memoryKey = `${topic}_session_event_${params.event.name}`;\n      // compare the current request id with the last processed session update\n      // we want to update only if the request is newer than the last processed one\n      const lastSessionUpdateId = MemoryStore.get<number>(memoryKey);\n      if (lastSessionUpdateId && this.isRequestOutOfSync(lastSessionUpdateId, id)) {\n        this.client.logger.info(`Discarding out of sync request - ${id}`);\n        return;\n      }\n\n      this.isValidEmit({ topic, ...params });\n      this.client.events.emit(\"session_event\", { id, topic, params });\n      MemoryStore.set(memoryKey, id);\n    } catch (err: any) {\n      await this.sendError({\n        id,\n        topic,\n        error: err,\n      });\n      this.client.logger.error(err);\n    }\n  };\n\n  private onSessionAuthenticateResponse: EnginePrivate[\"onSessionAuthenticateResponse\"] = (\n    topic,\n    payload,\n  ) => {\n    const { id } = payload;\n    this.client.logger.trace({\n      type: \"method\",\n      method: \"onSessionAuthenticateResponse\",\n      topic,\n      payload,\n    });\n    if (isJsonRpcResult(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { result: payload.result });\n    } else if (isJsonRpcError(payload)) {\n      this.events.emit(engineEvent(\"session_request\", id), { error: payload.error });\n    }\n  };\n\n  private onSessionAuthenticateRequest: EnginePrivate[\"onSessionAuthenticateRequest\"] = async (\n    topic,\n    payload,\n  ) => {\n    const { requester, authPayload, expiryTimestamp } = payload.params;\n    const hash = hashMessage(JSON.stringify(payload));\n    const verifyContext = await this.getVerifyContext(hash, this.client.metadata);\n    const pendingRequest = {\n      requester,\n      pairingTopic: topic,\n      id: payload.id,\n      authPayload,\n      verifyContext,\n      expiryTimestamp,\n    };\n\n    await this.client.auth.requests.set(payload.id, pendingRequest);\n\n    this.client.events.emit(\"session_authenticate\", {\n      topic,\n      params: payload.params,\n      id: payload.id,\n    });\n  };\n\n  private addSessionRequestToSessionRequestQueue = (request: PendingRequestTypes.Struct) => {\n    this.sessionRequestQueue.queue.push(request);\n  };\n\n  private cleanupAfterResponse = (params: EngineTypes.RespondParams) => {\n    this.deletePendingSessionRequest(params.response.id, { message: \"fulfilled\", code: 0 });\n    // intentionally delay the emitting of the next pending request a bit\n    setTimeout(() => {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.idle;\n      this.processSessionRequestQueue();\n    }, toMiliseconds(this.requestQueueDelay));\n  };\n\n  // Allows for cleanup on any sent pending requests if the peer disconnects the session before responding\n  private cleanupPendingSentRequestsForTopic = ({\n    topic,\n    error,\n  }: {\n    topic: string;\n    error: ErrorResponse;\n  }) => {\n    const pendingRequests = this.client.core.history.pending;\n    if (pendingRequests.length > 0) {\n      const forSession = pendingRequests.filter(\n        (r) => r.topic === topic && r.request.method === \"wc_sessionRequest\",\n      );\n      forSession.forEach((r) => {\n        const id = r.request.id;\n        const target = engineEvent(\"session_request\", id);\n        const listeners = this.events.listenerCount(target);\n        if (listeners === 0) {\n          throw new Error(`emitting ${target} without any listeners`);\n        }\n        // notify .request() handler of the rejection\n        this.events.emit(engineEvent(\"session_request\", r.request.id), {\n          error,\n        });\n      });\n    }\n  };\n\n  private processSessionRequestQueue = () => {\n    if (this.sessionRequestQueue.state === ENGINE_QUEUE_STATES.active) {\n      this.client.logger.info(\"session request queue is already active.\");\n      return;\n    }\n    // Select the first/oldest request in the array to ensure last-in-first-out (LIFO)\n    const request = this.sessionRequestQueue.queue[0];\n    if (!request) {\n      this.client.logger.info(\"session request queue is empty.\");\n      return;\n    }\n\n    try {\n      this.sessionRequestQueue.state = ENGINE_QUEUE_STATES.active;\n      this.client.events.emit(\"session_request\", request);\n    } catch (error) {\n      this.client.logger.error(error);\n    }\n  };\n\n  // ---------- Expirer Events ---------------------------------------- //\n\n  private registerExpirerEvents() {\n    this.client.core.expirer.on(EXPIRER_EVENTS.expired, async (event: ExpirerTypes.Expiration) => {\n      const { topic, id } = parseExpirerTarget(event.target);\n      if (id && this.client.pendingRequest.keys.includes(id)) {\n        return await this.deletePendingSessionRequest(id, getInternalError(\"EXPIRED\"), true);\n      }\n\n      if (topic) {\n        if (this.client.session.keys.includes(topic)) {\n          await this.deleteSession({ topic, expirerHasDeleted: true });\n          this.client.events.emit(\"session_expire\", { topic });\n        }\n      } else if (id) {\n        await this.deleteProposal(id, true);\n        this.client.events.emit(\"proposal_expire\", { id });\n      }\n    });\n  }\n\n  // ---------- Pairing Events ---------------------------------------- //\n  private registerPairingEvents() {\n    this.client.core.pairing.events.on(PAIRING_EVENTS.create, (pairing: PairingTypes.Struct) =>\n      this.onPairingCreated(pairing),\n    );\n    this.client.core.pairing.events.on(PAIRING_EVENTS.delete, (pairing: PairingTypes.Struct) => {\n      this.addToRecentlyDeleted(pairing.topic, \"pairing\");\n    });\n  }\n\n  /**\n   * when a pairing is created, we check if there is a pending proposal for it.\n   * if there is, we send it to onSessionProposeRequest to be processed as if it was received from the relay.\n   * It allows QR/URI to be scanned multiple times without having to create new pairing.\n   */\n  private onPairingCreated = (pairing: PairingTypes.Struct) => {\n    if (pairing.methods) {\n      this.expectedPairingMethodMap.set(pairing.topic, pairing.methods);\n    }\n    if (pairing.active) return;\n    const proposals = this.client.proposal.getAll();\n    const proposal = proposals.find((p) => p.pairingTopic === pairing.topic);\n    if (!proposal) return;\n    this.onSessionProposeRequest(\n      pairing.topic,\n      formatJsonRpcRequest(\n        \"wc_sessionPropose\",\n        {\n          requiredNamespaces: proposal.requiredNamespaces,\n          optionalNamespaces: proposal.optionalNamespaces,\n          relays: proposal.relays,\n          proposer: proposal.proposer,\n          sessionProperties: proposal.sessionProperties,\n        },\n        proposal.id,\n      ),\n    );\n  };\n\n  // ---------- Validation Helpers ------------------------------------ //\n  private isValidPairingTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.core.pairing.pairings.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.core.pairing.pairings.get(topic).expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `pairing topic: ${topic}`);\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionTopic(topic: any) {\n    if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    // Store will throw custom message if topic was recently deleted\n    this.checkRecentlyDeleted(topic);\n    if (!this.client.session.keys.includes(topic)) {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n    if (isExpired(this.client.session.get(topic).expiry)) {\n      await this.deleteSession({ topic });\n      const { message } = getInternalError(\"EXPIRED\", `session topic: ${topic}`);\n      throw new Error(message);\n    }\n\n    if (!this.client.core.crypto.keychain.has(topic)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session topic does not exist in keychain: ${topic}`,\n      );\n      await this.deleteSession({ topic });\n      throw new Error(message);\n    }\n  }\n\n  private async isValidSessionOrPairingTopic(topic: string) {\n    this.checkRecentlyDeleted(topic);\n    if (this.client.session.keys.includes(topic)) {\n      await this.isValidSessionTopic(topic);\n    } else if (this.client.core.pairing.pairings.keys.includes(topic)) {\n      this.isValidPairingTopic(topic);\n    } else if (!isValidString(topic, false)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `session or pairing topic should be a string: ${topic}`,\n      );\n      throw new Error(message);\n    } else {\n      const { message } = getInternalError(\n        \"NO_MATCHING_KEY\",\n        `session or pairing topic doesn't exist: ${topic}`,\n      );\n      throw new Error(message);\n    }\n  }\n\n  private async isValidProposalId(id: any) {\n    if (!isValidId(id)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `proposal id should be a number: ${id}`,\n      );\n      throw new Error(message);\n    }\n    if (!this.client.proposal.keys.includes(id)) {\n      const { message } = getInternalError(\"NO_MATCHING_KEY\", `proposal id doesn't exist: ${id}`);\n      throw new Error(message);\n    }\n    if (isExpired(this.client.proposal.get(id).expiryTimestamp)) {\n      await this.deleteProposal(id);\n      const { message } = getInternalError(\"EXPIRED\", `proposal id: ${id}`);\n      throw new Error(message);\n    }\n  }\n\n  // ---------- Validation  ------------------------------------------- //\n\n  private isValidConnect: EnginePrivate[\"isValidConnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `connect() params: ${JSON.stringify(params)}`,\n      );\n      throw new Error(message);\n    }\n    const { pairingTopic, requiredNamespaces, optionalNamespaces, sessionProperties, relays } =\n      params;\n    if (!isUndefined(pairingTopic)) await this.isValidPairingTopic(pairingTopic);\n\n    if (!isValidRelays(relays, true)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `connect() relays: ${relays}`);\n      throw new Error(message);\n    }\n\n    // validate required namespaces only if they are defined\n    if (!isUndefined(requiredNamespaces) && isValidObject(requiredNamespaces) !== 0) {\n      this.validateNamespaces(requiredNamespaces, \"requiredNamespaces\");\n    }\n\n    // validate optional namespaces only if they are defined\n    if (!isUndefined(optionalNamespaces) && isValidObject(optionalNamespaces) !== 0) {\n      this.validateNamespaces(optionalNamespaces, \"optionalNamespaces\");\n    }\n\n    // validate session properties only if they are defined\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private validateNamespaces = (\n    namespaces: ProposalTypes.RequiredNamespaces | ProposalTypes.OptionalNamespaces,\n    type: string,\n  ) => {\n    const validRequiredNamespacesError = isValidRequiredNamespaces(namespaces, \"connect()\", type);\n    if (validRequiredNamespacesError) throw new Error(validRequiredNamespacesError.message);\n  };\n\n  private isValidApprove: EnginePrivate[\"isValidApprove\"] = async (params) => {\n    if (!isValidParams(params))\n      throw new Error(\n        getInternalError(\"MISSING_OR_INVALID\", `approve() params: ${params}`).message,\n      );\n    const { id, namespaces, relayProtocol, sessionProperties } = params;\n\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    const proposal = this.client.proposal.get(id);\n    const validNamespacesError = isValidNamespaces(namespaces, \"approve()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      proposal.requiredNamespaces,\n      namespaces,\n      \"approve()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    if (!isValidString(relayProtocol, true)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `approve() relayProtocol: ${relayProtocol}`,\n      );\n      throw new Error(message);\n    }\n\n    if (!isUndefined(sessionProperties)) {\n      this.validateSessionProps(sessionProperties, \"sessionProperties\");\n    }\n  };\n\n  private isValidReject: EnginePrivate[\"isValidReject\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `reject() params: ${params}`);\n      throw new Error(message);\n    }\n    const { id, reason } = params;\n    this.checkRecentlyDeleted(id);\n    await this.isValidProposalId(id);\n    if (!isValidErrorReason(reason)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `reject() reason: ${JSON.stringify(reason)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidSessionSettleRequest: EnginePrivate[\"isValidSessionSettleRequest\"] = (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() params: ${params}`,\n      );\n      throw new Error(message);\n    }\n    const { relay, controller, namespaces, expiry } = params;\n    if (!isValidRelay(relay)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `onSessionSettleRequest() relay protocol should be a string`,\n      );\n      throw new Error(message);\n    }\n    const validControllerError = isValidController(controller, \"onSessionSettleRequest()\");\n    if (validControllerError) throw new Error(validControllerError.message);\n    const validNamespacesError = isValidNamespaces(namespaces, \"onSessionSettleRequest()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    if (isExpired(expiry)) {\n      const { message } = getInternalError(\"EXPIRED\", `onSessionSettleRequest()`);\n      throw new Error(message);\n    }\n  };\n\n  private isValidUpdate: EnginePrivate[\"isValidUpdate\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `update() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, namespaces } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const session = this.client.session.get(topic);\n    const validNamespacesError = isValidNamespaces(namespaces, \"update()\");\n    if (validNamespacesError) throw new Error(validNamespacesError.message);\n    const conformingNamespacesError = isConformingNamespaces(\n      session.requiredNamespaces,\n      namespaces,\n      \"update()\",\n    );\n    if (conformingNamespacesError) throw new Error(conformingNamespacesError.message);\n    // TODO(ilja) - check if wallet\n  };\n\n  private isValidExtend: EnginePrivate[\"isValidExtend\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `extend() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n  };\n\n  private isValidRequest: EnginePrivate[\"isValidRequest\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, request, chainId, expiry } = params;\n    this.checkRecentlyDeleted(topic);\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `request() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidRequest(request)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() ${JSON.stringify(request)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesRequest(namespaces, chainId, request.method)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() method: ${request.method}`,\n      );\n      throw new Error(message);\n    }\n    if (expiry && !isValidRequestExpiry(expiry, SESSION_REQUEST_EXPIRY_BOUNDARIES)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `request() expiry: ${expiry}. Expiry must be a number (in seconds) between ${SESSION_REQUEST_EXPIRY_BOUNDARIES.min} and ${SESSION_REQUEST_EXPIRY_BOUNDARIES.max}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidRespond: EnginePrivate[\"isValidRespond\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `respond() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, response } = params;\n    try {\n      // if the session is already disconnected, we can't respond to the request so we need to delete it\n      await this.isValidSessionTopic(topic);\n    } catch (error) {\n      if (params?.response?.id) this.cleanupAfterResponse(params);\n      throw error;\n    }\n    if (!isValidResponse(response)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `respond() response: ${JSON.stringify(response)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidPing: EnginePrivate[\"isValidPing\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `ping() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidEmit: EnginePrivate[\"isValidEmit\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic, event, chainId } = params;\n    await this.isValidSessionTopic(topic);\n    const { namespaces } = this.client.session.get(topic);\n    if (!isValidNamespacesChainId(namespaces, chainId)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `emit() chainId: ${chainId}`);\n      throw new Error(message);\n    }\n    if (!isValidEvent(event)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n    if (!isValidNamespacesEvent(namespaces, chainId, event.name)) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `emit() event: ${JSON.stringify(event)}`,\n      );\n      throw new Error(message);\n    }\n  };\n\n  private isValidDisconnect: EnginePrivate[\"isValidDisconnect\"] = async (params) => {\n    if (!isValidParams(params)) {\n      const { message } = getInternalError(\"MISSING_OR_INVALID\", `disconnect() params: ${params}`);\n      throw new Error(message);\n    }\n    const { topic } = params;\n    await this.isValidSessionOrPairingTopic(topic);\n  };\n\n  private isValidAuthenticate = (params: AuthTypes.SessionAuthenticateParams) => {\n    const { chains, uri, domain, nonce } = params;\n\n    // ----- validate params ----- //\n    if (!Array.isArray(chains) || chains.length === 0) {\n      throw new Error(\"chains is required and must be a non-empty array\");\n    }\n    if (!isValidString(uri, false)) {\n      throw new Error(\"uri is required parameter\");\n    }\n    if (!isValidString(domain, false)) {\n      throw new Error(\"domain is required parameter\");\n    }\n    if (!isValidString(nonce, false)) {\n      throw new Error(\"nonce is required parameter\");\n    }\n\n    // ----- reject multi namespaces ----- //\n    const uniqueNamespaces = [...new Set(chains.map((chain) => parseChainId(chain).namespace))];\n    if (uniqueNamespaces.length > 1) {\n      throw new Error(\n        \"Multi-namespace requests are not supported. Please request single namespace only.\",\n      );\n    }\n\n    const { namespace } = parseChainId(chains[0]);\n    if (namespace !== \"eip155\") {\n      throw new Error(\n        \"Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.\",\n      );\n    }\n  };\n\n  private getVerifyContext = async (hash: string, metadata: CoreTypes.Metadata) => {\n    const context: Verify.Context = {\n      verified: {\n        verifyUrl: metadata.verifyUrl || VERIFY_SERVER,\n        validation: \"UNKNOWN\",\n        origin: metadata.url || \"\",\n      },\n    };\n\n    try {\n      const result = await this.client.core.verify.resolve({\n        attestationId: hash,\n        verifyUrl: metadata.verifyUrl,\n      });\n      if (result) {\n        context.verified.origin = result.origin;\n        context.verified.isScam = result.isScam;\n        context.verified.validation =\n          result.origin === new URL(metadata.url).origin ? \"VALID\" : \"INVALID\";\n      }\n    } catch (e) {\n      this.client.logger.info(e);\n    }\n\n    this.client.logger.info(`Verify context: ${JSON.stringify(context)}`);\n    return context;\n  };\n\n  private validateSessionProps = (properties: ProposalTypes.SessionProperties, type: string) => {\n    Object.values(properties).forEach((property) => {\n      if (!isValidString(property, false)) {\n        const { message } = getInternalError(\n          \"MISSING_OR_INVALID\",\n          `${type} must be in Record<string, string> format. Received: ${JSON.stringify(property)}`,\n        );\n        throw new Error(message);\n      }\n    });\n  };\n\n  private getPendingAuthRequest = (id: number) => {\n    const request = this.client.auth.requests.get(id);\n    return typeof request === \"object\" ? request : undefined;\n  };\n\n  private addToRecentlyDeleted = (\n    id: string | number,\n    type: \"pairing\" | \"session\" | \"proposal\" | \"request\",\n  ) => {\n    this.recentlyDeletedMap.set(id, type);\n    // remove first half of the map if it exceeds the limit\n    if (this.recentlyDeletedMap.size >= this.recentlyDeletedLimit) {\n      let i = 0;\n      const numItemsToDelete = this.recentlyDeletedLimit / 2;\n      for (const k of this.recentlyDeletedMap.keys()) {\n        if (i++ >= numItemsToDelete) {\n          break;\n        }\n        this.recentlyDeletedMap.delete(k);\n      }\n    }\n  };\n\n  private checkRecentlyDeleted = (id: string | number) => {\n    const deletedRecord = this.recentlyDeletedMap.get(id);\n    if (deletedRecord) {\n      const { message } = getInternalError(\n        \"MISSING_OR_INVALID\",\n        `Record was recently deleted - ${deletedRecord}: ${id}`,\n      );\n      throw new Error(message);\n    }\n  };\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, ProposalTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, PROPOSAL_CONTEXT } from \"../constants\";\n\nexport class Proposal extends Store<number, ProposalTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, PROPOSAL_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, SessionTypes } from \"@walletconnect/types\";\n\nimport { SIGN_CLIENT_STORAGE_PREFIX, SESSION_CONTEXT } from \"../constants\";\n\nexport class Session extends Store<string, SessionTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, SESSION_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore, PendingRequestTypes } from \"@walletconnect/types\";\nimport { REQUEST_CONTEXT, SIGN_CLIENT_STORAGE_PREFIX } from \"../constants\";\n\nexport class PendingRequest extends Store<number, PendingRequestTypes.Struct> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      REQUEST_CONTEXT,\n      SIGN_CLIENT_STORAGE_PREFIX,\n      (val: PendingRequestTypes.Struct) => val.id,\n    );\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, AUTH_PUBLIC_KEY_NAME } from \"../constants\";\n\nexport class AuthKey extends Store<string, { responseTopic: string; publicKey: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_KEYS_CONTEXT, AUTH_STORAGE_PREFIX, () => AUTH_PUBLIC_KEY_NAME);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { ICore } from \"@walletconnect/types\";\n\nimport { AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX } from \"../constants\";\n\nexport class AuthPairingTopic extends Store<string, { topic: string; pairingTopic: string }> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(core, logger, AUTH_PAIRING_TOPIC_CONTEXT, AUTH_STORAGE_PREFIX);\n  }\n}\n","import { Store } from \"@walletconnect/core\";\nimport { Logger } from \"@walletconnect/logger\";\nimport { AuthTypes, ICore } from \"@walletconnect/types\";\n\nimport { AUTH_STORAGE_PREFIX, AUTH_REQUEST_CONTEXT } from \"../constants\";\n\nexport class AuthRequest extends Store<number, AuthTypes.PendingRequest> {\n  constructor(public core: ICore, public logger: Logger) {\n    super(\n      core,\n      logger,\n      AUTH_REQUEST_CONTEXT,\n      AUTH_STORAGE_PREFIX,\n      (val: AuthTypes.PendingRequest) => val.id,\n    );\n  }\n}\n","import { Logger } from \"@walletconnect/logger\";\nimport { IAuth, ICore } from \"@walletconnect/types\";\nimport { AuthPairingTopic } from \"./authPairingTopic\";\nimport { AuthRequest } from \"./authRequest\";\nimport { AuthKey } from \"./authKey\";\n\nexport class AuthStore {\n  public authKeys: IAuth[\"authKeys\"];\n  public pairingTopics: IAuth[\"pairingTopics\"];\n  public requests: IAuth[\"requests\"];\n\n  constructor(public core: ICore, public logger: Logger) {\n    this.authKeys = new AuthKey(this.core, this.logger);\n    this.pairingTopics = new AuthPairingTopic(this.core, this.logger);\n    this.requests = new AuthRequest(this.core, this.logger);\n  }\n\n  public async init() {\n    await this.authKeys.init();\n    await this.pairingTopics.init();\n    await this.requests.init();\n  }\n}\n","import { Core } from \"@walletconnect/core\";\nimport {\n  generateChildLogger,\n  getDefaultLoggerOptions,\n  getLoggerContext,\n  pino,\n} from \"@walletconnect/logger\";\nimport { SignClientTypes, ISignClient, ISignClientEvents, EngineTypes } from \"@walletconnect/types\";\nimport { getAppMetadata } from \"@walletconnect/utils\";\nimport { EventEmitter } from \"events\";\nimport { SIGN_CLIENT_DEFAULT, SIGN_CLIENT_PROTOCOL, SIGN_CLIENT_VERSION } from \"./constants\";\nimport { AuthStore, Engine, PendingRequest, Proposal, Session } from \"./controllers\";\n\nexport class SignClient extends ISignClient {\n  public readonly protocol = SIGN_CLIENT_PROTOCOL;\n  public readonly version = SIGN_CLIENT_VERSION;\n  public readonly name: ISignClient[\"name\"] = SIGN_CLIENT_DEFAULT.name;\n  public readonly metadata: ISignClient[\"metadata\"];\n\n  public core: ISignClient[\"core\"];\n  public logger: ISignClient[\"logger\"];\n  public events: ISignClient[\"events\"] = new EventEmitter();\n  public engine: ISignClient[\"engine\"];\n  public session: ISignClient[\"session\"];\n  public proposal: ISignClient[\"proposal\"];\n  public pendingRequest: ISignClient[\"pendingRequest\"];\n  public auth: ISignClient[\"auth\"];\n\n  static async init(opts?: SignClientTypes.Options) {\n    const client = new SignClient(opts);\n    await client.initialize();\n\n    return client;\n  }\n\n  constructor(opts?: SignClientTypes.Options) {\n    super(opts);\n\n    this.name = opts?.name || SIGN_CLIENT_DEFAULT.name;\n    this.metadata = opts?.metadata || getAppMetadata();\n\n    const logger =\n      typeof opts?.logger !== \"undefined\" && typeof opts?.logger !== \"string\"\n        ? opts.logger\n        : pino(getDefaultLoggerOptions({ level: opts?.logger || SIGN_CLIENT_DEFAULT.logger }));\n\n    this.core = opts?.core || new Core(opts);\n    this.logger = generateChildLogger(logger, this.name);\n    this.session = new Session(this.core, this.logger);\n    this.proposal = new Proposal(this.core, this.logger);\n    this.pendingRequest = new PendingRequest(this.core, this.logger);\n    this.engine = new Engine(this);\n    this.auth = new AuthStore(this.core, this.logger);\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get pairing() {\n    return this.core.pairing.pairings;\n  }\n\n  // ---------- Events ----------------------------------------------- //\n\n  public on: ISignClientEvents[\"on\"] = (name, listener) => {\n    return this.events.on(name, listener);\n  };\n\n  public once: ISignClientEvents[\"once\"] = (name, listener) => {\n    return this.events.once(name, listener);\n  };\n\n  public off: ISignClientEvents[\"off\"] = (name, listener) => {\n    return this.events.off(name, listener);\n  };\n\n  public removeListener: ISignClientEvents[\"removeListener\"] = (name, listener) => {\n    return this.events.removeListener(name, listener);\n  };\n\n  public removeAllListeners: ISignClientEvents[\"removeAllListeners\"] = (name) => {\n    return this.events.removeAllListeners(name);\n  };\n\n  // ---------- Engine ----------------------------------------------- //\n\n  public connect: ISignClient[\"connect\"] = async (params) => {\n    try {\n      return await this.engine.connect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public pair: ISignClient[\"pair\"] = async (params) => {\n    try {\n      return await this.engine.pair(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approve: ISignClient[\"approve\"] = async (params) => {\n    try {\n      return await this.engine.approve(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public reject: ISignClient[\"reject\"] = async (params) => {\n    try {\n      return await this.engine.reject(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public update: ISignClient[\"update\"] = async (params) => {\n    try {\n      return await this.engine.update(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public extend: ISignClient[\"extend\"] = async (params) => {\n    try {\n      return await this.engine.extend(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public request: ISignClient[\"request\"] = async <T>(params: EngineTypes.RequestParams) => {\n    try {\n      return await this.engine.request<T>(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public respond: ISignClient[\"respond\"] = async (params) => {\n    try {\n      return await this.engine.respond(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public ping: ISignClient[\"ping\"] = async (params) => {\n    try {\n      return await this.engine.ping(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public emit: ISignClient[\"emit\"] = async (params) => {\n    try {\n      return await this.engine.emit(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public disconnect: ISignClient[\"disconnect\"] = async (params) => {\n    try {\n      return await this.engine.disconnect(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public find: ISignClient[\"find\"] = (params) => {\n    try {\n      return this.engine.find(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public getPendingSessionRequests: ISignClient[\"getPendingSessionRequests\"] = () => {\n    try {\n      return this.engine.getPendingSessionRequests();\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public authenticate: ISignClient[\"authenticate\"] = async (params) => {\n    try {\n      return await this.engine.authenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public formatAuthMessage: ISignClient[\"formatAuthMessage\"] = (params) => {\n    try {\n      return this.engine.formatAuthMessage(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public approveSessionAuthenticate: ISignClient[\"approveSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.approveSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  public rejectSessionAuthenticate: ISignClient[\"rejectSessionAuthenticate\"] = async (params) => {\n    try {\n      return await this.engine.rejectSessionAuthenticate(params);\n    } catch (error: any) {\n      this.logger.error(error.message);\n      throw error;\n    }\n  };\n\n  // ---------- Private ----------------------------------------------- //\n\n  private async initialize() {\n    this.logger.trace(`Initialized`);\n    try {\n      await this.core.start();\n      await this.session.init();\n      await this.proposal.init();\n      await this.pendingRequest.init();\n      await this.engine.init();\n      await this.auth.init();\n      this.core.verify.init({ verifyUrl: this.metadata.verifyUrl });\n      this.logger.info(`SignClient Initialization Success`);\n    } catch (error: any) {\n      this.logger.info(`SignClient Initialization Failure`);\n      this.logger.error(error.message);\n      throw error;\n    }\n  }\n}\n","import { SignClient as Client } from \"./client\";\nimport { Session } from \"./controllers/session\";\nexport * from \"./constants\";\n\nexport const SessionStore = Session;\nexport const SignClient = Client;\nexport default Client;\n"],"names":["THIRTY_DAYS","SEVEN_DAYS","FIVE_MINUTES","ONE_DAY","ONE_HOUR","IEngine","client","ENGINE_CONTEXT","EventEmmiter","ENGINE_QUEUE_STATES","ONE_SECOND","ENGINE_RPC_OPTS","toMiliseconds","params","connectParams","__spreadProps","__spreadValues","pairingTopic","requiredNamespaces","optionalNamespaces","sessionProperties","relays","topic","uri","active","error","newTopic","newUri","message","getInternalError","publicKey","expiry","expiryTimestamp","calcExpiry","proposal","RELAYER_DEFAULT_PROTOCOL","reject","resolve","approval","createDelayedPromise","PROPOSAL_EXPIRY_MESSAGE","engineEvent","session","completeSession","id","relayProtocol","namespaces","sessionConfig","proposer","selfPublicKey","peerPublicKey","sessionTopic","sessionSettle","SESSION_EXPIRY","getSdkError","reason","acknowledged","clientRpcId","payloadId","relayRpcId","getBigIntRpcId","oldNamespaces","e","chainId","request","done","result","_a","wcDeepLink","getDeepLink","WALLETCONNECT_DEEPLINK_CHOICE","handleDeeplinkRedirect","response","isJsonRpcResult","isJsonRpcError","event","isSessionCompatible","chains","statement","domain","nonce","type","exp","nbf","methods","resources","connectionUri","responseTopic","hashKey","AUTH_PUBLIC_KEY_NAME","namespace","parseChainId","recap","createEncodedRecap","getRecapFromResources","mergeEncodedRecaps","onSessionConnect","onAuthenticate","sessionObject","payload","cacaos","responder","approvedMethods","approvedAccounts","cacao","validateSignedCacao","approvedChains","getNamespacedDidChainId","parsedAddress","getDidAddress","methodsfromRecap","getMethodsFromRecap","chainsFromRecap","getChainsFromRecap","chain","buildNamespacesFromAuth","fallbackId","sessionAuthenticateResponseParams","auths","pendingRequest","receiverPublicKey","senderPublicKey","encodeOpts","TYPE_1","invalidErr","iss","formatMessage","pairing","duplicates","p","_b","expirerHasDeleted","emitEvent","self","r","verifyContext","args","method","throwOnFailedPublish","formatJsonRpcRequest","isBrowser","METHODS_TO_VERIFY","hash","hashMessage","opts","formatJsonRpcResult","record","formatJsonRpcError","sessionTopics","proposalIds","toCleanup","isExpired","reqMethod","resMethod","requestMethod","expectedMethods","err","subscriptionId","target","relay","controller","memoryKey","lastSessionUpdateId","MemoryStore","lastId","currentId","_topic","RELAYER_EVENTS","requester","authPayload","pendingRequests","isValidParams","isUndefined","isValidRelays","isValidObject","validRequiredNamespacesError","isValidRequiredNamespaces","validNamespacesError","isValidNamespaces","conformingNamespacesError","isConformingNamespaces","isValidString","isValidErrorReason","isValidRelay","validControllerError","isValidController","isValidNamespacesChainId","isValidRequest","isValidNamespacesRequest","isValidRequestExpiry","SESSION_REQUEST_EXPIRY_BOUNDARIES","isValidResponse","isValidEvent","isValidNamespacesEvent","metadata","context","VERIFY_SERVER","properties","property","i","numItemsToDelete","k","deletedRecord","isJsonRpcRequest","isJsonRpcResponse","EXPIRER_EVENTS","parseExpirerTarget","PAIRING_EVENTS","isValidId","Store","core","logger","PROPOSAL_CONTEXT","SIGN_CLIENT_STORAGE_PREFIX","SESSION_CONTEXT","REQUEST_CONTEXT","val","AUTH_KEYS_CONTEXT","AUTH_STORAGE_PREFIX","AUTH_PAIRING_TOPIC_CONTEXT","AUTH_REQUEST_CONTEXT","AuthKey","AuthPairingTopic","AuthRequest","SignClient","ISignClient","SIGN_CLIENT_PROTOCOL","SIGN_CLIENT_VERSION","SIGN_CLIENT_DEFAULT","EventEmitter","name","listener","getAppMetadata","pino","getDefaultLoggerOptions","Core","generateChildLogger","Session","Proposal","PendingRequest","Engine","AuthStore","getLoggerContext","Client"],"mappings":"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"}