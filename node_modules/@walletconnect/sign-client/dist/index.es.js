import{RELAYER_DEFAULT_PROTOCOL as tt,RELAYER_EVENTS as qe,VERIFY_SERVER as st,EXPIRER_EVENTS as it,PAIRING_EVENTS as Ne,Store as K,Core as rt}from"@walletconnect/core";import{pino as nt,getDefaultLoggerOptions as ot,generateChildLogger as at,getLoggerContext as ct}from"@walletconnect/logger";import{IEngine as lt,ISignClient as ht}from"@walletconnect/types";import{getInternalError as l,calcExpiry as N,createDelayedPromise as U,engineEvent as u,getSdkError as R,getDeepLink as pt,handleDeeplinkRedirect as dt,isSessionCompatible as ut,hashKey as ue,parseChainId as ge,createEncodedRecap as gt,getRecapFromResources as we,mergeEncodedRecaps as wt,validateSignedCacao as Pe,getNamespacedDidChainId as ve,getDidAddress as Oe,getMethodsFromRecap as Te,getChainsFromRecap as De,buildNamespacesFromAuth as xe,formatMessage as yt,isBrowser as mt,hashMessage as ee,isExpired as G,MemoryStore as H,isValidParams as T,isUndefined as Y,isValidRelays as St,isValidObject as Ae,isValidRequiredNamespaces as Et,isValidNamespaces as ye,isConformingNamespaces as Ve,isValidString as V,isValidErrorReason as _t,isValidRelay as Rt,isValidController as It,isValidNamespacesChainId as Ce,isValidRequest as ft,isValidNamespacesRequest as qt,isValidRequestExpiry as Nt,isValidResponse as Pt,isValidEvent as vt,isValidNamespacesEvent as Ot,parseExpirerTarget as Tt,isValidId as Dt,TYPE_1 as be,getAppMetadata as xt}from"@walletconnect/utils";import At,{EventEmitter as Vt}from"events";import{THIRTY_DAYS as Ct,SEVEN_DAYS as $e,FIVE_MINUTES as x,ONE_DAY as C,ONE_HOUR as Le,ONE_SECOND as bt,toMiliseconds as Me}from"@walletconnect/time";import{payloadId as k,getBigIntRpcId as te,isJsonRpcResult as b,isJsonRpcError as $,formatJsonRpcRequest as me,formatJsonRpcResult as $t,formatJsonRpcError as Lt,isJsonRpcRequest as Mt,isJsonRpcResponse as Kt}from"@walletconnect/jsonrpc-utils";const Se="wc",Ee=2,_e="client",se=`${Se}@${Ee}:${_e}:`,ie={name:_e,logger:"error",controller:!1,relayUrl:"wss://relay.walletconnect.com"},Ut={session_proposal:"session_proposal",session_update:"session_update",session_extend:"session_extend",session_ping:"session_ping",session_delete:"session_delete",session_expire:"session_expire",session_request:"session_request",session_request_sent:"session_request_sent",session_event:"session_event",proposal_expire:"proposal_expire",session_authenticate:"session_authenticate",session_request_expire:"session_request_expire"},Gt={database:":memory:"},Re="WALLETCONNECT_DEEPLINK_CHOICE",kt={created:"history_created",updated:"history_updated",deleted:"history_deleted",sync:"history_sync"},Ft="history",jt="0.3",Ke="proposal",Qt=Ct,Ue="Proposal expired",Ge="session",L=$e,ke="engine",q={wc_sessionPropose:{req:{ttl:x,prompt:!0,tag:1100},res:{ttl:x,prompt:!1,tag:1101}},wc_sessionSettle:{req:{ttl:x,prompt:!1,tag:1102},res:{ttl:x,prompt:!1,tag:1103}},wc_sessionUpdate:{req:{ttl:C,prompt:!1,tag:1104},res:{ttl:C,prompt:!1,tag:1105}},wc_sessionExtend:{req:{ttl:C,prompt:!1,tag:1106},res:{ttl:C,prompt:!1,tag:1107}},wc_sessionRequest:{req:{ttl:x,prompt:!0,tag:1108},res:{ttl:x,prompt:!1,tag:1109}},wc_sessionEvent:{req:{ttl:x,prompt:!0,tag:1110},res:{ttl:x,prompt:!1,tag:1111}},wc_sessionDelete:{req:{ttl:C,prompt:!1,tag:1112},res:{ttl:C,prompt:!1,tag:1113}},wc_sessionPing:{req:{ttl:C,prompt:!1,tag:1114},res:{ttl:C,prompt:!1,tag:1115}},wc_sessionAuthenticate:{req:{ttl:Le,prompt:!0,tag:1116},res:{ttl:Le,prompt:!1,tag:1117}}},re={min:x,max:$e},A={idle:"IDLE",active:"ACTIVE"},Fe="request",je=["wc_sessionPropose","wc_sessionRequest","wc_authRequest"],Qe="wc",zt=1.5,ze="auth",He="authKeys",Ye="pairingTopics",Xe="requests",X=`${Qe}@${1.5}:${ze}:`,J=`${X}:PUB_KEY`;var Ht=Object.defineProperty,Yt=Object.defineProperties,Xt=Object.getOwnPropertyDescriptors,Je=Object.getOwnPropertySymbols,Jt=Object.prototype.hasOwnProperty,Bt=Object.prototype.propertyIsEnumerable,Be=(S,n,t)=>n in S?Ht(S,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):S[n]=t,m=(S,n)=>{for(var t in n||(n={}))Jt.call(n,t)&&Be(S,t,n[t]);if(Je)for(var t of Je(n))Bt.call(n,t)&&Be(S,t,n[t]);return S},F=(S,n)=>Yt(S,Xt(n));class Wt extends lt{constructor(n){super(n),this.name=ke,this.events=new At,this.initialized=!1,this.requestQueue={state:A.idle,queue:[]},this.sessionRequestQueue={state:A.idle,queue:[]},this.requestQueueDelay=bt,this.expectedPairingMethodMap=new Map,this.recentlyDeletedMap=new Map,this.recentlyDeletedLimit=200,this.init=async()=>{this.initialized||(await this.cleanup(),this.registerRelayerEvents(),this.registerExpirerEvents(),this.registerPairingEvents(),this.client.core.pairing.register({methods:Object.keys(q)}),this.initialized=!0,setTimeout(()=>{this.sessionRequestQueue.queue=this.getPendingSessionRequests(),this.processSessionRequestQueue()},Me(this.requestQueueDelay)))},this.connect=async t=>{await this.isInitialized();const e=F(m({},t),{requiredNamespaces:t.requiredNamespaces||{},optionalNamespaces:t.optionalNamespaces||{}});await this.isValidConnect(e);const{pairingTopic:s,requiredNamespaces:i,optionalNamespaces:r,sessionProperties:o,relays:a}=e;let c=s,d,p=!1;try{c&&(p=this.client.core.pairing.pairings.get(c).active)}catch(f){throw this.client.logger.error(`connect() -> pairing.get(${c}) failed`),f}if(!c||!p){const{topic:f,uri:v}=await this.client.core.pairing.create();c=f,d=v}if(!c){const{message:f}=l("NO_MATCHING_KEY",`connect() pairing topic: ${c}`);throw new Error(f)}const g=await this.client.core.crypto.generateKeyPair(),h=q.wc_sessionPropose.req.ttl||x,y=N(h),w=m({requiredNamespaces:i,optionalNamespaces:r,relays:a??[{protocol:tt}],proposer:{publicKey:g,metadata:this.client.metadata},expiryTimestamp:y},o&&{sessionProperties:o}),{reject:I,resolve:D,done:E}=U(h,Ue);this.events.once(u("session_connect"),async({error:f,session:v})=>{if(f)I(f);else if(v){v.self.publicKey=g;const j=F(m({},v),{requiredNamespaces:w.requiredNamespaces,optionalNamespaces:w.optionalNamespaces});await this.client.session.set(v.topic,j),await this.setExpiry(v.topic,v.expiry),c&&await this.client.core.pairing.updateMetadata({topic:c,metadata:v.peer.metadata}),D(j)}});const P=await this.sendRequest({topic:c,method:"wc_sessionPropose",params:w,throwOnFailedPublish:!0});return await this.setProposal(P,m({id:P},w)),{uri:d,approval:E}},this.pair=async t=>{await this.isInitialized();try{return await this.client.core.pairing.pair(t)}catch(e){throw this.client.logger.error("pair() failed"),e}},this.approve=async t=>{await this.isInitialized();try{await this.isValidApprove(t)}catch(E){throw this.client.logger.error("approve() -> isValidApprove() failed"),E}const{id:e,relayProtocol:s,namespaces:i,sessionProperties:r,sessionConfig:o}=t;let a;try{a=this.client.proposal.get(e)}catch(E){throw this.client.logger.error(`approve() -> proposal.get(${e}) failed`),E}let{pairingTopic:c,proposer:d,requiredNamespaces:p,optionalNamespaces:g}=a;c=c||"";const h=await this.client.core.crypto.generateKeyPair(),y=d.publicKey,w=await this.client.core.crypto.generateSharedKey(h,y),I=m(m({relay:{protocol:s??"irn"},namespaces:i,pairingTopic:c,controller:{publicKey:h,metadata:this.client.metadata},expiry:N(L)},r&&{sessionProperties:r}),o&&{sessionConfig:o});await this.client.core.relayer.subscribe(w);const D=F(m({},I),{topic:w,requiredNamespaces:p,optionalNamespaces:g,pairingTopic:c,acknowledged:!1,self:I.controller,peer:{publicKey:d.publicKey,metadata:d.metadata},controller:h});await this.client.session.set(w,D);try{await this.sendResult({id:e,topic:c,result:{relay:{protocol:s??"irn"},responderPublicKey:h},throwOnFailedPublish:!0}),await this.sendRequest({topic:w,method:"wc_sessionSettle",params:I,throwOnFailedPublish:!0})}catch(E){throw this.client.logger.error(E),this.client.session.delete(w,R("USER_DISCONNECTED")),await this.client.core.relayer.unsubscribe(w),E}return await this.client.core.pairing.updateMetadata({topic:c,metadata:d.metadata}),await this.client.proposal.delete(e,R("USER_DISCONNECTED")),await this.client.core.pairing.activate({topic:c}),await this.setExpiry(w,N(L)),{topic:w,acknowledged:()=>new Promise(E=>setTimeout(()=>E(this.client.session.get(w)),500))}},this.reject=async t=>{await this.isInitialized();try{await this.isValidReject(t)}catch(r){throw this.client.logger.error("reject() -> isValidReject() failed"),r}const{id:e,reason:s}=t;let i;try{i=this.client.proposal.get(e).pairingTopic}catch(r){throw this.client.logger.error(`reject() -> proposal.get(${e}) failed`),r}i&&(await this.sendError({id:e,topic:i,error:s}),await this.client.proposal.delete(e,R("USER_DISCONNECTED")))},this.update=async t=>{await this.isInitialized();try{await this.isValidUpdate(t)}catch(p){throw this.client.logger.error("update() -> isValidUpdate() failed"),p}const{topic:e,namespaces:s}=t,{done:i,resolve:r,reject:o}=U(),a=k(),c=te().toString(),d=this.client.session.get(e).namespaces;return this.events.once(u("session_update",a),({error:p})=>{p?o(p):r()}),await this.client.session.update(e,{namespaces:s}),this.sendRequest({topic:e,method:"wc_sessionUpdate",params:{namespaces:s},throwOnFailedPublish:!0,clientRpcId:a,relayRpcId:c}).catch(p=>{this.client.logger.error(p),this.client.session.update(e,{namespaces:d}),o(p)}),{acknowledged:i}},this.extend=async t=>{await this.isInitialized();try{await this.isValidExtend(t)}catch(a){throw this.client.logger.error("extend() -> isValidExtend() failed"),a}const{topic:e}=t,s=k(),{done:i,resolve:r,reject:o}=U();return this.events.once(u("session_extend",s),({error:a})=>{a?o(a):r()}),await this.setExpiry(e,N(L)),this.sendRequest({topic:e,method:"wc_sessionExtend",params:{},clientRpcId:s,throwOnFailedPublish:!0}).catch(a=>{o(a)}),{acknowledged:i}},this.request=async t=>{await this.isInitialized();try{await this.isValidRequest(t)}catch(h){throw this.client.logger.error("request() -> isValidRequest() failed"),h}const{chainId:e,request:s,topic:i,expiry:r=q.wc_sessionRequest.req.ttl}=t,o=this.client.session.get(i),a=k(),c=te().toString(),{done:d,resolve:p,reject:g}=U(r,"Request expired. Please try again.");return this.events.once(u("session_request",a),({error:h,result:y})=>{h?g(h):p(y)}),await Promise.all([new Promise(async h=>{await this.sendRequest({clientRpcId:a,relayRpcId:c,topic:i,method:"wc_sessionRequest",params:{request:F(m({},s),{expiryTimestamp:N(r)}),chainId:e},expiry:r,throwOnFailedPublish:!0}).catch(y=>g(y)),this.client.events.emit("session_request_sent",{topic:i,request:s,chainId:e,id:a}),h()}),new Promise(async h=>{var y;if(!((y=o.sessionConfig)!=null&&y.disableDeepLink)){const w=await pt(this.client.core.storage,Re);dt({id:a,topic:i,wcDeepLink:w})}h()}),d()]).then(h=>h[2])},this.respond=async t=>{await this.isInitialized(),await this.isValidRespond(t);const{topic:e,response:s}=t,{id:i}=s;b(s)?await this.sendResult({id:i,topic:e,result:s.result,throwOnFailedPublish:!0}):$(s)&&await this.sendError({id:i,topic:e,error:s.error}),this.cleanupAfterResponse(t)},this.ping=async t=>{await this.isInitialized();try{await this.isValidPing(t)}catch(s){throw this.client.logger.error("ping() -> isValidPing() failed"),s}const{topic:e}=t;if(this.client.session.keys.includes(e)){const s=k(),i=te().toString(),{done:r,resolve:o,reject:a}=U();this.events.once(u("session_ping",s),({error:c})=>{c?a(c):o()}),await Promise.all([this.sendRequest({topic:e,method:"wc_sessionPing",params:{},throwOnFailedPublish:!0,clientRpcId:s,relayRpcId:i}),r()])}else this.client.core.pairing.pairings.keys.includes(e)&&await this.client.core.pairing.ping({topic:e})},this.emit=async t=>{await this.isInitialized(),await this.isValidEmit(t);const{topic:e,event:s,chainId:i}=t,r=te().toString();await this.sendRequest({topic:e,method:"wc_sessionEvent",params:{event:s,chainId:i},throwOnFailedPublish:!0,relayRpcId:r})},this.disconnect=async t=>{await this.isInitialized(),await this.isValidDisconnect(t);const{topic:e}=t;if(this.client.session.keys.includes(e))await this.sendRequest({topic:e,method:"wc_sessionDelete",params:R("USER_DISCONNECTED"),throwOnFailedPublish:!0}),await this.deleteSession({topic:e,emitEvent:!1});else if(this.client.core.pairing.pairings.keys.includes(e))await this.client.core.pairing.disconnect({topic:e});else{const{message:s}=l("MISMATCHED_TOPIC",`Session or pairing topic not found: ${e}`);throw new Error(s)}},this.find=t=>(this.isInitialized(),this.client.session.getAll().filter(e=>ut(e,t))),this.getPendingSessionRequests=()=>this.client.pendingRequest.getAll(),this.authenticate=async t=>{this.isInitialized(),this.isValidAuthenticate(t);const{chains:e,statement:s="",uri:i,domain:r,nonce:o,type:a,exp:c,nbf:d,methods:p=[]}=t,g=[...t.resources||[]],{topic:h,uri:y}=await this.client.core.pairing.create({methods:["wc_sessionAuthenticate"]});this.client.logger.info({message:"Generated new pairing",pairing:{topic:h,uri:y}});const w=await this.client.core.crypto.generateKeyPair(),I=ue(w);if(await Promise.all([this.client.auth.authKeys.set(J,{responseTopic:I,publicKey:w}),this.client.auth.pairingTopics.set(I,{topic:I,pairingTopic:h})]),await this.client.core.relayer.subscribe(I),this.client.logger.info(`sending request to new pairing topic: ${h}`),p.length>0){const{namespace:O}=ge(e[0]);let _=gt(O,"request",p);we(g)&&(_=wt(_,g.pop())),g.push(_)}const D=N(q.wc_sessionPropose.req.ttl),E={authPayload:{type:a??"caip122",chains:e,statement:s,aud:i,domain:r,version:"1",nonce:o,iat:new Date().toISOString(),exp:c,nbf:d,resources:g},requester:{publicKey:w,metadata:this.client.metadata},expiryTimestamp:D},P={eip155:{chains:e,methods:[...new Set(["personal_sign",...p])],events:["chainChanged","accountsChanged"]}},f={requiredNamespaces:{},optionalNamespaces:P,relays:[{protocol:"irn"}],proposer:{publicKey:w,metadata:this.client.metadata},expiryTimestamp:D},{done:v,resolve:j,reject:oe}=U(q.wc_sessionAuthenticate.req.ttl,"Request expired"),B=async({error:O,session:_})=>{if(this.events.off(u("session_request",M),ae),O)oe(O);else if(_){_.self.publicKey=w,await this.client.session.set(_.topic,_),await this.setExpiry(_.topic,_.expiry),h&&await this.client.core.pairing.updateMetadata({topic:h,metadata:_.peer.metadata});const Q=this.client.session.get(_.topic);j({session:Q})}},ae=async O=>{if(O.error){const z=R("WC_METHOD_UNSUPPORTED","wc_sessionAuthenticate");return O.error.code===z.code?void 0:(this.events.off(u("session_connect"),B),oe(O.error.message))}this.events.off(u("session_connect"),B);const{cacaos:_,responder:Q}=O.result,le=[],Ie=[];for(const z of _){await Pe({cacao:z,projectId:this.client.core.projectId})||(this.client.logger.error(z,"Signature verification failed"),oe(R("SESSION_SETTLEMENT_FAILED","Signature verification failed")));const{p:he}=z,pe=we(he.resources),fe=[ve(he.iss)],Ze=Oe(he.iss);if(pe){const de=Te(pe),et=De(pe);le.push(...de),fe.push(...et)}for(const de of fe)Ie.push(`${de}:${Ze}`)}const W=await this.client.core.crypto.generateSharedKey(w,Q.publicKey);let Z;le.length>0&&(Z={topic:W,acknowledged:!0,self:{publicKey:w,metadata:this.client.metadata},peer:Q,controller:Q.publicKey,expiry:N(L),requiredNamespaces:{},optionalNamespaces:{},relay:{protocol:"irn"},pairingTopic:h,namespaces:xe([...new Set(le)],[...new Set(Ie)])},await this.client.core.relayer.subscribe(W),await this.client.session.set(W,Z),Z=this.client.session.get(W)),j({auths:_,session:Z})},M=k(),ce=k();this.events.once(u("session_connect"),B),this.events.once(u("session_request",M),ae);try{await Promise.all([this.sendRequest({topic:h,method:"wc_sessionAuthenticate",params:E,expiry:t.expiry,throwOnFailedPublish:!0,clientRpcId:M}),this.sendRequest({topic:h,method:"wc_sessionPropose",params:f,expiry:q.wc_sessionPropose.req.ttl,throwOnFailedPublish:!0,clientRpcId:ce})])}catch(O){throw this.events.off(u("session_connect"),B),this.events.off(u("session_request",M),ae),O}return await this.setProposal(ce,m({id:ce},f)),await this.client.auth.requests.set(M,{authPayload:E.authPayload,requester:E.requester,expiryTimestamp:D,id:M,pairingTopic:h,verifyContext:{}}),{uri:y,response:v}},this.approveSessionAuthenticate=async t=>{this.isInitialized();const{id:e,auths:s}=t,i=this.getPendingAuthRequest(e);if(!i)throw new Error(`Could not find pending auth request with id ${e}`);const r=i.requester.publicKey,o=await this.client.core.crypto.generateKeyPair(),a=ue(r),c={type:be,receiverPublicKey:r,senderPublicKey:o},d=[],p=[];for(const y of s){if(!await Pe({cacao:y,projectId:this.client.core.projectId})){const P=R("SESSION_SETTLEMENT_FAILED","Signature verification failed");throw await this.sendError({id:e,topic:a,error:P,encodeOpts:c}),new Error(P.message)}const{p:w}=y,I=we(w.resources),D=[ve(w.iss)],E=Oe(w.iss);if(I){const P=Te(I),f=De(I);d.push(...P),D.push(...f)}for(const P of D)p.push(`${P}:${E}`)}const g=await this.client.core.crypto.generateSharedKey(o,r);let h;return d?.length>0&&(h={topic:g,acknowledged:!0,self:{publicKey:o,metadata:this.client.metadata},peer:{publicKey:r,metadata:i.requester.metadata},controller:r,expiry:N(L),authentication:s,requiredNamespaces:{},optionalNamespaces:{},relay:{protocol:"irn"},pairingTopic:"",namespaces:xe([...new Set(d)],[...new Set(p)])},await this.client.core.relayer.subscribe(g),await this.client.session.set(g,h)),await this.sendResult({topic:a,id:e,result:{cacaos:s,responder:{publicKey:o,metadata:this.client.metadata}},encodeOpts:c,throwOnFailedPublish:!0}),await this.client.auth.requests.delete(e,{message:"fullfilled",code:0}),await this.client.core.pairing.activate({topic:i.pairingTopic}),{session:h}},this.rejectSessionAuthenticate=async t=>{await this.isInitialized();const{id:e,reason:s}=t,i=this.getPendingAuthRequest(e);if(!i)throw new Error(`Could not find pending auth request with id ${e}`);const r=i.requester.publicKey,o=await this.client.core.crypto.generateKeyPair(),a=ue(r),c={type:be,receiverPublicKey:r,senderPublicKey:o};await this.sendError({id:e,topic:a,error:s,encodeOpts:c}),await this.client.auth.requests.delete(e,{message:"rejected",code:0}),await this.client.proposal.delete(e,R("USER_DISCONNECTED"))},this.formatAuthMessage=t=>{this.isInitialized();const{request:e,iss:s}=t;return yt(e,s)},this.cleanupDuplicatePairings=async t=>{if(t.pairingTopic)try{const e=this.client.core.pairing.pairings.get(t.pairingTopic),s=this.client.core.pairing.pairings.getAll().filter(i=>{var r,o;return((r=i.peerMetadata)==null?void 0:r.url)&&((o=i.peerMetadata)==null?void 0:o.url)===t.peer.metadata.url&&i.topic&&i.topic!==e.topic});if(s.length===0)return;this.client.logger.info(`Cleaning up ${s.length} duplicate pairing(s)`),await Promise.all(s.map(i=>this.client.core.pairing.disconnect({topic:i.topic}))),this.client.logger.info("Duplicate pairings clean up finished")}catch(e){this.client.logger.error(e)}},this.deleteSession=async t=>{const{topic:e,expirerHasDeleted:s=!1,emitEvent:i=!0,id:r=0}=t,{self:o}=this.client.session.get(e);await this.client.core.relayer.unsubscribe(e),await this.client.session.delete(e,R("USER_DISCONNECTED")),this.addToRecentlyDeleted(e,"session"),this.client.core.crypto.keychain.has(o.publicKey)&&await this.client.core.crypto.deleteKeyPair(o.publicKey),this.client.core.crypto.keychain.has(e)&&await this.client.core.crypto.deleteSymKey(e),s||this.client.core.expirer.del(e),this.client.core.storage.removeItem(Re).catch(a=>this.client.logger.warn(a)),this.getPendingSessionRequests().forEach(a=>{a.topic===e&&this.deletePendingSessionRequest(a.id,R("USER_DISCONNECTED"))}),i&&this.client.events.emit("session_delete",{id:r,topic:e})},this.deleteProposal=async(t,e)=>{await Promise.all([this.client.proposal.delete(t,R("USER_DISCONNECTED")),e?Promise.resolve():this.client.core.expirer.del(t)]),this.addToRecentlyDeleted(t,"proposal")},this.deletePendingSessionRequest=async(t,e,s=!1)=>{await Promise.all([this.client.pendingRequest.delete(t,e),s?Promise.resolve():this.client.core.expirer.del(t)]),this.addToRecentlyDeleted(t,"request"),this.sessionRequestQueue.queue=this.sessionRequestQueue.queue.filter(i=>i.id!==t),s&&(this.sessionRequestQueue.state=A.idle,this.client.events.emit("session_request_expire",{id:t}))},this.setExpiry=async(t,e)=>{this.client.session.keys.includes(t)&&await this.client.session.update(t,{expiry:e}),this.client.core.expirer.set(t,e)},this.setProposal=async(t,e)=>{await this.client.proposal.set(t,e),this.client.core.expirer.set(t,N(q.wc_sessionPropose.req.ttl))},this.setPendingSessionRequest=async t=>{const{id:e,topic:s,params:i,verifyContext:r}=t,o=i.request.expiryTimestamp||N(q.wc_sessionRequest.req.ttl);await this.client.pendingRequest.set(e,{id:e,topic:s,params:i,verifyContext:r}),o&&this.client.core.expirer.set(e,o)},this.sendRequest=async t=>{const{topic:e,method:s,params:i,expiry:r,relayRpcId:o,clientRpcId:a,throwOnFailedPublish:c}=t,d=me(s,i,a);if(mt()&&je.includes(s)){const h=ee(JSON.stringify(d));this.client.core.verify.register({attestationId:h})}let p;try{p=await this.client.core.crypto.encode(e,d)}catch(h){throw await this.cleanup(),this.client.logger.error(`sendRequest() -> core.crypto.encode() for topic ${e} failed`),h}const g=q[s].req;return r&&(g.ttl=r),o&&(g.id=o),this.client.core.history.set(e,d),c?(g.internal=F(m({},g.internal),{throwOnFailedPublish:!0}),await this.client.core.relayer.publish(e,p,g)):this.client.core.relayer.publish(e,p,g).catch(h=>this.client.logger.error(h)),d.id},this.sendResult=async t=>{const{id:e,topic:s,result:i,throwOnFailedPublish:r,encodeOpts:o}=t,a=$t(e,i);let c;try{c=await this.client.core.crypto.encode(s,a,o)}catch(g){throw await this.cleanup(),this.client.logger.error(`sendResult() -> core.crypto.encode() for topic ${s} failed`),g}let d;try{d=await this.client.core.history.get(s,e)}catch(g){throw this.client.logger.error(`sendResult() -> history.get(${s}, ${e}) failed`),g}const p=q[d.request.method].res;r?(p.internal=F(m({},p.internal),{throwOnFailedPublish:!0}),await this.client.core.relayer.publish(s,c,p)):this.client.core.relayer.publish(s,c,p).catch(g=>this.client.logger.error(g)),await this.client.core.history.resolve(a)},this.sendError=async t=>{const{id:e,topic:s,error:i,encodeOpts:r}=t,o=Lt(e,i);let a;try{a=await this.client.core.crypto.encode(s,o,r)}catch(p){throw await this.cleanup(),this.client.logger.error(`sendError() -> core.crypto.encode() for topic ${s} failed`),p}let c;try{c=await this.client.core.history.get(s,e)}catch(p){throw this.client.logger.error(`sendError() -> history.get(${s}, ${e}) failed`),p}const d=q[c.request.method].res;this.client.core.relayer.publish(s,a,d),await this.client.core.history.resolve(o)},this.cleanup=async()=>{const t=[],e=[];this.client.session.getAll().forEach(s=>{let i=!1;G(s.expiry)&&(i=!0),this.client.core.crypto.keychain.has(s.topic)||(i=!0),i&&t.push(s.topic)}),this.client.proposal.getAll().forEach(s=>{G(s.expiryTimestamp)&&e.push(s.id)}),await Promise.all([...t.map(s=>this.deleteSession({topic:s})),...e.map(s=>this.deleteProposal(s))])},this.onRelayEventRequest=async t=>{this.requestQueue.queue.push(t),await this.processRequestsQueue()},this.processRequestsQueue=async()=>{if(this.requestQueue.state===A.active){this.client.logger.info("Request queue already active, skipping...");return}for(this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`);this.requestQueue.queue.length>0;){this.requestQueue.state=A.active;const t=this.requestQueue.queue.shift();if(t)try{this.processRequest(t),await new Promise(e=>setTimeout(e,300))}catch(e){this.client.logger.warn(e)}}this.requestQueue.state=A.idle},this.processRequest=t=>{const{topic:e,payload:s}=t,i=s.method;if(!this.shouldIgnorePairingRequest({topic:e,requestMethod:i}))switch(i){case"wc_sessionPropose":return this.onSessionProposeRequest(e,s);case"wc_sessionSettle":return this.onSessionSettleRequest(e,s);case"wc_sessionUpdate":return this.onSessionUpdateRequest(e,s);case"wc_sessionExtend":return this.onSessionExtendRequest(e,s);case"wc_sessionPing":return this.onSessionPingRequest(e,s);case"wc_sessionDelete":return this.onSessionDeleteRequest(e,s);case"wc_sessionRequest":return this.onSessionRequest(e,s);case"wc_sessionEvent":return this.onSessionEventRequest(e,s);case"wc_sessionAuthenticate":return this.onSessionAuthenticateRequest(e,s);default:return this.client.logger.info(`Unsupported request method ${i}`)}},this.onRelayEventResponse=async t=>{const{topic:e,payload:s}=t,i=(await this.client.core.history.get(e,s.id)).request.method;switch(i){case"wc_sessionPropose":return this.onSessionProposeResponse(e,s);case"wc_sessionSettle":return this.onSessionSettleResponse(e,s);case"wc_sessionUpdate":return this.onSessionUpdateResponse(e,s);case"wc_sessionExtend":return this.onSessionExtendResponse(e,s);case"wc_sessionPing":return this.onSessionPingResponse(e,s);case"wc_sessionRequest":return this.onSessionRequestResponse(e,s);case"wc_sessionAuthenticate":return this.onSessionAuthenticateResponse(e,s);default:return this.client.logger.info(`Unsupported response method ${i}`)}},this.onRelayEventUnknownPayload=t=>{const{topic:e}=t,{message:s}=l("MISSING_OR_INVALID",`Decoded payload on topic ${e} is not identifiable as a JSON-RPC request or a response.`);throw new Error(s)},this.shouldIgnorePairingRequest=t=>{const{topic:e,requestMethod:s}=t,i=this.expectedPairingMethodMap.get(e);return!i||i.includes(s)?!1:!!(i.includes("wc_sessionAuthenticate")&&this.client.events.listenerCount("session_authenticate")>0)},this.onSessionProposeRequest=async(t,e)=>{const{params:s,id:i}=e;try{this.isValidConnect(m({},e.params));const r=s.expiryTimestamp||N(q.wc_sessionPropose.req.ttl),o=m({id:i,pairingTopic:t,expiryTimestamp:r},s);await this.setProposal(i,o);const a=ee(JSON.stringify(e)),c=await this.getVerifyContext(a,o.proposer.metadata);this.client.events.emit("session_proposal",{id:i,params:o,verifyContext:c})}catch(r){await this.sendError({id:i,topic:t,error:r}),this.client.logger.error(r)}},this.onSessionProposeResponse=async(t,e)=>{const{id:s}=e;if(b(e)){const{result:i}=e;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",result:i});const r=this.client.proposal.get(s);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",proposal:r});const o=r.proposer.publicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",selfPublicKey:o});const a=i.responderPublicKey;this.client.logger.trace({type:"method",method:"onSessionProposeResponse",peerPublicKey:a});const c=await this.client.core.crypto.generateSharedKey(o,a);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",sessionTopic:c});const d=await this.client.core.relayer.subscribe(c);this.client.logger.trace({type:"method",method:"onSessionProposeResponse",subscriptionId:d}),await this.client.core.pairing.activate({topic:t})}else if($(e)){await this.client.proposal.delete(s,R("USER_DISCONNECTED"));const i=u("session_connect");if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners, 954`);this.events.emit(u("session_connect"),{error:e.error})}},this.onSessionSettleRequest=async(t,e)=>{const{id:s,params:i}=e;try{this.isValidSessionSettleRequest(i);const{relay:r,controller:o,expiry:a,namespaces:c,sessionProperties:d,pairingTopic:p,sessionConfig:g}=e.params,h=m(m({topic:t,relay:r,expiry:a,namespaces:c,acknowledged:!0,pairingTopic:p,requiredNamespaces:{},optionalNamespaces:{},controller:o.publicKey,self:{publicKey:"",metadata:this.client.metadata},peer:{publicKey:o.publicKey,metadata:o.metadata}},d&&{sessionProperties:d}),g&&{sessionConfig:g});await this.sendResult({id:e.id,topic:t,result:!0,throwOnFailedPublish:!0});const y=u("session_connect");if(this.events.listenerCount(y)===0)throw new Error(`emitting ${y} without any listeners 997`);this.events.emit(u("session_connect"),{session:h}),this.cleanupDuplicatePairings(h)}catch(r){await this.sendError({id:s,topic:t,error:r}),this.client.logger.error(r)}},this.onSessionSettleResponse=async(t,e)=>{const{id:s}=e;b(e)?(await this.client.session.update(t,{acknowledged:!0}),this.events.emit(u("session_approve",s),{})):$(e)&&(await this.client.session.delete(t,R("USER_DISCONNECTED")),this.events.emit(u("session_approve",s),{error:e.error}))},this.onSessionUpdateRequest=async(t,e)=>{const{params:s,id:i}=e;try{const r=`${t}_session_update`,o=H.get(r);if(o&&this.isRequestOutOfSync(o,i)){this.client.logger.info(`Discarding out of sync request - ${i}`),this.sendError({id:i,topic:t,error:R("INVALID_UPDATE_REQUEST")});return}this.isValidUpdate(m({topic:t},s));try{H.set(r,i),await this.client.session.update(t,{namespaces:s.namespaces}),await this.sendResult({id:i,topic:t,result:!0,throwOnFailedPublish:!0})}catch(a){throw H.delete(r),a}this.client.events.emit("session_update",{id:i,topic:t,params:s})}catch(r){await this.sendError({id:i,topic:t,error:r}),this.client.logger.error(r)}},this.isRequestOutOfSync=(t,e)=>parseInt(e.toString().slice(0,-3))<=parseInt(t.toString().slice(0,-3)),this.onSessionUpdateResponse=(t,e)=>{const{id:s}=e,i=u("session_update",s);if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners`);b(e)?this.events.emit(u("session_update",s),{}):$(e)&&this.events.emit(u("session_update",s),{error:e.error})},this.onSessionExtendRequest=async(t,e)=>{const{id:s}=e;try{this.isValidExtend({topic:t}),await this.setExpiry(t,N(L)),await this.sendResult({id:s,topic:t,result:!0,throwOnFailedPublish:!0}),this.client.events.emit("session_extend",{id:s,topic:t})}catch(i){await this.sendError({id:s,topic:t,error:i}),this.client.logger.error(i)}},this.onSessionExtendResponse=(t,e)=>{const{id:s}=e,i=u("session_extend",s);if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners`);b(e)?this.events.emit(u("session_extend",s),{}):$(e)&&this.events.emit(u("session_extend",s),{error:e.error})},this.onSessionPingRequest=async(t,e)=>{const{id:s}=e;try{this.isValidPing({topic:t}),await this.sendResult({id:s,topic:t,result:!0,throwOnFailedPublish:!0}),this.client.events.emit("session_ping",{id:s,topic:t})}catch(i){await this.sendError({id:s,topic:t,error:i}),this.client.logger.error(i)}},this.onSessionPingResponse=(t,e)=>{const{id:s}=e,i=u("session_ping",s);if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners`);setTimeout(()=>{b(e)?this.events.emit(u("session_ping",s),{}):$(e)&&this.events.emit(u("session_ping",s),{error:e.error})},500)},this.onSessionDeleteRequest=async(t,e)=>{const{id:s}=e;try{this.isValidDisconnect({topic:t,reason:e.params}),await Promise.all([new Promise(i=>{this.client.core.relayer.once(qe.publish,async()=>{i(await this.deleteSession({topic:t,id:s}))})}),this.sendResult({id:s,topic:t,result:!0,throwOnFailedPublish:!0}),this.cleanupPendingSentRequestsForTopic({topic:t,error:R("USER_DISCONNECTED")})])}catch(i){this.client.logger.error(i)}},this.onSessionRequest=async(t,e)=>{const{id:s,params:i}=e;try{await this.isValidRequest(m({topic:t},i));const r=ee(JSON.stringify(me("wc_sessionRequest",i,s))),o=this.client.session.get(t),a=await this.getVerifyContext(r,o.peer.metadata),c={id:s,topic:t,params:i,verifyContext:a};await this.setPendingSessionRequest(c),this.addSessionRequestToSessionRequestQueue(c),this.processSessionRequestQueue()}catch(r){await this.sendError({id:s,topic:t,error:r}),this.client.logger.error(r)}},this.onSessionRequestResponse=(t,e)=>{const{id:s}=e,i=u("session_request",s);if(this.events.listenerCount(i)===0)throw new Error(`emitting ${i} without any listeners`);b(e)?this.events.emit(u("session_request",s),{result:e.result}):$(e)&&this.events.emit(u("session_request",s),{error:e.error})},this.onSessionEventRequest=async(t,e)=>{const{id:s,params:i}=e;try{const r=`${t}_session_event_${i.event.name}`,o=H.get(r);if(o&&this.isRequestOutOfSync(o,s)){this.client.logger.info(`Discarding out of sync request - ${s}`);return}this.isValidEmit(m({topic:t},i)),this.client.events.emit("session_event",{id:s,topic:t,params:i}),H.set(r,s)}catch(r){await this.sendError({id:s,topic:t,error:r}),this.client.logger.error(r)}},this.onSessionAuthenticateResponse=(t,e)=>{const{id:s}=e;this.client.logger.trace({type:"method",method:"onSessionAuthenticateResponse",topic:t,payload:e}),b(e)?this.events.emit(u("session_request",s),{result:e.result}):$(e)&&this.events.emit(u("session_request",s),{error:e.error})},this.onSessionAuthenticateRequest=async(t,e)=>{const{requester:s,authPayload:i,expiryTimestamp:r}=e.params,o=ee(JSON.stringify(e)),a=await this.getVerifyContext(o,this.client.metadata),c={requester:s,pairingTopic:t,id:e.id,authPayload:i,verifyContext:a,expiryTimestamp:r};await this.client.auth.requests.set(e.id,c),this.client.events.emit("session_authenticate",{topic:t,params:e.params,id:e.id})},this.addSessionRequestToSessionRequestQueue=t=>{this.sessionRequestQueue.queue.push(t)},this.cleanupAfterResponse=t=>{this.deletePendingSessionRequest(t.response.id,{message:"fulfilled",code:0}),setTimeout(()=>{this.sessionRequestQueue.state=A.idle,this.processSessionRequestQueue()},Me(this.requestQueueDelay))},this.cleanupPendingSentRequestsForTopic=({topic:t,error:e})=>{const s=this.client.core.history.pending;s.length>0&&s.filter(i=>i.topic===t&&i.request.method==="wc_sessionRequest").forEach(i=>{const r=i.request.id,o=u("session_request",r);if(this.events.listenerCount(o)===0)throw new Error(`emitting ${o} without any listeners`);this.events.emit(u("session_request",i.request.id),{error:e})})},this.processSessionRequestQueue=()=>{if(this.sessionRequestQueue.state===A.active){this.client.logger.info("session request queue is already active.");return}const t=this.sessionRequestQueue.queue[0];if(!t){this.client.logger.info("session request queue is empty.");return}try{this.sessionRequestQueue.state=A.active,this.client.events.emit("session_request",t)}catch(e){this.client.logger.error(e)}},this.onPairingCreated=t=>{if(t.methods&&this.expectedPairingMethodMap.set(t.topic,t.methods),t.active)return;const e=this.client.proposal.getAll().find(s=>s.pairingTopic===t.topic);e&&this.onSessionProposeRequest(t.topic,me("wc_sessionPropose",{requiredNamespaces:e.requiredNamespaces,optionalNamespaces:e.optionalNamespaces,relays:e.relays,proposer:e.proposer,sessionProperties:e.sessionProperties},e.id))},this.isValidConnect=async t=>{if(!T(t)){const{message:a}=l("MISSING_OR_INVALID",`connect() params: ${JSON.stringify(t)}`);throw new Error(a)}const{pairingTopic:e,requiredNamespaces:s,optionalNamespaces:i,sessionProperties:r,relays:o}=t;if(Y(e)||await this.isValidPairingTopic(e),!St(o,!0)){const{message:a}=l("MISSING_OR_INVALID",`connect() relays: ${o}`);throw new Error(a)}!Y(s)&&Ae(s)!==0&&this.validateNamespaces(s,"requiredNamespaces"),!Y(i)&&Ae(i)!==0&&this.validateNamespaces(i,"optionalNamespaces"),Y(r)||this.validateSessionProps(r,"sessionProperties")},this.validateNamespaces=(t,e)=>{const s=Et(t,"connect()",e);if(s)throw new Error(s.message)},this.isValidApprove=async t=>{if(!T(t))throw new Error(l("MISSING_OR_INVALID",`approve() params: ${t}`).message);const{id:e,namespaces:s,relayProtocol:i,sessionProperties:r}=t;this.checkRecentlyDeleted(e),await this.isValidProposalId(e);const o=this.client.proposal.get(e),a=ye(s,"approve()");if(a)throw new Error(a.message);const c=Ve(o.requiredNamespaces,s,"approve()");if(c)throw new Error(c.message);if(!V(i,!0)){const{message:d}=l("MISSING_OR_INVALID",`approve() relayProtocol: ${i}`);throw new Error(d)}Y(r)||this.validateSessionProps(r,"sessionProperties")},this.isValidReject=async t=>{if(!T(t)){const{message:i}=l("MISSING_OR_INVALID",`reject() params: ${t}`);throw new Error(i)}const{id:e,reason:s}=t;if(this.checkRecentlyDeleted(e),await this.isValidProposalId(e),!_t(s)){const{message:i}=l("MISSING_OR_INVALID",`reject() reason: ${JSON.stringify(s)}`);throw new Error(i)}},this.isValidSessionSettleRequest=t=>{if(!T(t)){const{message:c}=l("MISSING_OR_INVALID",`onSessionSettleRequest() params: ${t}`);throw new Error(c)}const{relay:e,controller:s,namespaces:i,expiry:r}=t;if(!Rt(e)){const{message:c}=l("MISSING_OR_INVALID","onSessionSettleRequest() relay protocol should be a string");throw new Error(c)}const o=It(s,"onSessionSettleRequest()");if(o)throw new Error(o.message);const a=ye(i,"onSessionSettleRequest()");if(a)throw new Error(a.message);if(G(r)){const{message:c}=l("EXPIRED","onSessionSettleRequest()");throw new Error(c)}},this.isValidUpdate=async t=>{if(!T(t)){const{message:a}=l("MISSING_OR_INVALID",`update() params: ${t}`);throw new Error(a)}const{topic:e,namespaces:s}=t;this.checkRecentlyDeleted(e),await this.isValidSessionTopic(e);const i=this.client.session.get(e),r=ye(s,"update()");if(r)throw new Error(r.message);const o=Ve(i.requiredNamespaces,s,"update()");if(o)throw new Error(o.message)},this.isValidExtend=async t=>{if(!T(t)){const{message:s}=l("MISSING_OR_INVALID",`extend() params: ${t}`);throw new Error(s)}const{topic:e}=t;this.checkRecentlyDeleted(e),await this.isValidSessionTopic(e)},this.isValidRequest=async t=>{if(!T(t)){const{message:a}=l("MISSING_OR_INVALID",`request() params: ${t}`);throw new Error(a)}const{topic:e,request:s,chainId:i,expiry:r}=t;this.checkRecentlyDeleted(e),await this.isValidSessionTopic(e);const{namespaces:o}=this.client.session.get(e);if(!Ce(o,i)){const{message:a}=l("MISSING_OR_INVALID",`request() chainId: ${i}`);throw new Error(a)}if(!ft(s)){const{message:a}=l("MISSING_OR_INVALID",`request() ${JSON.stringify(s)}`);throw new Error(a)}if(!qt(o,i,s.method)){const{message:a}=l("MISSING_OR_INVALID",`request() method: ${s.method}`);throw new Error(a)}if(r&&!Nt(r,re)){const{message:a}=l("MISSING_OR_INVALID",`request() expiry: ${r}. Expiry must be a number (in seconds) between ${re.min} and ${re.max}`);throw new Error(a)}},this.isValidRespond=async t=>{var e;if(!T(t)){const{message:r}=l("MISSING_OR_INVALID",`respond() params: ${t}`);throw new Error(r)}const{topic:s,response:i}=t;try{await this.isValidSessionTopic(s)}catch(r){throw(e=t?.response)!=null&&e.id&&this.cleanupAfterResponse(t),r}if(!Pt(i)){const{message:r}=l("MISSING_OR_INVALID",`respond() response: ${JSON.stringify(i)}`);throw new Error(r)}},this.isValidPing=async t=>{if(!T(t)){const{message:s}=l("MISSING_OR_INVALID",`ping() params: ${t}`);throw new Error(s)}const{topic:e}=t;await this.isValidSessionOrPairingTopic(e)},this.isValidEmit=async t=>{if(!T(t)){const{message:o}=l("MISSING_OR_INVALID",`emit() params: ${t}`);throw new Error(o)}const{topic:e,event:s,chainId:i}=t;await this.isValidSessionTopic(e);const{namespaces:r}=this.client.session.get(e);if(!Ce(r,i)){const{message:o}=l("MISSING_OR_INVALID",`emit() chainId: ${i}`);throw new Error(o)}if(!vt(s)){const{message:o}=l("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(s)}`);throw new Error(o)}if(!Ot(r,i,s.name)){const{message:o}=l("MISSING_OR_INVALID",`emit() event: ${JSON.stringify(s)}`);throw new Error(o)}},this.isValidDisconnect=async t=>{if(!T(t)){const{message:s}=l("MISSING_OR_INVALID",`disconnect() params: ${t}`);throw new Error(s)}const{topic:e}=t;await this.isValidSessionOrPairingTopic(e)},this.isValidAuthenticate=t=>{const{chains:e,uri:s,domain:i,nonce:r}=t;if(!Array.isArray(e)||e.length===0)throw new Error("chains is required and must be a non-empty array");if(!V(s,!1))throw new Error("uri is required parameter");if(!V(i,!1))throw new Error("domain is required parameter");if(!V(r,!1))throw new Error("nonce is required parameter");if([...new Set(e.map(a=>ge(a).namespace))].length>1)throw new Error("Multi-namespace requests are not supported. Please request single namespace only.");const{namespace:o}=ge(e[0]);if(o!=="eip155")throw new Error("Only eip155 namespace is supported for authenticated sessions. Please use .connect() for non-eip155 chains.")},this.getVerifyContext=async(t,e)=>{const s={verified:{verifyUrl:e.verifyUrl||st,validation:"UNKNOWN",origin:e.url||""}};try{const i=await this.client.core.verify.resolve({attestationId:t,verifyUrl:e.verifyUrl});i&&(s.verified.origin=i.origin,s.verified.isScam=i.isScam,s.verified.validation=i.origin===new URL(e.url).origin?"VALID":"INVALID")}catch(i){this.client.logger.info(i)}return this.client.logger.info(`Verify context: ${JSON.stringify(s)}`),s},this.validateSessionProps=(t,e)=>{Object.values(t).forEach(s=>{if(!V(s,!1)){const{message:i}=l("MISSING_OR_INVALID",`${e} must be in Record<string, string> format. Received: ${JSON.stringify(s)}`);throw new Error(i)}})},this.getPendingAuthRequest=t=>{const e=this.client.auth.requests.get(t);return typeof e=="object"?e:void 0},this.addToRecentlyDeleted=(t,e)=>{if(this.recentlyDeletedMap.set(t,e),this.recentlyDeletedMap.size>=this.recentlyDeletedLimit){let s=0;const i=this.recentlyDeletedLimit/2;for(const r of this.recentlyDeletedMap.keys()){if(s++>=i)break;this.recentlyDeletedMap.delete(r)}}},this.checkRecentlyDeleted=t=>{const e=this.recentlyDeletedMap.get(t);if(e){const{message:s}=l("MISSING_OR_INVALID",`Record was recently deleted - ${e}: ${t}`);throw new Error(s)}}}async isInitialized(){if(!this.initialized){const{message:n}=l("NOT_INITIALIZED",this.name);throw new Error(n)}await this.client.core.relayer.confirmOnlineStateOrThrow()}registerRelayerEvents(){this.client.core.relayer.on(qe.message,async n=>{const{topic:t,message:e}=n,{publicKey:s}=this.client.auth.authKeys.keys.includes(J)?this.client.auth.authKeys.get(J):{responseTopic:void 0,publicKey:void 0},i=await this.client.core.crypto.decode(t,e,{receiverPublicKey:s});try{Mt(i)?(this.client.core.history.set(t,i),this.onRelayEventRequest({topic:t,payload:i})):Kt(i)?(await this.client.core.history.resolve(i),await this.onRelayEventResponse({topic:t,payload:i}),this.client.core.history.delete(t,i.id)):this.onRelayEventUnknownPayload({topic:t,payload:i})}catch(r){this.client.logger.error(r)}})}registerExpirerEvents(){this.client.core.expirer.on(it.expired,async n=>{const{topic:t,id:e}=Tt(n.target);if(e&&this.client.pendingRequest.keys.includes(e))return await this.deletePendingSessionRequest(e,l("EXPIRED"),!0);t?this.client.session.keys.includes(t)&&(await this.deleteSession({topic:t,expirerHasDeleted:!0}),this.client.events.emit("session_expire",{topic:t})):e&&(await this.deleteProposal(e,!0),this.client.events.emit("proposal_expire",{id:e}))})}registerPairingEvents(){this.client.core.pairing.events.on(Ne.create,n=>this.onPairingCreated(n)),this.client.core.pairing.events.on(Ne.delete,n=>{this.addToRecentlyDeleted(n.topic,"pairing")})}isValidPairingTopic(n){if(!V(n,!1)){const{message:t}=l("MISSING_OR_INVALID",`pairing topic should be a string: ${n}`);throw new Error(t)}if(!this.client.core.pairing.pairings.keys.includes(n)){const{message:t}=l("NO_MATCHING_KEY",`pairing topic doesn't exist: ${n}`);throw new Error(t)}if(G(this.client.core.pairing.pairings.get(n).expiry)){const{message:t}=l("EXPIRED",`pairing topic: ${n}`);throw new Error(t)}}async isValidSessionTopic(n){if(!V(n,!1)){const{message:t}=l("MISSING_OR_INVALID",`session topic should be a string: ${n}`);throw new Error(t)}if(this.checkRecentlyDeleted(n),!this.client.session.keys.includes(n)){const{message:t}=l("NO_MATCHING_KEY",`session topic doesn't exist: ${n}`);throw new Error(t)}if(G(this.client.session.get(n).expiry)){await this.deleteSession({topic:n});const{message:t}=l("EXPIRED",`session topic: ${n}`);throw new Error(t)}if(!this.client.core.crypto.keychain.has(n)){const{message:t}=l("MISSING_OR_INVALID",`session topic does not exist in keychain: ${n}`);throw await this.deleteSession({topic:n}),new Error(t)}}async isValidSessionOrPairingTopic(n){if(this.checkRecentlyDeleted(n),this.client.session.keys.includes(n))await this.isValidSessionTopic(n);else if(this.client.core.pairing.pairings.keys.includes(n))this.isValidPairingTopic(n);else if(V(n,!1)){const{message:t}=l("NO_MATCHING_KEY",`session or pairing topic doesn't exist: ${n}`);throw new Error(t)}else{const{message:t}=l("MISSING_OR_INVALID",`session or pairing topic should be a string: ${n}`);throw new Error(t)}}async isValidProposalId(n){if(!Dt(n)){const{message:t}=l("MISSING_OR_INVALID",`proposal id should be a number: ${n}`);throw new Error(t)}if(!this.client.proposal.keys.includes(n)){const{message:t}=l("NO_MATCHING_KEY",`proposal id doesn't exist: ${n}`);throw new Error(t)}if(G(this.client.proposal.get(n).expiryTimestamp)){await this.deleteProposal(n);const{message:t}=l("EXPIRED",`proposal id: ${n}`);throw new Error(t)}}}class Zt extends K{constructor(n,t){super(n,t,Ke,se),this.core=n,this.logger=t}}class We extends K{constructor(n,t){super(n,t,Ge,se),this.core=n,this.logger=t}}class es extends K{constructor(n,t){super(n,t,Fe,se,e=>e.id),this.core=n,this.logger=t}}class ts extends K{constructor(n,t){super(n,t,He,X,()=>J),this.core=n,this.logger=t}}class ss extends K{constructor(n,t){super(n,t,Ye,X),this.core=n,this.logger=t}}class is extends K{constructor(n,t){super(n,t,Xe,X,e=>e.id),this.core=n,this.logger=t}}class rs{constructor(n,t){this.core=n,this.logger=t,this.authKeys=new ts(this.core,this.logger),this.pairingTopics=new ss(this.core,this.logger),this.requests=new is(this.core,this.logger)}async init(){await this.authKeys.init(),await this.pairingTopics.init(),await this.requests.init()}}class ne extends ht{constructor(n){super(n),this.protocol=Se,this.version=Ee,this.name=ie.name,this.events=new Vt,this.on=(e,s)=>this.events.on(e,s),this.once=(e,s)=>this.events.once(e,s),this.off=(e,s)=>this.events.off(e,s),this.removeListener=(e,s)=>this.events.removeListener(e,s),this.removeAllListeners=e=>this.events.removeAllListeners(e),this.connect=async e=>{try{return await this.engine.connect(e)}catch(s){throw this.logger.error(s.message),s}},this.pair=async e=>{try{return await this.engine.pair(e)}catch(s){throw this.logger.error(s.message),s}},this.approve=async e=>{try{return await this.engine.approve(e)}catch(s){throw this.logger.error(s.message),s}},this.reject=async e=>{try{return await this.engine.reject(e)}catch(s){throw this.logger.error(s.message),s}},this.update=async e=>{try{return await this.engine.update(e)}catch(s){throw this.logger.error(s.message),s}},this.extend=async e=>{try{return await this.engine.extend(e)}catch(s){throw this.logger.error(s.message),s}},this.request=async e=>{try{return await this.engine.request(e)}catch(s){throw this.logger.error(s.message),s}},this.respond=async e=>{try{return await this.engine.respond(e)}catch(s){throw this.logger.error(s.message),s}},this.ping=async e=>{try{return await this.engine.ping(e)}catch(s){throw this.logger.error(s.message),s}},this.emit=async e=>{try{return await this.engine.emit(e)}catch(s){throw this.logger.error(s.message),s}},this.disconnect=async e=>{try{return await this.engine.disconnect(e)}catch(s){throw this.logger.error(s.message),s}},this.find=e=>{try{return this.engine.find(e)}catch(s){throw this.logger.error(s.message),s}},this.getPendingSessionRequests=()=>{try{return this.engine.getPendingSessionRequests()}catch(e){throw this.logger.error(e.message),e}},this.authenticate=async e=>{try{return await this.engine.authenticate(e)}catch(s){throw this.logger.error(s.message),s}},this.formatAuthMessage=e=>{try{return this.engine.formatAuthMessage(e)}catch(s){throw this.logger.error(s.message),s}},this.approveSessionAuthenticate=async e=>{try{return await this.engine.approveSessionAuthenticate(e)}catch(s){throw this.logger.error(s.message),s}},this.rejectSessionAuthenticate=async e=>{try{return await this.engine.rejectSessionAuthenticate(e)}catch(s){throw this.logger.error(s.message),s}},this.name=n?.name||ie.name,this.metadata=n?.metadata||xt();const t=typeof n?.logger<"u"&&typeof n?.logger!="string"?n.logger:nt(ot({level:n?.logger||ie.logger}));this.core=n?.core||new rt(n),this.logger=at(t,this.name),this.session=new We(this.core,this.logger),this.proposal=new Zt(this.core,this.logger),this.pendingRequest=new es(this.core,this.logger),this.engine=new Wt(this),this.auth=new rs(this.core,this.logger)}static async init(n){const t=new ne(n);return await t.initialize(),t}get context(){return ct(this.logger)}get pairing(){return this.core.pairing.pairings}async initialize(){this.logger.trace("Initialized");try{await this.core.start(),await this.session.init(),await this.proposal.init(),await this.pendingRequest.init(),await this.engine.init(),await this.auth.init(),this.core.verify.init({verifyUrl:this.metadata.verifyUrl}),this.logger.info("SignClient Initialization Success")}catch(n){throw this.logger.info("SignClient Initialization Failure"),this.logger.error(n.message),n}}}const ns=We,os=ne;export{ze as AUTH_CONTEXT,He as AUTH_KEYS_CONTEXT,Ye as AUTH_PAIRING_TOPIC_CONTEXT,Qe as AUTH_PROTOCOL,J as AUTH_PUBLIC_KEY_NAME,Xe as AUTH_REQUEST_CONTEXT,X as AUTH_STORAGE_PREFIX,zt as AUTH_VERSION,ke as ENGINE_CONTEXT,A as ENGINE_QUEUE_STATES,q as ENGINE_RPC_OPTS,Ft as HISTORY_CONTEXT,kt as HISTORY_EVENTS,jt as HISTORY_STORAGE_VERSION,je as METHODS_TO_VERIFY,Ke as PROPOSAL_CONTEXT,Qt as PROPOSAL_EXPIRY,Ue as PROPOSAL_EXPIRY_MESSAGE,Fe as REQUEST_CONTEXT,Ge as SESSION_CONTEXT,L as SESSION_EXPIRY,re as SESSION_REQUEST_EXPIRY_BOUNDARIES,_e as SIGN_CLIENT_CONTEXT,ie as SIGN_CLIENT_DEFAULT,Ut as SIGN_CLIENT_EVENTS,Se as SIGN_CLIENT_PROTOCOL,Gt as SIGN_CLIENT_STORAGE_OPTIONS,se as SIGN_CLIENT_STORAGE_PREFIX,Ee as SIGN_CLIENT_VERSION,ns as SessionStore,os as SignClient,Re as WALLETCONNECT_DEEPLINK_CHOICE,ne as default};
//# sourceMappingURL=index.es.js.map
