import type { Chain } from "../../chains/types.js";
import type { ThirdwebClient } from "../../client/client.js";
import type { Account, Wallet } from "../interfaces/wallet.js";
import type { SmartWalletOptions } from "../smart/types.js";
import type { AsyncStorage } from "../storage/AsyncStorage.js";
import type { WalletId } from "../wallet-types.js";
export type ConnectionStatus = "connected" | "disconnected" | "connecting";
export type ConnectionManager = ReturnType<typeof createConnectionManager>;
export type ConnectManagerOptions = {
    client: ThirdwebClient;
    accountAbstraction?: SmartWalletOptions;
};
/**
 * Create a connection manager for Wallet connections
 * @param storage - An instance of type [`AsyncStorage`](https://portal.thirdweb.com/references/typescript/v5/AsyncStorage)
 * @example
 * ```ts
 * const manager = createConnectionManager();
 * ```
 * @returns A connection manager object
 * @walletUtils
 */
export declare function createConnectionManager(storage: AsyncStorage): {
    activeWalletStore: import("../../reactive/store.js").Store<Wallet | undefined>;
    activeAccountStore: import("../../reactive/store.js").Store<Account | undefined>;
    connectedWallets: import("../../reactive/computedStore.js").ReadonlyStore<Wallet[]>;
    addConnectedWallet: (wallet: Wallet) => void;
    disconnectWallet: (wallet: Wallet) => void;
    setActiveWallet: (activeWallet: Wallet) => Promise<void>;
    connect: (wallet: Wallet, options?: ConnectManagerOptions) => Promise<Wallet>;
    handleConnection: (wallet: Wallet, options?: ConnectManagerOptions) => Promise<Wallet>;
    activeWalletChainStore: import("../../reactive/store.js").Store<{
        readonly id: number;
        readonly name?: string | undefined;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        } | undefined;
        readonly nativeCurrency?: {
            name?: string | undefined;
            symbol?: string | undefined;
            decimals?: number | undefined;
        } | undefined;
        readonly blockExplorers?: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        }[] | undefined;
        readonly testnet?: true | undefined;
        readonly experimental?: {
            increaseZeroByteCount?: boolean | undefined;
        } | undefined;
    } | undefined>;
    switchActiveWalletChain: (chain: Chain) => Promise<void>;
    activeWalletConnectionStatusStore: import("../../reactive/store.js").Store<ConnectionStatus>;
    isAutoConnecting: import("../../reactive/store.js").Store<boolean>;
    removeConnectedWallet: (wallet: Wallet) => void;
};
/**
 *
 * @internal
 */
export declare function getStoredConnectedWalletIds(storage: AsyncStorage): Promise<string[] | null>;
/**
 * @internal
 */
export declare function getStoredActiveWalletId(storage: AsyncStorage): Promise<WalletId | null>;
/**
 * @internal
 */
export declare function getLastConnectedChain(storage: AsyncStorage): Promise<Chain | null>;
//# sourceMappingURL=index.d.ts.map