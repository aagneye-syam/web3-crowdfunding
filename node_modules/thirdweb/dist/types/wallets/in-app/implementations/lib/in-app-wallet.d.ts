import type { ThirdwebClient } from "../../../../client/client.js";
import { type GetUser, type InAppWalletConstructorType } from "../interfaces/in-app-wallets/in-app-wallets.js";
import { InAppWalletIframeCommunicator } from "../utils/iFrameCommunication/InAppWalletIframeCommunicator.js";
import { Auth, type AuthQuerierTypes } from "./auth/index.js";
/**
 * @internal
 */
export declare class InAppWalletSdk {
    protected client: ThirdwebClient;
    protected querier: InAppWalletIframeCommunicator<AuthQuerierTypes>;
    private wallet;
    /**
     * Used to manage the Auth state of the user.
     */
    auth: Auth;
    private isClientIdLegacyPaper;
    /**
     * @example
     * `const thirdwebInAppWallet = new InAppWalletSdk({ clientId: "", chain: "Goerli" });`
     * @internal
     */
    constructor({ client, onAuthSuccess }: InAppWalletConstructorType);
    /**
     * Gets the usr if they are logged in
     * @example
     * ```js
     *  const user = await thirdwebInAppWallet.getUser();
     *  switch (user.status) {
     *     case UserWalletStatus.LOGGED_OUT: {
     *       // User is logged out, call one of the auth methods on thirdwebInAppWallet.auth to authenticate the user
     *       break;
     *     }
     *     case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {
     *       // user is logged in and wallet is all set up.
     *       // You have access to:
     *       user.status;
     *       user.authDetails;
     *       user.walletAddress;
     *       user.wallet;
     *       break;
     *     }
     * }
     * ```
     * @returns GetUser - an object to containing various information on the user statuses
     */
    getUser(): Promise<GetUser>;
}
//# sourceMappingURL=in-app-wallet.d.ts.map