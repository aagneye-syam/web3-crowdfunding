import { type AuthLoginReturnType, AuthProvider } from "../../interfaces/auth.js";
import { AbstractLogin, type LoginQuerierTypes } from "./abstract-login.js";
/**
 *
 */
export declare class BaseLogin extends AbstractLogin<void, {
    email: string;
}, {
    email: string;
    otp: string;
    recoveryCode?: string;
}> {
    private getOauthLoginUrl;
    /**
     * @internal
     */
    loginWithModal(): Promise<AuthLoginReturnType>;
    /**
     * @internal
     */
    loginWithEmailOtp({ email, }: {
        email: string;
    }): Promise<AuthLoginReturnType>;
    private closeWindow;
    private getOauthPopUpSizing;
    /**
     * @internal
     */
    loginWithOauth(args: {
        oauthProvider: AuthProvider;
        openedWindow?: Window | null | undefined;
        closeOpenedWindow?: ((openedWindow: Window) => void) | undefined;
    }): Promise<AuthLoginReturnType>;
    /**
     * @internal
     */
    loginWithCustomJwt({ encryptionKey, jwt, }: LoginQuerierTypes["loginWithCustomJwt"]): Promise<AuthLoginReturnType>;
    /**
     * @internal
     */
    loginWithCustomAuthEndpoint({ encryptionKey, payload, }: LoginQuerierTypes["loginWithCustomAuthEndpoint"]): Promise<AuthLoginReturnType>;
    /**
     * @internal
     */
    verifyEmailLoginOtp({ email, otp, recoveryCode, }: LoginQuerierTypes["verifyThirdwebEmailLoginOtp"]): Promise<AuthLoginReturnType>;
    /**
     * @internal
     */
    verifySmsLoginOtp({ phoneNumber, otp, recoveryCode, }: LoginQuerierTypes["verifyThirdwebSmsLoginOtp"]): Promise<AuthLoginReturnType>;
}
//# sourceMappingURL=base-login.d.ts.map