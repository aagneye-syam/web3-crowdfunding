import type { ThirdwebClient } from "../../../../client/client.js";
import { type AuthLoginReturnType } from "../../implementations/interfaces/auth.js";
import type { AuthArgsType, PreAuthArgsType } from "./type.js";
export type GetAuthenticatedUserParams = {
    client: ThirdwebClient;
};
/**
 * Retrieves the authenticated user for the active in-app wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user if logged in and wallet initialized, otherwise undefined.
 * @example
 * ```ts
 * import { getAuthenticatedUser } from "thirdweb/wallets/in-app";
 *
 * const user = await getAuthenticatedUser({ client });
 * if (user) {
 *  console.log(user.walletAddress);
 * }
 * ```
 */
export declare function getAuthenticatedUser(options: GetAuthenticatedUserParams): Promise<import("../../implementations/interfaces/in-app-wallets/in-app-wallets.js").InitializedUser | undefined>;
/**
 * Retrieves the authenticated user email for the active in-app wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user email if logged in and wallet initialized, otherwise undefined.
 * @example
 * ```ts
 * import { getUserEmail } from "thirdweb/wallets/in-app";
 *
 * const email = await getUserEmail({ client });
 * console.log(email);
 * ```
 */
export declare function getUserEmail(options: GetAuthenticatedUserParams): Promise<string | undefined>;
/**
 * Retrieves the authenticated user phone number for the active embedded wallet.
 * @param options - The arguments for retrieving the authenticated user.
 * @returns The authenticated user phone number if authenticated with phone number, otherwise undefined.
 * @example
 * ```ts
 * import { getUserPhoneNumber } from "thirdweb/wallets/embedded";
 *
 * const phoneNumber = await getUserPhoneNumber({ client });
 * console.log(phoneNumber);
 * ```
 */
export declare function getUserPhoneNumber(options: GetAuthenticatedUserParams): Promise<string | undefined>;
/**
 * Pre-authenticates the user based on the provided authentication strategy.
 * @param args - The arguments required for pre-authentication.
 * @returns A promise that resolves to the pre-authentication result.
 * @throws An error if the provided authentication strategy doesn't require pre-authentication.
 * @example
 * ```ts
 * import { preAuthenticate } from "thirdweb/wallets/in-app";
 *
 * const result = await preAuthenticate({
 *  client,
 *  strategy: "email",
 *  email: "example@example.org",
 * });
 * ```
 */
export declare function preAuthenticate(args: PreAuthArgsType): Promise<import("../../implementations/interfaces/in-app-wallets/in-app-wallets.js").SendEmailOtpReturnType>;
/**
 * Authenticates the user based on the provided authentication arguments.
 * @param args - The authentication arguments.
 * @returns A promise that resolves to the authentication result.
 * @example
 * ```ts
 * import { authenticate } from "thirdweb/wallets/in-app";
 *
 * const result = await authenticate({
 *  client,
 *  strategy: "email",
 *  email: "example@example.org",
 *  verificationCode: "123456",
 * });
 * ```
 */
export declare function authenticate(args: AuthArgsType): Promise<AuthLoginReturnType>;
//# sourceMappingURL=index.d.ts.map