import type { AbiFunction } from "abitype";
import { type Hex } from "viem";
/**
 * Decodes the result of a function call based on the provided ABI function definition.
 * @param abiFn - The ABI function definition.
 * @param data - The encoded data to be decoded.
 * @returns The decoded result.
 * @internal
 */
export declare function decodeFunctionResult<const abiFn extends AbiFunction>(abiFn: abiFn, data: Hex): ((abiFn["outputs"] extends infer T_6 ? T_6 extends abiFn["outputs"] ? T_6 extends readonly import("abitype").AbiParameter[] ? T_6 : import("abitype").AbiParameter[] : never : never) extends infer T_4 extends readonly import("abitype").AbiParameter[] ? { [K_1 in keyof T_4]: import("abitype").AbiParameterToPrimitiveType<(abiFn["outputs"] extends infer T_5 ? T_5 extends abiFn["outputs"] ? T_5 extends readonly import("abitype").AbiParameter[] ? T_5 : import("abitype").AbiParameter[] : never : never)[K_1], import("abitype").AbiParameterKind>; } : never) extends infer T ? { [K in keyof T]: ((abiFn["outputs"] extends infer T_3 ? T_3 extends abiFn["outputs"] ? T_3 extends readonly import("abitype").AbiParameter[] ? T_3 : import("abitype").AbiParameter[] : never : never) extends infer T_1 extends readonly import("abitype").AbiParameter[] ? { [K_1 in keyof T_1]: import("abitype").AbiParameterToPrimitiveType<(abiFn["outputs"] extends infer T_2 ? T_2 extends abiFn["outputs"] ? T_2 extends readonly import("abitype").AbiParameter[] ? T_2 : import("abitype").AbiParameter[] : never : never)[K_1], import("abitype").AbiParameterKind>; } : never)[K]; } : never;
//# sourceMappingURL=decode.d.ts.map