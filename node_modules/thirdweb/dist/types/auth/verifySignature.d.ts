import type { Chain } from "../chains/types.js";
import type { ThirdwebClient } from "../client/client.js";
import type { Prettify } from "../utils/type-utils.js";
export type VerifyEOASignatureParams = {
    message: string;
    signature: string;
    address: string;
};
/**
 * Verifies the signature of a message using an Ethereum account's EOA (Externally Owned Account).
 * @param options - The options for verifying the signature.
 * @returns A boolean indicating whether the signature is valid.
 * @throws An error if the signature is invalid.
 * @example
 * ```ts
 * import { verifyEOASignature } from 'thirdweb/auth';
 *
 * const isValid = await verifyEOASignature({
 *  message: '0x1234567890123456789012345678901234567890',
 *  signature: '0x1234567890123456789012345678901234567890',
 *  address: '0x1234567890123456789012345678901234567890',
 * });
 * ```
 * @auth
 */
export declare function verifyEOASignature(options: VerifyEOASignatureParams): Promise<boolean>;
export type VerifyContractWalletSignatureParams = Prettify<VerifyEOASignatureParams & {
    chain: Chain;
    client: ThirdwebClient;
}>;
/**
 * Verifies the signature of a contract wallet.
 * @param options - The parameters for verifying the signature.
 * @returns A boolean indicating whether the signature is valid.
 * @throws An error if the signature is invalid.
 * @example
 * ```ts
 * import { verifyContractWalletSignature } from 'thirdweb/auth';
 *
 * const isValid = await verifyContractWalletSignature({
 *  message: '0x1234567890123456789012345678901234567890',
 *  signature: '0x1234567890123456789012345678901234567890',
 *  address: '0x1234567890123456789012345678901234567890',
 *  chain: ...,
 *  client: ...,
 * });
 * ```
 * @auth
 */
export declare function verifyContractWalletSignature(options: VerifyContractWalletSignatureParams): Promise<boolean>;
export type VerifySignatureParams = Prettify<VerifyEOASignatureParams & Partial<VerifyContractWalletSignatureParams>>;
/**
 * Verifies the signature based on the provided options.
 * Handles smart contract wallet signatures and EOA signatures.
 * **IMPORTANT: in order to check smart contract signatures, a chain and client must be provided.**
 * @param options - The options for signature verification.
 * @returns A boolean indicating whether the signature is valid or not.
 * @example
 * ```ts
 * import { verifySignature } from 'thirdweb/auth';
 *
 * const isValid = await verifySignature({
 *  message: 'Your message to sign',
 *  signature: '0x91db0222ec371a8c18d3b187a6d2e77789bffca1b96826ef6b8708e0d4a66c80312fc3ae95b8fbc147265abf539bb6f360152be61a0e1411d7f5771a599e769a1c',
 *  address: '0xda9C7A86AeE76701FC1c23ae548e8E93Ba3e42A5',
 *  client: thirdwebClient,
 *  chain: chain
 * });
 * ```
 * @auth
 */
export declare function verifySignature(options: VerifySignatureParams): Promise<boolean>;
//# sourceMappingURL=verifySignature.d.ts.map