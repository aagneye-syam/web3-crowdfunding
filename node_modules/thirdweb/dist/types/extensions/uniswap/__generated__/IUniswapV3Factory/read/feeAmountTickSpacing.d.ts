import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "feeAmountTickSpacing" function.
 */
export type FeeAmountTickSpacingParams = {
    fee: AbiParameterToPrimitiveType<{
        type: "uint24";
        name: "fee";
    }>;
};
export declare const FN_SELECTOR: "0x22afcccb";
/**
 * Checks if the `feeAmountTickSpacing` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `feeAmountTickSpacing` method is supported.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { isFeeAmountTickSpacingSupported } from "thirdweb/extensions/uniswap";
 *
 * const supported = await isFeeAmountTickSpacingSupported(contract);
 * ```
 */
export declare function isFeeAmountTickSpacingSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "feeAmountTickSpacing" function.
 * @param options - The options for the feeAmountTickSpacing function.
 * @returns The encoded ABI parameters.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { encodeFeeAmountTickSpacingParams } "thirdweb/extensions/uniswap";
 * const result = encodeFeeAmountTickSpacingParams({
 *  fee: ...,
 * });
 * ```
 */
export declare function encodeFeeAmountTickSpacingParams(options: FeeAmountTickSpacingParams): `0x${string}`;
/**
 * Encodes the "feeAmountTickSpacing" function into a Hex string with its parameters.
 * @param options - The options for the feeAmountTickSpacing function.
 * @returns The encoded hexadecimal string.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { encodeFeeAmountTickSpacing } "thirdweb/extensions/uniswap";
 * const result = encodeFeeAmountTickSpacing({
 *  fee: ...,
 * });
 * ```
 */
export declare function encodeFeeAmountTickSpacing(options: FeeAmountTickSpacingParams): `0x22afcccb${string}`;
/**
 * Decodes the result of the feeAmountTickSpacing function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { decodeFeeAmountTickSpacingResult } from "thirdweb/extensions/uniswap";
 * const result = decodeFeeAmountTickSpacingResult("...");
 * ```
 */
export declare function decodeFeeAmountTickSpacingResult(result: Hex): number;
/**
 * Calls the "feeAmountTickSpacing" function on the contract.
 * @param options - The options for the feeAmountTickSpacing function.
 * @returns The parsed result of the function call.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { feeAmountTickSpacing } from "thirdweb/extensions/uniswap";
 *
 * const result = await feeAmountTickSpacing({
 *  contract,
 *  fee: ...,
 * });
 *
 * ```
 */
export declare function feeAmountTickSpacing(options: BaseTransactionOptions<FeeAmountTickSpacingParams>): Promise<number>;
//# sourceMappingURL=feeAmountTickSpacing.d.ts.map