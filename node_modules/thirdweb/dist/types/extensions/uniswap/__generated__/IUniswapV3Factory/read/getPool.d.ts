import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getPool" function.
 */
export type GetPoolParams = {
    tokenA: AbiParameterToPrimitiveType<{
        type: "address";
        name: "tokenA";
    }>;
    tokenB: AbiParameterToPrimitiveType<{
        type: "address";
        name: "tokenB";
    }>;
    fee: AbiParameterToPrimitiveType<{
        type: "uint24";
        name: "fee";
    }>;
};
export declare const FN_SELECTOR: "0x1698ee82";
/**
 * Checks if the `getPool` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getPool` method is supported.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { isGetPoolSupported } from "thirdweb/extensions/uniswap";
 *
 * const supported = await isGetPoolSupported(contract);
 * ```
 */
export declare function isGetPoolSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getPool" function.
 * @param options - The options for the getPool function.
 * @returns The encoded ABI parameters.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { encodeGetPoolParams } "thirdweb/extensions/uniswap";
 * const result = encodeGetPoolParams({
 *  tokenA: ...,
 *  tokenB: ...,
 *  fee: ...,
 * });
 * ```
 */
export declare function encodeGetPoolParams(options: GetPoolParams): `0x${string}`;
/**
 * Encodes the "getPool" function into a Hex string with its parameters.
 * @param options - The options for the getPool function.
 * @returns The encoded hexadecimal string.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { encodeGetPool } "thirdweb/extensions/uniswap";
 * const result = encodeGetPool({
 *  tokenA: ...,
 *  tokenB: ...,
 *  fee: ...,
 * });
 * ```
 */
export declare function encodeGetPool(options: GetPoolParams): `0x1698ee82${string}`;
/**
 * Decodes the result of the getPool function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { decodeGetPoolResult } from "thirdweb/extensions/uniswap";
 * const result = decodeGetPoolResult("...");
 * ```
 */
export declare function decodeGetPoolResult(result: Hex): string;
/**
 * Calls the "getPool" function on the contract.
 * @param options - The options for the getPool function.
 * @returns The parsed result of the function call.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { getPool } from "thirdweb/extensions/uniswap";
 *
 * const result = await getPool({
 *  contract,
 *  tokenA: ...,
 *  tokenB: ...,
 *  fee: ...,
 * });
 *
 * ```
 */
export declare function getPool(options: BaseTransactionOptions<GetPoolParams>): Promise<string>;
//# sourceMappingURL=getPool.d.ts.map