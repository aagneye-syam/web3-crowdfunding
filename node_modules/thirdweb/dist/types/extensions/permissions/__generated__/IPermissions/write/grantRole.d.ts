import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "grantRole" function.
 */
export type GrantRoleParams = WithOverrides<{
    role: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "role";
    }>;
    account: AbiParameterToPrimitiveType<{
        type: "address";
        name: "account";
    }>;
}>;
export declare const FN_SELECTOR: "0x2f2ff15d";
/**
 * Checks if the `grantRole` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `grantRole` method is supported.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { isGrantRoleSupported } from "thirdweb/extensions/permissions";
 *
 * const supported = await isGrantRoleSupported(contract);
 * ```
 */
export declare function isGrantRoleSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "grantRole" function.
 * @param options - The options for the grantRole function.
 * @returns The encoded ABI parameters.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { encodeGrantRoleParams } "thirdweb/extensions/permissions";
 * const result = encodeGrantRoleParams({
 *  role: ...,
 *  account: ...,
 * });
 * ```
 */
export declare function encodeGrantRoleParams(options: GrantRoleParams): `0x${string}`;
/**
 * Encodes the "grantRole" function into a Hex string with its parameters.
 * @param options - The options for the grantRole function.
 * @returns The encoded hexadecimal string.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { encodeGrantRole } "thirdweb/extensions/permissions";
 * const result = encodeGrantRole({
 *  role: ...,
 *  account: ...,
 * });
 * ```
 */
export declare function encodeGrantRole(options: GrantRoleParams): `0x2f2ff15d${string}`;
/**
 * Prepares a transaction to call the "grantRole" function on the contract.
 * @param options - The options for the "grantRole" function.
 * @returns A prepared transaction object.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { grantRole } from "thirdweb/extensions/permissions";
 *
 * const transaction = grantRole({
 *  contract,
 *  role: ...,
 *  account: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function grantRole(options: BaseTransactionOptions<GrantRoleParams | {
    asyncParams: () => Promise<GrantRoleParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=grantRole.d.ts.map