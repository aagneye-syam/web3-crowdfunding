import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "price" function.
 */
export type PriceParams = {
    units: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "units";
    }>;
};
export declare const FN_SELECTOR: "0x26a49e37";
/**
 * Checks if the `price` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `price` method is supported.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { isPriceSupported } from "thirdweb/extensions/farcaster";
 *
 * const supported = await isPriceSupported(contract);
 * ```
 */
export declare function isPriceSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "price" function.
 * @param options - The options for the price function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodePriceParams } "thirdweb/extensions/farcaster";
 * const result = encodePriceParams({
 *  units: ...,
 * });
 * ```
 */
export declare function encodePriceParams(options: PriceParams): `0x${string}`;
/**
 * Encodes the "price" function into a Hex string with its parameters.
 * @param options - The options for the price function.
 * @returns The encoded hexadecimal string.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodePrice } "thirdweb/extensions/farcaster";
 * const result = encodePrice({
 *  units: ...,
 * });
 * ```
 */
export declare function encodePrice(options: PriceParams): `0x26a49e37${string}`;
/**
 * Decodes the result of the price function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodePriceResult } from "thirdweb/extensions/farcaster";
 * const result = decodePriceResult("...");
 * ```
 */
export declare function decodePriceResult(result: Hex): bigint;
/**
 * Calls the "price" function on the contract.
 * @param options - The options for the price function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { price } from "thirdweb/extensions/farcaster";
 *
 * const result = await price({
 *  contract,
 *  units: ...,
 * });
 *
 * ```
 */
export declare function price(options: BaseTransactionOptions<PriceParams>): Promise<bigint>;
//# sourceMappingURL=price.d.ts.map