import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "totalKeys" function.
 */
export type TotalKeysParams = {
    fid: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "fid";
    }>;
    state: AbiParameterToPrimitiveType<{
        type: "uint8";
        name: "state";
    }>;
};
export declare const FN_SELECTOR: "0x6840b75e";
/**
 * Checks if the `totalKeys` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `totalKeys` method is supported.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { isTotalKeysSupported } from "thirdweb/extensions/farcaster";
 *
 * const supported = await isTotalKeysSupported(contract);
 * ```
 */
export declare function isTotalKeysSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "totalKeys" function.
 * @param options - The options for the totalKeys function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeTotalKeysParams } "thirdweb/extensions/farcaster";
 * const result = encodeTotalKeysParams({
 *  fid: ...,
 *  state: ...,
 * });
 * ```
 */
export declare function encodeTotalKeysParams(options: TotalKeysParams): `0x${string}`;
/**
 * Encodes the "totalKeys" function into a Hex string with its parameters.
 * @param options - The options for the totalKeys function.
 * @returns The encoded hexadecimal string.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeTotalKeys } "thirdweb/extensions/farcaster";
 * const result = encodeTotalKeys({
 *  fid: ...,
 *  state: ...,
 * });
 * ```
 */
export declare function encodeTotalKeys(options: TotalKeysParams): `0x6840b75e${string}`;
/**
 * Decodes the result of the totalKeys function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeTotalKeysResult } from "thirdweb/extensions/farcaster";
 * const result = decodeTotalKeysResult("...");
 * ```
 */
export declare function decodeTotalKeysResult(result: Hex): bigint;
/**
 * Calls the "totalKeys" function on the contract.
 * @param options - The options for the totalKeys function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { totalKeys } from "thirdweb/extensions/farcaster";
 *
 * const result = await totalKeys({
 *  contract,
 *  fid: ...,
 *  state: ...,
 * });
 *
 * ```
 */
export declare function totalKeys(options: BaseTransactionOptions<TotalKeysParams>): Promise<bigint>;
//# sourceMappingURL=totalKeys.d.ts.map