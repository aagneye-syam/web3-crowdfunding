import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "keyDataOf" function.
 */
export type KeyDataOfParams = {
    fid: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "fid";
    }>;
    key: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "key";
    }>;
};
export declare const FN_SELECTOR: "0xac34cc5a";
/**
 * Checks if the `keyDataOf` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `keyDataOf` method is supported.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { isKeyDataOfSupported } from "thirdweb/extensions/farcaster";
 *
 * const supported = await isKeyDataOfSupported(contract);
 * ```
 */
export declare function isKeyDataOfSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "keyDataOf" function.
 * @param options - The options for the keyDataOf function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeKeyDataOfParams } "thirdweb/extensions/farcaster";
 * const result = encodeKeyDataOfParams({
 *  fid: ...,
 *  key: ...,
 * });
 * ```
 */
export declare function encodeKeyDataOfParams(options: KeyDataOfParams): `0x${string}`;
/**
 * Encodes the "keyDataOf" function into a Hex string with its parameters.
 * @param options - The options for the keyDataOf function.
 * @returns The encoded hexadecimal string.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeKeyDataOf } "thirdweb/extensions/farcaster";
 * const result = encodeKeyDataOf({
 *  fid: ...,
 *  key: ...,
 * });
 * ```
 */
export declare function encodeKeyDataOf(options: KeyDataOfParams): `0xac34cc5a${string}`;
/**
 * Decodes the result of the keyDataOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeKeyDataOfResult } from "thirdweb/extensions/farcaster";
 * const result = decodeKeyDataOfResult("...");
 * ```
 */
export declare function decodeKeyDataOfResult(result: Hex): string;
/**
 * Calls the "keyDataOf" function on the contract.
 * @param options - The options for the keyDataOf function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { keyDataOf } from "thirdweb/extensions/farcaster";
 *
 * const result = await keyDataOf({
 *  contract,
 *  fid: ...,
 *  key: ...,
 * });
 *
 * ```
 */
export declare function keyDataOf(options: BaseTransactionOptions<KeyDataOfParams>): Promise<string>;
//# sourceMappingURL=keyDataOf.d.ts.map