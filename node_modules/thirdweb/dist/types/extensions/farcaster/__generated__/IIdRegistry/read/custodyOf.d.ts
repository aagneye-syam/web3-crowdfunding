import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "custodyOf" function.
 */
export type CustodyOfParams = {
    fid: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "fid";
    }>;
};
export declare const FN_SELECTOR: "0x65269e47";
/**
 * Checks if the `custodyOf` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `custodyOf` method is supported.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { isCustodyOfSupported } from "thirdweb/extensions/farcaster";
 *
 * const supported = await isCustodyOfSupported(contract);
 * ```
 */
export declare function isCustodyOfSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "custodyOf" function.
 * @param options - The options for the custodyOf function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeCustodyOfParams } "thirdweb/extensions/farcaster";
 * const result = encodeCustodyOfParams({
 *  fid: ...,
 * });
 * ```
 */
export declare function encodeCustodyOfParams(options: CustodyOfParams): `0x${string}`;
/**
 * Encodes the "custodyOf" function into a Hex string with its parameters.
 * @param options - The options for the custodyOf function.
 * @returns The encoded hexadecimal string.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeCustodyOf } "thirdweb/extensions/farcaster";
 * const result = encodeCustodyOf({
 *  fid: ...,
 * });
 * ```
 */
export declare function encodeCustodyOf(options: CustodyOfParams): `0x65269e47${string}`;
/**
 * Decodes the result of the custodyOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeCustodyOfResult } from "thirdweb/extensions/farcaster";
 * const result = decodeCustodyOfResult("...");
 * ```
 */
export declare function decodeCustodyOfResult(result: Hex): string;
/**
 * Calls the "custodyOf" function on the contract.
 * @param options - The options for the custodyOf function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { custodyOf } from "thirdweb/extensions/farcaster";
 *
 * const result = await custodyOf({
 *  contract,
 *  fid: ...,
 * });
 *
 * ```
 */
export declare function custodyOf(options: BaseTransactionOptions<CustodyOfParams>): Promise<string>;
//# sourceMappingURL=custodyOf.d.ts.map