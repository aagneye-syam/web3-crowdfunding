import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "changeRecoveryAddress" function.
 */
export type ChangeRecoveryAddressParams = WithOverrides<{
    recovery: AbiParameterToPrimitiveType<{
        type: "address";
        name: "recovery";
    }>;
}>;
export declare const FN_SELECTOR: "0xf1f0b224";
/**
 * Checks if the `changeRecoveryAddress` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `changeRecoveryAddress` method is supported.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { isChangeRecoveryAddressSupported } from "thirdweb/extensions/farcaster";
 *
 * const supported = await isChangeRecoveryAddressSupported(contract);
 * ```
 */
export declare function isChangeRecoveryAddressSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "changeRecoveryAddress" function.
 * @param options - The options for the changeRecoveryAddress function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeChangeRecoveryAddressParams } "thirdweb/extensions/farcaster";
 * const result = encodeChangeRecoveryAddressParams({
 *  recovery: ...,
 * });
 * ```
 */
export declare function encodeChangeRecoveryAddressParams(options: ChangeRecoveryAddressParams): `0x${string}`;
/**
 * Encodes the "changeRecoveryAddress" function into a Hex string with its parameters.
 * @param options - The options for the changeRecoveryAddress function.
 * @returns The encoded hexadecimal string.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeChangeRecoveryAddress } "thirdweb/extensions/farcaster";
 * const result = encodeChangeRecoveryAddress({
 *  recovery: ...,
 * });
 * ```
 */
export declare function encodeChangeRecoveryAddress(options: ChangeRecoveryAddressParams): `0xf1f0b224${string}`;
/**
 * Prepares a transaction to call the "changeRecoveryAddress" function on the contract.
 * @param options - The options for the "changeRecoveryAddress" function.
 * @returns A prepared transaction object.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { changeRecoveryAddress } from "thirdweb/extensions/farcaster";
 *
 * const transaction = changeRecoveryAddress({
 *  contract,
 *  recovery: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function changeRecoveryAddress(options: BaseTransactionOptions<ChangeRecoveryAddressParams | {
    asyncParams: () => Promise<ChangeRecoveryAddressParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=changeRecoveryAddress.d.ts.map