import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0x4b57a600";
/**
 * Checks if the `idGateway` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `idGateway` method is supported.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { isIdGatewaySupported } from "thirdweb/extensions/farcaster";
 *
 * const supported = await isIdGatewaySupported(contract);
 * ```
 */
export declare function isIdGatewaySupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the idGateway function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeIdGatewayResult } from "thirdweb/extensions/farcaster";
 * const result = decodeIdGatewayResult("...");
 * ```
 */
export declare function decodeIdGatewayResult(result: Hex): string;
/**
 * Calls the "idGateway" function on the contract.
 * @param options - The options for the idGateway function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { idGateway } from "thirdweb/extensions/farcaster";
 *
 * const result = await idGateway({
 *  contract,
 * });
 *
 * ```
 */
export declare function idGateway(options: BaseTransactionOptions): Promise<string>;
//# sourceMappingURL=idGateway.d.ts.map