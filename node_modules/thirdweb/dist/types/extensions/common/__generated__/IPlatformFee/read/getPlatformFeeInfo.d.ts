import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0xd45573f6";
/**
 * Checks if the `getPlatformFeeInfo` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getPlatformFeeInfo` method is supported.
 * @extension COMMON
 * @example
 * ```ts
 * import { isGetPlatformFeeInfoSupported } from "thirdweb/extensions/common";
 *
 * const supported = await isGetPlatformFeeInfoSupported(contract);
 * ```
 */
export declare function isGetPlatformFeeInfoSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the getPlatformFeeInfo function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension COMMON
 * @example
 * ```ts
 * import { decodeGetPlatformFeeInfoResult } from "thirdweb/extensions/common";
 * const result = decodeGetPlatformFeeInfoResult("...");
 * ```
 */
export declare function decodeGetPlatformFeeInfoResult(result: Hex): readonly [string, number];
/**
 * Calls the "getPlatformFeeInfo" function on the contract.
 * @param options - The options for the getPlatformFeeInfo function.
 * @returns The parsed result of the function call.
 * @extension COMMON
 * @example
 * ```ts
 * import { getPlatformFeeInfo } from "thirdweb/extensions/common";
 *
 * const result = await getPlatformFeeInfo({
 *  contract,
 * });
 *
 * ```
 */
export declare function getPlatformFeeInfo(options: BaseTransactionOptions): Promise<readonly [string, number]>;
//# sourceMappingURL=getPlatformFeeInfo.d.ts.map