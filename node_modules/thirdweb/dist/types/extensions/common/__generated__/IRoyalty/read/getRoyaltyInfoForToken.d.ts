import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getRoyaltyInfoForToken" function.
 */
export type GetRoyaltyInfoForTokenParams = {
    tokenId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "tokenId";
    }>;
};
export declare const FN_SELECTOR: "0x4cc157df";
/**
 * Checks if the `getRoyaltyInfoForToken` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getRoyaltyInfoForToken` method is supported.
 * @extension COMMON
 * @example
 * ```ts
 * import { isGetRoyaltyInfoForTokenSupported } from "thirdweb/extensions/common";
 *
 * const supported = await isGetRoyaltyInfoForTokenSupported(contract);
 * ```
 */
export declare function isGetRoyaltyInfoForTokenSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getRoyaltyInfoForToken" function.
 * @param options - The options for the getRoyaltyInfoForToken function.
 * @returns The encoded ABI parameters.
 * @extension COMMON
 * @example
 * ```ts
 * import { encodeGetRoyaltyInfoForTokenParams } "thirdweb/extensions/common";
 * const result = encodeGetRoyaltyInfoForTokenParams({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeGetRoyaltyInfoForTokenParams(options: GetRoyaltyInfoForTokenParams): `0x${string}`;
/**
 * Encodes the "getRoyaltyInfoForToken" function into a Hex string with its parameters.
 * @param options - The options for the getRoyaltyInfoForToken function.
 * @returns The encoded hexadecimal string.
 * @extension COMMON
 * @example
 * ```ts
 * import { encodeGetRoyaltyInfoForToken } "thirdweb/extensions/common";
 * const result = encodeGetRoyaltyInfoForToken({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeGetRoyaltyInfoForToken(options: GetRoyaltyInfoForTokenParams): `0x4cc157df${string}`;
/**
 * Decodes the result of the getRoyaltyInfoForToken function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension COMMON
 * @example
 * ```ts
 * import { decodeGetRoyaltyInfoForTokenResult } from "thirdweb/extensions/common";
 * const result = decodeGetRoyaltyInfoForTokenResult("...");
 * ```
 */
export declare function decodeGetRoyaltyInfoForTokenResult(result: Hex): readonly [string, number];
/**
 * Calls the "getRoyaltyInfoForToken" function on the contract.
 * @param options - The options for the getRoyaltyInfoForToken function.
 * @returns The parsed result of the function call.
 * @extension COMMON
 * @example
 * ```ts
 * import { getRoyaltyInfoForToken } from "thirdweb/extensions/common";
 *
 * const result = await getRoyaltyInfoForToken({
 *  contract,
 *  tokenId: ...,
 * });
 *
 * ```
 */
export declare function getRoyaltyInfoForToken(options: BaseTransactionOptions<GetRoyaltyInfoForTokenParams>): Promise<readonly [string, number]>;
//# sourceMappingURL=getRoyaltyInfoForToken.d.ts.map