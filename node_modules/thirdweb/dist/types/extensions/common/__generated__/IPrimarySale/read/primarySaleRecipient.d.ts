import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0x079fe40e";
/**
 * Checks if the `primarySaleRecipient` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `primarySaleRecipient` method is supported.
 * @extension COMMON
 * @example
 * ```ts
 * import { isPrimarySaleRecipientSupported } from "thirdweb/extensions/common";
 *
 * const supported = await isPrimarySaleRecipientSupported(contract);
 * ```
 */
export declare function isPrimarySaleRecipientSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the primarySaleRecipient function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension COMMON
 * @example
 * ```ts
 * import { decodePrimarySaleRecipientResult } from "thirdweb/extensions/common";
 * const result = decodePrimarySaleRecipientResult("...");
 * ```
 */
export declare function decodePrimarySaleRecipientResult(result: Hex): string;
/**
 * Calls the "primarySaleRecipient" function on the contract.
 * @param options - The options for the primarySaleRecipient function.
 * @returns The parsed result of the function call.
 * @extension COMMON
 * @example
 * ```ts
 * import { primarySaleRecipient } from "thirdweb/extensions/common";
 *
 * const result = await primarySaleRecipient({
 *  contract,
 * });
 *
 * ```
 */
export declare function primarySaleRecipient(options: BaseTransactionOptions): Promise<string>;
//# sourceMappingURL=primarySaleRecipient.d.ts.map