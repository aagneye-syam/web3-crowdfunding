import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getAll" function.
 */
export type GetAllParams = {
    deployer: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_deployer";
    }>;
};
export declare const FN_SELECTOR: "0xeb077342";
/**
 * Checks if the `getAll` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAll` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isGetAllSupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isGetAllSupported(contract);
 * ```
 */
export declare function isGetAllSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getAll" function.
 * @param options - The options for the getAll function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetAllParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetAllParams({
 *  deployer: ...,
 * });
 * ```
 */
export declare function encodeGetAllParams(options: GetAllParams): `0x${string}`;
/**
 * Encodes the "getAll" function into a Hex string with its parameters.
 * @param options - The options for the getAll function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetAll } "thirdweb/extensions/thirdweb";
 * const result = encodeGetAll({
 *  deployer: ...,
 * });
 * ```
 */
export declare function encodeGetAll(options: GetAllParams): `0xeb077342${string}`;
/**
 * Decodes the result of the getAll function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetAllResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetAllResult("...");
 * ```
 */
export declare function decodeGetAllResult(result: Hex): readonly {
    deploymentAddress: string;
    chainId: bigint;
    metadataURI: string;
}[];
/**
 * Calls the "getAll" function on the contract.
 * @param options - The options for the getAll function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getAll } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getAll({
 *  contract,
 *  deployer: ...,
 * });
 *
 * ```
 */
export declare function getAll(options: BaseTransactionOptions<GetAllParams>): Promise<readonly {
    deploymentAddress: string;
    chainId: bigint;
    metadataURI: string;
}[]>;
//# sourceMappingURL=getAll.d.ts.map