import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "add" function.
 */
export type AddParams = WithOverrides<{
    deployer: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_deployer";
    }>;
    deployment: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_deployment";
    }>;
    chainId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_chainId";
    }>;
    metadataUri: AbiParameterToPrimitiveType<{
        type: "string";
        name: "metadataUri";
    }>;
}>;
export declare const FN_SELECTOR: "0x26c5b516";
/**
 * Checks if the `add` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `add` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isAddSupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isAddSupported(contract);
 * ```
 */
export declare function isAddSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "add" function.
 * @param options - The options for the add function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeAddParams } "thirdweb/extensions/thirdweb";
 * const result = encodeAddParams({
 *  deployer: ...,
 *  deployment: ...,
 *  chainId: ...,
 *  metadataUri: ...,
 * });
 * ```
 */
export declare function encodeAddParams(options: AddParams): `0x${string}`;
/**
 * Encodes the "add" function into a Hex string with its parameters.
 * @param options - The options for the add function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeAdd } "thirdweb/extensions/thirdweb";
 * const result = encodeAdd({
 *  deployer: ...,
 *  deployment: ...,
 *  chainId: ...,
 *  metadataUri: ...,
 * });
 * ```
 */
export declare function encodeAdd(options: AddParams): `0x26c5b516${string}`;
/**
 * Prepares a transaction to call the "add" function on the contract.
 * @param options - The options for the "add" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { add } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = add({
 *  contract,
 *  deployer: ...,
 *  deployment: ...,
 *  chainId: ...,
 *  metadataUri: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function add(options: BaseTransactionOptions<AddParams | {
    asyncParams: () => Promise<AddParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=add.d.ts.map