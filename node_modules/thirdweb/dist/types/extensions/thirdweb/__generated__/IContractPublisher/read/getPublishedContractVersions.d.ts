import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getPublishedContractVersions" function.
 */
export type GetPublishedContractVersionsParams = {
    publisher: AbiParameterToPrimitiveType<{
        type: "address";
        name: "publisher";
    }>;
    contractId: AbiParameterToPrimitiveType<{
        type: "string";
        name: "contractId";
    }>;
};
export declare const FN_SELECTOR: "0x80251dac";
/**
 * Checks if the `getPublishedContractVersions` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getPublishedContractVersions` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isGetPublishedContractVersionsSupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isGetPublishedContractVersionsSupported(contract);
 * ```
 */
export declare function isGetPublishedContractVersionsSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getPublishedContractVersions" function.
 * @param options - The options for the getPublishedContractVersions function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetPublishedContractVersionsParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetPublishedContractVersionsParams({
 *  publisher: ...,
 *  contractId: ...,
 * });
 * ```
 */
export declare function encodeGetPublishedContractVersionsParams(options: GetPublishedContractVersionsParams): `0x${string}`;
/**
 * Encodes the "getPublishedContractVersions" function into a Hex string with its parameters.
 * @param options - The options for the getPublishedContractVersions function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetPublishedContractVersions } "thirdweb/extensions/thirdweb";
 * const result = encodeGetPublishedContractVersions({
 *  publisher: ...,
 *  contractId: ...,
 * });
 * ```
 */
export declare function encodeGetPublishedContractVersions(options: GetPublishedContractVersionsParams): `0x80251dac${string}`;
/**
 * Decodes the result of the getPublishedContractVersions function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetPublishedContractVersionsResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetPublishedContractVersionsResult("...");
 * ```
 */
export declare function decodeGetPublishedContractVersionsResult(result: Hex): readonly {
    contractId: string;
    publishTimestamp: bigint;
    publishMetadataUri: string;
    bytecodeHash: `0x${string}`;
    implementation: string;
}[];
/**
 * Calls the "getPublishedContractVersions" function on the contract.
 * @param options - The options for the getPublishedContractVersions function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getPublishedContractVersions } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getPublishedContractVersions({
 *  contract,
 *  publisher: ...,
 *  contractId: ...,
 * });
 *
 * ```
 */
export declare function getPublishedContractVersions(options: BaseTransactionOptions<GetPublishedContractVersionsParams>): Promise<readonly {
    contractId: string;
    publishTimestamp: bigint;
    publishMetadataUri: string;
    bytecodeHash: `0x${string}`;
    implementation: string;
}[]>;
//# sourceMappingURL=getPublishedContractVersions.d.ts.map