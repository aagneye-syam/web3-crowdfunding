import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getAllPublishedContracts" function.
 */
export type GetAllPublishedContractsParams = {
    publisher: AbiParameterToPrimitiveType<{
        type: "address";
        name: "publisher";
    }>;
};
export declare const FN_SELECTOR: "0xaf8db690";
/**
 * Checks if the `getAllPublishedContracts` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAllPublishedContracts` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isGetAllPublishedContractsSupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isGetAllPublishedContractsSupported(contract);
 * ```
 */
export declare function isGetAllPublishedContractsSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getAllPublishedContracts" function.
 * @param options - The options for the getAllPublishedContracts function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetAllPublishedContractsParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetAllPublishedContractsParams({
 *  publisher: ...,
 * });
 * ```
 */
export declare function encodeGetAllPublishedContractsParams(options: GetAllPublishedContractsParams): `0x${string}`;
/**
 * Encodes the "getAllPublishedContracts" function into a Hex string with its parameters.
 * @param options - The options for the getAllPublishedContracts function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetAllPublishedContracts } "thirdweb/extensions/thirdweb";
 * const result = encodeGetAllPublishedContracts({
 *  publisher: ...,
 * });
 * ```
 */
export declare function encodeGetAllPublishedContracts(options: GetAllPublishedContractsParams): `0xaf8db690${string}`;
/**
 * Decodes the result of the getAllPublishedContracts function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetAllPublishedContractsResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetAllPublishedContractsResult("...");
 * ```
 */
export declare function decodeGetAllPublishedContractsResult(result: Hex): readonly {
    contractId: string;
    publishTimestamp: bigint;
    publishMetadataUri: string;
    bytecodeHash: `0x${string}`;
    implementation: string;
}[];
/**
 * Calls the "getAllPublishedContracts" function on the contract.
 * @param options - The options for the getAllPublishedContracts function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getAllPublishedContracts } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getAllPublishedContracts({
 *  contract,
 *  publisher: ...,
 * });
 *
 * ```
 */
export declare function getAllPublishedContracts(options: BaseTransactionOptions<GetAllPublishedContractsParams>): Promise<readonly {
    contractId: string;
    publishTimestamp: bigint;
    publishMetadataUri: string;
    bytecodeHash: `0x${string}`;
    implementation: string;
}[]>;
//# sourceMappingURL=getAllPublishedContracts.d.ts.map