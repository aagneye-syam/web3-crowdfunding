import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "verify" function.
 */
export type VerifyParams = {
    req: AbiParameterToPrimitiveType<{
        type: "tuple";
        name: "req";
        components: [
            {
                type: "uint128";
                name: "validityStartTimestamp";
            },
            {
                type: "uint128";
                name: "validityEndTimestamp";
            },
            {
                type: "bytes32";
                name: "uid";
            },
            {
                type: "bytes";
                name: "data";
            }
        ];
    }>;
    signature: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "signature";
    }>;
};
export declare const FN_SELECTOR: "0xc4376dd7";
/**
 * Checks if the `verify` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `verify` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isVerifySupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isVerifySupported(contract);
 * ```
 */
export declare function isVerifySupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "verify" function.
 * @param options - The options for the verify function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeVerifyParams } "thirdweb/extensions/thirdweb";
 * const result = encodeVerifyParams({
 *  req: ...,
 *  signature: ...,
 * });
 * ```
 */
export declare function encodeVerifyParams(options: VerifyParams): `0x${string}`;
/**
 * Encodes the "verify" function into a Hex string with its parameters.
 * @param options - The options for the verify function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeVerify } "thirdweb/extensions/thirdweb";
 * const result = encodeVerify({
 *  req: ...,
 *  signature: ...,
 * });
 * ```
 */
export declare function encodeVerify(options: VerifyParams): `0xc4376dd7${string}`;
/**
 * Decodes the result of the verify function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeVerifyResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeVerifyResult("...");
 * ```
 */
export declare function decodeVerifyResult(result: Hex): readonly [boolean, string];
/**
 * Calls the "verify" function on the contract.
 * @param options - The options for the verify function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { verify } from "thirdweb/extensions/thirdweb";
 *
 * const result = await verify({
 *  contract,
 *  req: ...,
 *  signature: ...,
 * });
 *
 * ```
 */
export declare function verify(options: BaseTransactionOptions<VerifyParams>): Promise<readonly [boolean, string]>;
//# sourceMappingURL=verify.d.ts.map