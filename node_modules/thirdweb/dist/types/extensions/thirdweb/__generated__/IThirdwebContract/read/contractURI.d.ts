import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0xe8a3d485";
/**
 * Checks if the `contractURI` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `contractURI` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isContractURISupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isContractURISupported(contract);
 * ```
 */
export declare function isContractURISupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the contractURI function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeContractURIResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeContractURIResult("...");
 * ```
 */
export declare function decodeContractURIResult(result: Hex): string;
/**
 * Calls the "contractURI" function on the contract.
 * @param options - The options for the contractURI function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { contractURI } from "thirdweb/extensions/thirdweb";
 *
 * const result = await contractURI({
 *  contract,
 * });
 *
 * ```
 */
export declare function contractURI(options: BaseTransactionOptions): Promise<string>;
//# sourceMappingURL=contractURI.d.ts.map