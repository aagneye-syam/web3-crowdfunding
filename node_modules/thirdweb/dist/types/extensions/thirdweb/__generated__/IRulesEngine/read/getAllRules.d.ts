import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0x1184aef2";
/**
 * Checks if the `getAllRules` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAllRules` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isGetAllRulesSupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isGetAllRulesSupported(contract);
 * ```
 */
export declare function isGetAllRulesSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the getAllRules function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetAllRulesResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetAllRulesResult("...");
 * ```
 */
export declare function decodeGetAllRulesResult(result: Hex): readonly {
    ruleId: `0x${string}`;
    token: string;
    tokenType: number;
    tokenId: bigint;
    balance: bigint;
    score: bigint;
    ruleType: number;
}[];
/**
 * Calls the "getAllRules" function on the contract.
 * @param options - The options for the getAllRules function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getAllRules } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getAllRules({
 *  contract,
 * });
 *
 * ```
 */
export declare function getAllRules(options: BaseTransactionOptions): Promise<readonly {
    ruleId: `0x${string}`;
    token: string;
    tokenType: number;
    tokenId: bigint;
    balance: bigint;
    score: bigint;
    ruleType: number;
}[]>;
//# sourceMappingURL=getAllRules.d.ts.map