import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "setRulesEngineOverride" function.
 */
export type SetRulesEngineOverrideParams = WithOverrides<{
    rulesEngineAddress: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_rulesEngineAddress";
    }>;
}>;
export declare const FN_SELECTOR: "0x0eb0adb6";
/**
 * Checks if the `setRulesEngineOverride` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `setRulesEngineOverride` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isSetRulesEngineOverrideSupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isSetRulesEngineOverrideSupported(contract);
 * ```
 */
export declare function isSetRulesEngineOverrideSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "setRulesEngineOverride" function.
 * @param options - The options for the setRulesEngineOverride function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeSetRulesEngineOverrideParams } "thirdweb/extensions/thirdweb";
 * const result = encodeSetRulesEngineOverrideParams({
 *  rulesEngineAddress: ...,
 * });
 * ```
 */
export declare function encodeSetRulesEngineOverrideParams(options: SetRulesEngineOverrideParams): `0x${string}`;
/**
 * Encodes the "setRulesEngineOverride" function into a Hex string with its parameters.
 * @param options - The options for the setRulesEngineOverride function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeSetRulesEngineOverride } "thirdweb/extensions/thirdweb";
 * const result = encodeSetRulesEngineOverride({
 *  rulesEngineAddress: ...,
 * });
 * ```
 */
export declare function encodeSetRulesEngineOverride(options: SetRulesEngineOverrideParams): `0x0eb0adb6${string}`;
/**
 * Prepares a transaction to call the "setRulesEngineOverride" function on the contract.
 * @param options - The options for the "setRulesEngineOverride" function.
 * @returns A prepared transaction object.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { setRulesEngineOverride } from "thirdweb/extensions/thirdweb";
 *
 * const transaction = setRulesEngineOverride({
 *  contract,
 *  rulesEngineAddress: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setRulesEngineOverride(options: BaseTransactionOptions<SetRulesEngineOverrideParams | {
    asyncParams: () => Promise<SetRulesEngineOverrideParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=setRulesEngineOverride.d.ts.map