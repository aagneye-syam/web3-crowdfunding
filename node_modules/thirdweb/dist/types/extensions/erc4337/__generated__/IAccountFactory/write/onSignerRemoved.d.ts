import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "onSignerRemoved" function.
 */
export type OnSignerRemovedParams = WithOverrides<{
    signer: AbiParameterToPrimitiveType<{
        type: "address";
        name: "signer";
    }>;
    creatorAdmin: AbiParameterToPrimitiveType<{
        type: "address";
        name: "creatorAdmin";
    }>;
    data: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "data";
    }>;
}>;
export declare const FN_SELECTOR: "0x0db33003";
/**
 * Checks if the `onSignerRemoved` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `onSignerRemoved` method is supported.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isOnSignerRemovedSupported } from "thirdweb/extensions/erc4337";
 *
 * const supported = await isOnSignerRemovedSupported(contract);
 * ```
 */
export declare function isOnSignerRemovedSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "onSignerRemoved" function.
 * @param options - The options for the onSignerRemoved function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeOnSignerRemovedParams } "thirdweb/extensions/erc4337";
 * const result = encodeOnSignerRemovedParams({
 *  signer: ...,
 *  creatorAdmin: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeOnSignerRemovedParams(options: OnSignerRemovedParams): `0x${string}`;
/**
 * Encodes the "onSignerRemoved" function into a Hex string with its parameters.
 * @param options - The options for the onSignerRemoved function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeOnSignerRemoved } "thirdweb/extensions/erc4337";
 * const result = encodeOnSignerRemoved({
 *  signer: ...,
 *  creatorAdmin: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeOnSignerRemoved(options: OnSignerRemovedParams): `0x0db33003${string}`;
/**
 * Prepares a transaction to call the "onSignerRemoved" function on the contract.
 * @param options - The options for the "onSignerRemoved" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```ts
 * import { onSignerRemoved } from "thirdweb/extensions/erc4337";
 *
 * const transaction = onSignerRemoved({
 *  contract,
 *  signer: ...,
 *  creatorAdmin: ...,
 *  data: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function onSignerRemoved(options: BaseTransactionOptions<OnSignerRemovedParams | {
    asyncParams: () => Promise<OnSignerRemovedParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=onSignerRemoved.d.ts.map