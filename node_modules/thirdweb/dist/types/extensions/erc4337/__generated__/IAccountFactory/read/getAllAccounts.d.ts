import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0x08e93d0a";
/**
 * Checks if the `getAllAccounts` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAllAccounts` method is supported.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isGetAllAccountsSupported } from "thirdweb/extensions/erc4337";
 *
 * const supported = await isGetAllAccountsSupported(contract);
 * ```
 */
export declare function isGetAllAccountsSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the getAllAccounts function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeGetAllAccountsResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetAllAccountsResult("...");
 * ```
 */
export declare function decodeGetAllAccountsResult(result: Hex): readonly string[];
/**
 * Calls the "getAllAccounts" function on the contract.
 * @param options - The options for the getAllAccounts function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { getAllAccounts } from "thirdweb/extensions/erc4337";
 *
 * const result = await getAllAccounts({
 *  contract,
 * });
 *
 * ```
 */
export declare function getAllAccounts(options: BaseTransactionOptions): Promise<readonly string[]>;
//# sourceMappingURL=getAllAccounts.d.ts.map