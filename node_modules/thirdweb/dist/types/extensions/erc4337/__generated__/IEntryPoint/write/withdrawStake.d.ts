import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "withdrawStake" function.
 */
export type WithdrawStakeParams = WithOverrides<{
    withdrawAddress: AbiParameterToPrimitiveType<{
        type: "address";
        name: "withdrawAddress";
    }>;
}>;
export declare const FN_SELECTOR: "0xc23a5cea";
/**
 * Checks if the `withdrawStake` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `withdrawStake` method is supported.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isWithdrawStakeSupported } from "thirdweb/extensions/erc4337";
 *
 * const supported = await isWithdrawStakeSupported(contract);
 * ```
 */
export declare function isWithdrawStakeSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "withdrawStake" function.
 * @param options - The options for the withdrawStake function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeWithdrawStakeParams } "thirdweb/extensions/erc4337";
 * const result = encodeWithdrawStakeParams({
 *  withdrawAddress: ...,
 * });
 * ```
 */
export declare function encodeWithdrawStakeParams(options: WithdrawStakeParams): `0x${string}`;
/**
 * Encodes the "withdrawStake" function into a Hex string with its parameters.
 * @param options - The options for the withdrawStake function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeWithdrawStake } "thirdweb/extensions/erc4337";
 * const result = encodeWithdrawStake({
 *  withdrawAddress: ...,
 * });
 * ```
 */
export declare function encodeWithdrawStake(options: WithdrawStakeParams): `0xc23a5cea${string}`;
/**
 * Prepares a transaction to call the "withdrawStake" function on the contract.
 * @param options - The options for the "withdrawStake" function.
 * @returns A prepared transaction object.
 * @extension ERC4337
 * @example
 * ```ts
 * import { withdrawStake } from "thirdweb/extensions/erc4337";
 *
 * const transaction = withdrawStake({
 *  contract,
 *  withdrawAddress: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function withdrawStake(options: BaseTransactionOptions<WithdrawStakeParams | {
    asyncParams: () => Promise<WithdrawStakeParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=withdrawStake.d.ts.map