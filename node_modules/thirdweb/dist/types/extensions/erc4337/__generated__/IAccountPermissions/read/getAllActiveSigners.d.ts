import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0x8b52d723";
/**
 * Checks if the `getAllActiveSigners` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAllActiveSigners` method is supported.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isGetAllActiveSignersSupported } from "thirdweb/extensions/erc4337";
 *
 * const supported = await isGetAllActiveSignersSupported(contract);
 * ```
 */
export declare function isGetAllActiveSignersSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the getAllActiveSigners function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeGetAllActiveSignersResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetAllActiveSignersResult("...");
 * ```
 */
export declare function decodeGetAllActiveSignersResult(result: Hex): readonly {
    signer: string;
    approvedTargets: readonly string[];
    nativeTokenLimitPerTransaction: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
}[];
/**
 * Calls the "getAllActiveSigners" function on the contract.
 * @param options - The options for the getAllActiveSigners function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { getAllActiveSigners } from "thirdweb/extensions/erc4337";
 *
 * const result = await getAllActiveSigners({
 *  contract,
 * });
 *
 * ```
 */
export declare function getAllActiveSigners(options: BaseTransactionOptions): Promise<readonly {
    signer: string;
    approvedTargets: readonly string[];
    nativeTokenLimitPerTransaction: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
}[]>;
//# sourceMappingURL=getAllActiveSigners.d.ts.map