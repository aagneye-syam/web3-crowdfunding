import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "isAdmin" function.
 */
export type IsAdminParams = {
    signer: AbiParameterToPrimitiveType<{
        type: "address";
        name: "signer";
    }>;
};
export declare const FN_SELECTOR: "0x24d7806c";
/**
 * Checks if the `isAdmin` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `isAdmin` method is supported.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isIsAdminSupported } from "thirdweb/extensions/erc4337";
 *
 * const supported = await isIsAdminSupported(contract);
 * ```
 */
export declare function isIsAdminSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "isAdmin" function.
 * @param options - The options for the isAdmin function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeIsAdminParams } "thirdweb/extensions/erc4337";
 * const result = encodeIsAdminParams({
 *  signer: ...,
 * });
 * ```
 */
export declare function encodeIsAdminParams(options: IsAdminParams): `0x${string}`;
/**
 * Encodes the "isAdmin" function into a Hex string with its parameters.
 * @param options - The options for the isAdmin function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeIsAdmin } "thirdweb/extensions/erc4337";
 * const result = encodeIsAdmin({
 *  signer: ...,
 * });
 * ```
 */
export declare function encodeIsAdmin(options: IsAdminParams): `0x24d7806c${string}`;
/**
 * Decodes the result of the isAdmin function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeIsAdminResult } from "thirdweb/extensions/erc4337";
 * const result = decodeIsAdminResult("...");
 * ```
 */
export declare function decodeIsAdminResult(result: Hex): boolean;
/**
 * Calls the "isAdmin" function on the contract.
 * @param options - The options for the isAdmin function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isAdmin } from "thirdweb/extensions/erc4337";
 *
 * const result = await isAdmin({
 *  contract,
 *  signer: ...,
 * });
 *
 * ```
 */
export declare function isAdmin(options: BaseTransactionOptions<IsAdminParams>): Promise<boolean>;
//# sourceMappingURL=isAdmin.d.ts.map