import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "currencyPriceForListing" function.
 */
export type CurrencyPriceForListingParams = {
    listingId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_listingId";
    }>;
    currency: AbiParameterToPrimitiveType<{
        type: "address";
        name: "_currency";
    }>;
};
export declare const FN_SELECTOR: "0xfb14079d";
/**
 * Checks if the `currencyPriceForListing` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `currencyPriceForListing` method is supported.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { isCurrencyPriceForListingSupported } from "thirdweb/extensions/marketplace";
 *
 * const supported = await isCurrencyPriceForListingSupported(contract);
 * ```
 */
export declare function isCurrencyPriceForListingSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "currencyPriceForListing" function.
 * @param options - The options for the currencyPriceForListing function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeCurrencyPriceForListingParams } "thirdweb/extensions/marketplace";
 * const result = encodeCurrencyPriceForListingParams({
 *  listingId: ...,
 *  currency: ...,
 * });
 * ```
 */
export declare function encodeCurrencyPriceForListingParams(options: CurrencyPriceForListingParams): `0x${string}`;
/**
 * Encodes the "currencyPriceForListing" function into a Hex string with its parameters.
 * @param options - The options for the currencyPriceForListing function.
 * @returns The encoded hexadecimal string.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeCurrencyPriceForListing } "thirdweb/extensions/marketplace";
 * const result = encodeCurrencyPriceForListing({
 *  listingId: ...,
 *  currency: ...,
 * });
 * ```
 */
export declare function encodeCurrencyPriceForListing(options: CurrencyPriceForListingParams): `0xfb14079d${string}`;
/**
 * Decodes the result of the currencyPriceForListing function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { decodeCurrencyPriceForListingResult } from "thirdweb/extensions/marketplace";
 * const result = decodeCurrencyPriceForListingResult("...");
 * ```
 */
export declare function decodeCurrencyPriceForListingResult(result: Hex): bigint;
/**
 * Calls the "currencyPriceForListing" function on the contract.
 * @param options - The options for the currencyPriceForListing function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { currencyPriceForListing } from "thirdweb/extensions/marketplace";
 *
 * const result = await currencyPriceForListing({
 *  contract,
 *  listingId: ...,
 *  currency: ...,
 * });
 *
 * ```
 */
export declare function currencyPriceForListing(options: BaseTransactionOptions<CurrencyPriceForListingParams>): Promise<bigint>;
//# sourceMappingURL=currencyPriceForListing.d.ts.map