import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getOffer" function.
 */
export type GetOfferParams = {
    offerId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_offerId";
    }>;
};
export declare const FN_SELECTOR: "0x4579268a";
/**
 * Checks if the `getOffer` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getOffer` method is supported.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { isGetOfferSupported } from "thirdweb/extensions/marketplace";
 *
 * const supported = await isGetOfferSupported(contract);
 * ```
 */
export declare function isGetOfferSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getOffer" function.
 * @param options - The options for the getOffer function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetOfferParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetOfferParams({
 *  offerId: ...,
 * });
 * ```
 */
export declare function encodeGetOfferParams(options: GetOfferParams): `0x${string}`;
/**
 * Encodes the "getOffer" function into a Hex string with its parameters.
 * @param options - The options for the getOffer function.
 * @returns The encoded hexadecimal string.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetOffer } "thirdweb/extensions/marketplace";
 * const result = encodeGetOffer({
 *  offerId: ...,
 * });
 * ```
 */
export declare function encodeGetOffer(options: GetOfferParams): `0x4579268a${string}`;
/**
 * Decodes the result of the getOffer function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { decodeGetOfferResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetOfferResult("...");
 * ```
 */
export declare function decodeGetOfferResult(result: Hex): {
    offerId: bigint;
    tokenId: bigint;
    quantity: bigint;
    totalPrice: bigint;
    expirationTimestamp: bigint;
    offeror: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
};
/**
 * Calls the "getOffer" function on the contract.
 * @param options - The options for the getOffer function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { getOffer } from "thirdweb/extensions/marketplace";
 *
 * const result = await getOffer({
 *  contract,
 *  offerId: ...,
 * });
 *
 * ```
 */
export declare function getOffer(options: BaseTransactionOptions<GetOfferParams>): Promise<{
    offerId: bigint;
    tokenId: bigint;
    quantity: bigint;
    totalPrice: bigint;
    expirationTimestamp: bigint;
    offeror: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
}>;
//# sourceMappingURL=getOffer.d.ts.map