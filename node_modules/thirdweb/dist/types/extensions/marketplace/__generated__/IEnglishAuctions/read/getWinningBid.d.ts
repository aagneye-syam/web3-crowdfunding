import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getWinningBid" function.
 */
export type GetWinningBidParams = {
    auctionId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_auctionId";
    }>;
};
export declare const FN_SELECTOR: "0x6891939d";
/**
 * Checks if the `getWinningBid` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getWinningBid` method is supported.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { isGetWinningBidSupported } from "thirdweb/extensions/marketplace";
 *
 * const supported = await isGetWinningBidSupported(contract);
 * ```
 */
export declare function isGetWinningBidSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getWinningBid" function.
 * @param options - The options for the getWinningBid function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetWinningBidParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetWinningBidParams({
 *  auctionId: ...,
 * });
 * ```
 */
export declare function encodeGetWinningBidParams(options: GetWinningBidParams): `0x${string}`;
/**
 * Encodes the "getWinningBid" function into a Hex string with its parameters.
 * @param options - The options for the getWinningBid function.
 * @returns The encoded hexadecimal string.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetWinningBid } "thirdweb/extensions/marketplace";
 * const result = encodeGetWinningBid({
 *  auctionId: ...,
 * });
 * ```
 */
export declare function encodeGetWinningBid(options: GetWinningBidParams): `0x6891939d${string}`;
/**
 * Decodes the result of the getWinningBid function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { decodeGetWinningBidResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetWinningBidResult("...");
 * ```
 */
export declare function decodeGetWinningBidResult(result: Hex): readonly [string, string, bigint];
/**
 * Calls the "getWinningBid" function on the contract.
 * @param options - The options for the getWinningBid function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { getWinningBid } from "thirdweb/extensions/marketplace";
 *
 * const result = await getWinningBid({
 *  contract,
 *  auctionId: ...,
 * });
 *
 * ```
 */
export declare function getWinningBid(options: BaseTransactionOptions<GetWinningBidParams>): Promise<readonly [string, string, bigint]>;
//# sourceMappingURL=getWinningBid.d.ts.map