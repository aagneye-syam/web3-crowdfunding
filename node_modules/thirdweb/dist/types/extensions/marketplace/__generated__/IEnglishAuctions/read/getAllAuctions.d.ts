import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getAllAuctions" function.
 */
export type GetAllAuctionsParams = {
    startId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_startId";
    }>;
    endId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "_endId";
    }>;
};
export declare const FN_SELECTOR: "0xc291537c";
/**
 * Checks if the `getAllAuctions` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAllAuctions` method is supported.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { isGetAllAuctionsSupported } from "thirdweb/extensions/marketplace";
 *
 * const supported = await isGetAllAuctionsSupported(contract);
 * ```
 */
export declare function isGetAllAuctionsSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getAllAuctions" function.
 * @param options - The options for the getAllAuctions function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetAllAuctionsParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetAllAuctionsParams({
 *  startId: ...,
 *  endId: ...,
 * });
 * ```
 */
export declare function encodeGetAllAuctionsParams(options: GetAllAuctionsParams): `0x${string}`;
/**
 * Encodes the "getAllAuctions" function into a Hex string with its parameters.
 * @param options - The options for the getAllAuctions function.
 * @returns The encoded hexadecimal string.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetAllAuctions } "thirdweb/extensions/marketplace";
 * const result = encodeGetAllAuctions({
 *  startId: ...,
 *  endId: ...,
 * });
 * ```
 */
export declare function encodeGetAllAuctions(options: GetAllAuctionsParams): `0xc291537c${string}`;
/**
 * Decodes the result of the getAllAuctions function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { decodeGetAllAuctionsResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetAllAuctionsResult("...");
 * ```
 */
export declare function decodeGetAllAuctionsResult(result: Hex): readonly {
    auctionId: bigint;
    tokenId: bigint;
    quantity: bigint;
    minimumBidAmount: bigint;
    buyoutBidAmount: bigint;
    timeBufferInSeconds: bigint;
    bidBufferBps: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    auctionCreator: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
}[];
/**
 * Calls the "getAllAuctions" function on the contract.
 * @param options - The options for the getAllAuctions function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { getAllAuctions } from "thirdweb/extensions/marketplace";
 *
 * const result = await getAllAuctions({
 *  contract,
 *  startId: ...,
 *  endId: ...,
 * });
 *
 * ```
 */
export declare function getAllAuctions(options: BaseTransactionOptions<GetAllAuctionsParams>): Promise<readonly {
    auctionId: bigint;
    tokenId: bigint;
    quantity: bigint;
    minimumBidAmount: bigint;
    buyoutBidAmount: bigint;
    timeBufferInSeconds: bigint;
    bidBufferBps: bigint;
    startTimestamp: bigint;
    endTimestamp: bigint;
    auctionCreator: string;
    assetContract: string;
    currency: string;
    tokenType: number;
    status: number;
}[]>;
//# sourceMappingURL=getAllAuctions.d.ts.map