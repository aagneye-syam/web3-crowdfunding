import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "royaltyInfo" function.
 */
export type RoyaltyInfoParams = {
    tokenId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "tokenId";
    }>;
    salePrice: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "salePrice";
    }>;
};
export declare const FN_SELECTOR: "0x2a55205a";
/**
 * Checks if the `royaltyInfo` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `royaltyInfo` method is supported.
 * @extension ERC2981
 * @example
 * ```ts
 * import { isRoyaltyInfoSupported } from "thirdweb/extensions/erc2981";
 *
 * const supported = await isRoyaltyInfoSupported(contract);
 * ```
 */
export declare function isRoyaltyInfoSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "royaltyInfo" function.
 * @param options - The options for the royaltyInfo function.
 * @returns The encoded ABI parameters.
 * @extension ERC2981
 * @example
 * ```ts
 * import { encodeRoyaltyInfoParams } "thirdweb/extensions/erc2981";
 * const result = encodeRoyaltyInfoParams({
 *  tokenId: ...,
 *  salePrice: ...,
 * });
 * ```
 */
export declare function encodeRoyaltyInfoParams(options: RoyaltyInfoParams): `0x${string}`;
/**
 * Encodes the "royaltyInfo" function into a Hex string with its parameters.
 * @param options - The options for the royaltyInfo function.
 * @returns The encoded hexadecimal string.
 * @extension ERC2981
 * @example
 * ```ts
 * import { encodeRoyaltyInfo } "thirdweb/extensions/erc2981";
 * const result = encodeRoyaltyInfo({
 *  tokenId: ...,
 *  salePrice: ...,
 * });
 * ```
 */
export declare function encodeRoyaltyInfo(options: RoyaltyInfoParams): `0x2a55205a${string}`;
/**
 * Decodes the result of the royaltyInfo function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC2981
 * @example
 * ```ts
 * import { decodeRoyaltyInfoResult } from "thirdweb/extensions/erc2981";
 * const result = decodeRoyaltyInfoResult("...");
 * ```
 */
export declare function decodeRoyaltyInfoResult(result: Hex): readonly [string, bigint];
/**
 * Calls the "royaltyInfo" function on the contract.
 * @param options - The options for the royaltyInfo function.
 * @returns The parsed result of the function call.
 * @extension ERC2981
 * @example
 * ```ts
 * import { royaltyInfo } from "thirdweb/extensions/erc2981";
 *
 * const result = await royaltyInfo({
 *  contract,
 *  tokenId: ...,
 *  salePrice: ...,
 * });
 *
 * ```
 */
export declare function royaltyInfo(options: BaseTransactionOptions<RoyaltyInfoParams>): Promise<readonly [string, bigint]>;
//# sourceMappingURL=royaltyInfo.d.ts.map