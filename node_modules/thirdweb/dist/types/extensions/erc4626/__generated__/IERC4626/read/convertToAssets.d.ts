import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "convertToAssets" function.
 */
export type ConvertToAssetsParams = {
    shares: AbiParameterToPrimitiveType<{
        name: "shares";
        type: "uint256";
        internalType: "uint256";
    }>;
};
export declare const FN_SELECTOR: "0x07a2d13a";
/**
 * Checks if the `convertToAssets` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `convertToAssets` method is supported.
 * @extension ERC4626
 * @example
 * ```ts
 * import { isConvertToAssetsSupported } from "thirdweb/extensions/erc4626";
 *
 * const supported = await isConvertToAssetsSupported(contract);
 * ```
 */
export declare function isConvertToAssetsSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "convertToAssets" function.
 * @param options - The options for the convertToAssets function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodeConvertToAssetsParams } "thirdweb/extensions/erc4626";
 * const result = encodeConvertToAssetsParams({
 *  shares: ...,
 * });
 * ```
 */
export declare function encodeConvertToAssetsParams(options: ConvertToAssetsParams): `0x${string}`;
/**
 * Encodes the "convertToAssets" function into a Hex string with its parameters.
 * @param options - The options for the convertToAssets function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodeConvertToAssets } "thirdweb/extensions/erc4626";
 * const result = encodeConvertToAssets({
 *  shares: ...,
 * });
 * ```
 */
export declare function encodeConvertToAssets(options: ConvertToAssetsParams): `0x07a2d13a${string}`;
/**
 * Decodes the result of the convertToAssets function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4626
 * @example
 * ```ts
 * import { decodeConvertToAssetsResult } from "thirdweb/extensions/erc4626";
 * const result = decodeConvertToAssetsResult("...");
 * ```
 */
export declare function decodeConvertToAssetsResult(result: Hex): bigint;
/**
 * Calls the "convertToAssets" function on the contract.
 * @param options - The options for the convertToAssets function.
 * @returns The parsed result of the function call.
 * @extension ERC4626
 * @example
 * ```ts
 * import { convertToAssets } from "thirdweb/extensions/erc4626";
 *
 * const result = await convertToAssets({
 *  contract,
 *  shares: ...,
 * });
 *
 * ```
 */
export declare function convertToAssets(options: BaseTransactionOptions<ConvertToAssetsParams>): Promise<bigint>;
//# sourceMappingURL=convertToAssets.d.ts.map