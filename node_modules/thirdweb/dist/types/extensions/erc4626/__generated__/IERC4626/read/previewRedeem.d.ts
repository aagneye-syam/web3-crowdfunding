import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "previewRedeem" function.
 */
export type PreviewRedeemParams = {
    shares: AbiParameterToPrimitiveType<{
        name: "shares";
        type: "uint256";
        internalType: "uint256";
    }>;
};
export declare const FN_SELECTOR: "0x4cdad506";
/**
 * Checks if the `previewRedeem` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `previewRedeem` method is supported.
 * @extension ERC4626
 * @example
 * ```ts
 * import { isPreviewRedeemSupported } from "thirdweb/extensions/erc4626";
 *
 * const supported = await isPreviewRedeemSupported(contract);
 * ```
 */
export declare function isPreviewRedeemSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "previewRedeem" function.
 * @param options - The options for the previewRedeem function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodePreviewRedeemParams } "thirdweb/extensions/erc4626";
 * const result = encodePreviewRedeemParams({
 *  shares: ...,
 * });
 * ```
 */
export declare function encodePreviewRedeemParams(options: PreviewRedeemParams): `0x${string}`;
/**
 * Encodes the "previewRedeem" function into a Hex string with its parameters.
 * @param options - The options for the previewRedeem function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodePreviewRedeem } "thirdweb/extensions/erc4626";
 * const result = encodePreviewRedeem({
 *  shares: ...,
 * });
 * ```
 */
export declare function encodePreviewRedeem(options: PreviewRedeemParams): `0x4cdad506${string}`;
/**
 * Decodes the result of the previewRedeem function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4626
 * @example
 * ```ts
 * import { decodePreviewRedeemResult } from "thirdweb/extensions/erc4626";
 * const result = decodePreviewRedeemResult("...");
 * ```
 */
export declare function decodePreviewRedeemResult(result: Hex): bigint;
/**
 * Calls the "previewRedeem" function on the contract.
 * @param options - The options for the previewRedeem function.
 * @returns The parsed result of the function call.
 * @extension ERC4626
 * @example
 * ```ts
 * import { previewRedeem } from "thirdweb/extensions/erc4626";
 *
 * const result = await previewRedeem({
 *  contract,
 *  shares: ...,
 * });
 *
 * ```
 */
export declare function previewRedeem(options: BaseTransactionOptions<PreviewRedeemParams>): Promise<bigint>;
//# sourceMappingURL=previewRedeem.d.ts.map