import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "previewWithdraw" function.
 */
export type PreviewWithdrawParams = {
    assets: AbiParameterToPrimitiveType<{
        name: "assets";
        type: "uint256";
        internalType: "uint256";
    }>;
};
export declare const FN_SELECTOR: "0x0a28a477";
/**
 * Checks if the `previewWithdraw` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `previewWithdraw` method is supported.
 * @extension ERC4626
 * @example
 * ```ts
 * import { isPreviewWithdrawSupported } from "thirdweb/extensions/erc4626";
 *
 * const supported = await isPreviewWithdrawSupported(contract);
 * ```
 */
export declare function isPreviewWithdrawSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "previewWithdraw" function.
 * @param options - The options for the previewWithdraw function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodePreviewWithdrawParams } "thirdweb/extensions/erc4626";
 * const result = encodePreviewWithdrawParams({
 *  assets: ...,
 * });
 * ```
 */
export declare function encodePreviewWithdrawParams(options: PreviewWithdrawParams): `0x${string}`;
/**
 * Encodes the "previewWithdraw" function into a Hex string with its parameters.
 * @param options - The options for the previewWithdraw function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodePreviewWithdraw } "thirdweb/extensions/erc4626";
 * const result = encodePreviewWithdraw({
 *  assets: ...,
 * });
 * ```
 */
export declare function encodePreviewWithdraw(options: PreviewWithdrawParams): `0x0a28a477${string}`;
/**
 * Decodes the result of the previewWithdraw function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4626
 * @example
 * ```ts
 * import { decodePreviewWithdrawResult } from "thirdweb/extensions/erc4626";
 * const result = decodePreviewWithdrawResult("...");
 * ```
 */
export declare function decodePreviewWithdrawResult(result: Hex): bigint;
/**
 * Calls the "previewWithdraw" function on the contract.
 * @param options - The options for the previewWithdraw function.
 * @returns The parsed result of the function call.
 * @extension ERC4626
 * @example
 * ```ts
 * import { previewWithdraw } from "thirdweb/extensions/erc4626";
 *
 * const result = await previewWithdraw({
 *  contract,
 *  assets: ...,
 * });
 *
 * ```
 */
export declare function previewWithdraw(options: BaseTransactionOptions<PreviewWithdrawParams>): Promise<bigint>;
//# sourceMappingURL=previewWithdraw.d.ts.map