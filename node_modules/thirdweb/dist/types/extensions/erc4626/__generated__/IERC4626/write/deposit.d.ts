import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "deposit" function.
 */
export type DepositParams = WithOverrides<{
    assets: AbiParameterToPrimitiveType<{
        name: "assets";
        type: "uint256";
        internalType: "uint256";
    }>;
    receiver: AbiParameterToPrimitiveType<{
        name: "receiver";
        type: "address";
        internalType: "address";
    }>;
}>;
export declare const FN_SELECTOR: "0x6e553f65";
/**
 * Checks if the `deposit` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `deposit` method is supported.
 * @extension ERC4626
 * @example
 * ```ts
 * import { isDepositSupported } from "thirdweb/extensions/erc4626";
 *
 * const supported = await isDepositSupported(contract);
 * ```
 */
export declare function isDepositSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "deposit" function.
 * @param options - The options for the deposit function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodeDepositParams } "thirdweb/extensions/erc4626";
 * const result = encodeDepositParams({
 *  assets: ...,
 *  receiver: ...,
 * });
 * ```
 */
export declare function encodeDepositParams(options: DepositParams): `0x${string}`;
/**
 * Encodes the "deposit" function into a Hex string with its parameters.
 * @param options - The options for the deposit function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodeDeposit } "thirdweb/extensions/erc4626";
 * const result = encodeDeposit({
 *  assets: ...,
 *  receiver: ...,
 * });
 * ```
 */
export declare function encodeDeposit(options: DepositParams): `0x6e553f65${string}`;
/**
 * Prepares a transaction to call the "deposit" function on the contract.
 * @param options - The options for the "deposit" function.
 * @returns A prepared transaction object.
 * @extension ERC4626
 * @example
 * ```ts
 * import { deposit } from "thirdweb/extensions/erc4626";
 *
 * const transaction = deposit({
 *  contract,
 *  assets: ...,
 *  receiver: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function deposit(options: BaseTransactionOptions<DepositParams | {
    asyncParams: () => Promise<DepositParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=deposit.d.ts.map