import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "mint" function.
 */
export type MintParams = WithOverrides<{
    shares: AbiParameterToPrimitiveType<{
        name: "shares";
        type: "uint256";
        internalType: "uint256";
    }>;
    receiver: AbiParameterToPrimitiveType<{
        name: "receiver";
        type: "address";
        internalType: "address";
    }>;
}>;
export declare const FN_SELECTOR: "0x94bf804d";
/**
 * Checks if the `mint` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `mint` method is supported.
 * @extension ERC4626
 * @example
 * ```ts
 * import { isMintSupported } from "thirdweb/extensions/erc4626";
 *
 * const supported = await isMintSupported(contract);
 * ```
 */
export declare function isMintSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "mint" function.
 * @param options - The options for the mint function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodeMintParams } "thirdweb/extensions/erc4626";
 * const result = encodeMintParams({
 *  shares: ...,
 *  receiver: ...,
 * });
 * ```
 */
export declare function encodeMintParams(options: MintParams): `0x${string}`;
/**
 * Encodes the "mint" function into a Hex string with its parameters.
 * @param options - The options for the mint function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodeMint } "thirdweb/extensions/erc4626";
 * const result = encodeMint({
 *  shares: ...,
 *  receiver: ...,
 * });
 * ```
 */
export declare function encodeMint(options: MintParams): `0x94bf804d${string}`;
/**
 * Prepares a transaction to call the "mint" function on the contract.
 * @param options - The options for the "mint" function.
 * @returns A prepared transaction object.
 * @extension ERC4626
 * @example
 * ```ts
 * import { mint } from "thirdweb/extensions/erc4626";
 *
 * const transaction = mint({
 *  contract,
 *  shares: ...,
 *  receiver: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function mint(options: BaseTransactionOptions<MintParams | {
    asyncParams: () => Promise<MintParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=mint.d.ts.map