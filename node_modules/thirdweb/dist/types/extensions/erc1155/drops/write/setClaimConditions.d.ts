import type { BaseTransactionOptions } from "../../../../transaction/types.js";
import type { ClaimConditionsInput } from "../../../../utils/extensions/drops/types.js";
export type SetClaimConditionsParams = {
    tokenId: bigint;
    phases: ClaimConditionsInput[];
    resetClaimEligibility?: boolean;
};
/**
 * Set the claim conditions for a ERC1155 drop
 * @param options
 * @returns the prepared transaction
 * @extension ERC1155
 * @example
 * ```ts
 * import { setClaimConditions } from "thirdweb/extensions/erc1155";
 *
 * const tx = setClaimConditions({
 *  contract,
 *  tokenId: 0n,
 *  phases: [
 *    {
 *      maxClaimableSupply: 100n,
 *      maxClaimablePerWallet: 1n,
 *      currencyAddress: "0x...",
 *      price: 0.1,
 *      startTime: new Date(),
 *    },
 *   ],
 * });
 * ```
 */
export declare function setClaimConditions(options: BaseTransactionOptions<SetClaimConditionsParams>): import("../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=setClaimConditions.d.ts.map