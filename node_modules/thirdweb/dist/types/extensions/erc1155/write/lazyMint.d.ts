import type { FileOrBufferOrString } from "../../../storage/upload/types.js";
import type { BaseTransactionOptions } from "../../../transaction/types.js";
import type { Prettify } from "../../../utils/type-utils.js";
/**
 * Represents the input data for creating an NFT (Non-Fungible Token).
 */
type NFTInput = Prettify<{
    name?: string;
    description?: string;
    image?: FileOrBufferOrString;
    animation_url?: FileOrBufferOrString;
    external_url?: FileOrBufferOrString;
    background_color?: string;
    properties?: Record<string, unknown> | Array<Record<string, unknown>>;
} & Record<string, unknown>>;
export type LazyMintParams = {
    nfts: (NFTInput | string)[];
};
/**
 * Lazily mints ERC1155 tokens.
 * @param options - The options for the lazy minting process.
 * @returns A promise that resolves to the prepared contract call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { lazyMint } from "thirdweb/extensions/erc1155";
 *
 * const tx = await lazyMint({
 * contract,
 * nfts: [
 *    {
 *      name: "My NFT",
 *      description: "This is my NFT",
 *      image: "https://example.com/image.png",
 *    },
 *  ],
 * });
 * ```
 */
export declare function lazyMint(options: BaseTransactionOptions<LazyMintParams>): import("../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
export {};
//# sourceMappingURL=lazyMint.d.ts.map