import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "openPack" function.
 */
export type OpenPackParams = WithOverrides<{
    packId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "packId";
    }>;
    amountToOpen: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "amountToOpen";
    }>;
}>;
export declare const FN_SELECTOR: "0x914e126a";
/**
 * Checks if the `openPack` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `openPack` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isOpenPackSupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = await isOpenPackSupported(contract);
 * ```
 */
export declare function isOpenPackSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "openPack" function.
 * @param options - The options for the openPack function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeOpenPackParams } "thirdweb/extensions/erc1155";
 * const result = encodeOpenPackParams({
 *  packId: ...,
 *  amountToOpen: ...,
 * });
 * ```
 */
export declare function encodeOpenPackParams(options: OpenPackParams): `0x${string}`;
/**
 * Encodes the "openPack" function into a Hex string with its parameters.
 * @param options - The options for the openPack function.
 * @returns The encoded hexadecimal string.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeOpenPack } "thirdweb/extensions/erc1155";
 * const result = encodeOpenPack({
 *  packId: ...,
 *  amountToOpen: ...,
 * });
 * ```
 */
export declare function encodeOpenPack(options: OpenPackParams): `0x914e126a${string}`;
/**
 * Prepares a transaction to call the "openPack" function on the contract.
 * @param options - The options for the "openPack" function.
 * @returns A prepared transaction object.
 * @extension ERC1155
 * @example
 * ```ts
 * import { openPack } from "thirdweb/extensions/erc1155";
 *
 * const transaction = openPack({
 *  contract,
 *  packId: ...,
 *  amountToOpen: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function openPack(options: BaseTransactionOptions<OpenPackParams | {
    asyncParams: () => Promise<OpenPackParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=openPack.d.ts.map