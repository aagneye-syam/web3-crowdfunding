import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "uri" function.
 */
export type UriParams = {
    tokenId: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "tokenId";
    }>;
};
export declare const FN_SELECTOR: "0x0e89341c";
/**
 * Checks if the `uri` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `uri` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isUriSupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = await isUriSupported(contract);
 * ```
 */
export declare function isUriSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "uri" function.
 * @param options - The options for the uri function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeUriParams } "thirdweb/extensions/erc1155";
 * const result = encodeUriParams({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeUriParams(options: UriParams): `0x${string}`;
/**
 * Encodes the "uri" function into a Hex string with its parameters.
 * @param options - The options for the uri function.
 * @returns The encoded hexadecimal string.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeUri } "thirdweb/extensions/erc1155";
 * const result = encodeUri({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeUri(options: UriParams): `0x0e89341c${string}`;
/**
 * Decodes the result of the uri function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```ts
 * import { decodeUriResult } from "thirdweb/extensions/erc1155";
 * const result = decodeUriResult("...");
 * ```
 */
export declare function decodeUriResult(result: Hex): string;
/**
 * Calls the "uri" function on the contract.
 * @param options - The options for the uri function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { uri } from "thirdweb/extensions/erc1155";
 *
 * const result = await uri({
 *  contract,
 *  tokenId: ...,
 * });
 *
 * ```
 */
export declare function uri(options: BaseTransactionOptions<UriParams>): Promise<string>;
//# sourceMappingURL=uri.d.ts.map