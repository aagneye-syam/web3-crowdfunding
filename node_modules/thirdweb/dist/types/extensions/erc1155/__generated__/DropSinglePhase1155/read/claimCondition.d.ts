import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "claimCondition" function.
 */
export type ClaimConditionParams = {
    tokenId: AbiParameterToPrimitiveType<{
        name: "_tokenId";
        type: "uint256";
        internalType: "uint256";
    }>;
};
export declare const FN_SELECTOR: "0xe9703d25";
/**
 * Checks if the `claimCondition` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `claimCondition` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isClaimConditionSupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = await isClaimConditionSupported(contract);
 * ```
 */
export declare function isClaimConditionSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "claimCondition" function.
 * @param options - The options for the claimCondition function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeClaimConditionParams } "thirdweb/extensions/erc1155";
 * const result = encodeClaimConditionParams({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeClaimConditionParams(options: ClaimConditionParams): `0x${string}`;
/**
 * Encodes the "claimCondition" function into a Hex string with its parameters.
 * @param options - The options for the claimCondition function.
 * @returns The encoded hexadecimal string.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeClaimCondition } "thirdweb/extensions/erc1155";
 * const result = encodeClaimCondition({
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeClaimCondition(options: ClaimConditionParams): `0xe9703d25${string}`;
/**
 * Decodes the result of the claimCondition function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```ts
 * import { decodeClaimConditionResult } from "thirdweb/extensions/erc1155";
 * const result = decodeClaimConditionResult("...");
 * ```
 */
export declare function decodeClaimConditionResult(result: Hex): readonly [bigint, bigint, bigint, bigint, `0x${string}`, bigint, string, string];
/**
 * Calls the "claimCondition" function on the contract.
 * @param options - The options for the claimCondition function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { claimCondition } from "thirdweb/extensions/erc1155";
 *
 * const result = await claimCondition({
 *  contract,
 *  tokenId: ...,
 * });
 *
 * ```
 */
export declare function claimCondition(options: BaseTransactionOptions<ClaimConditionParams>): Promise<readonly [bigint, bigint, bigint, bigint, `0x${string}`, bigint, string, string]>;
//# sourceMappingURL=claimCondition.d.ts.map