import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0xfc0c546a";
/**
 * Checks if the `token` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `token` method is supported.
 * @extension ERC6551
 * @example
 * ```ts
 * import { isTokenSupported } from "thirdweb/extensions/erc6551";
 *
 * const supported = await isTokenSupported(contract);
 * ```
 */
export declare function isTokenSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the token function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC6551
 * @example
 * ```ts
 * import { decodeTokenResult } from "thirdweb/extensions/erc6551";
 * const result = decodeTokenResult("...");
 * ```
 */
export declare function decodeTokenResult(result: Hex): readonly [bigint, string, bigint];
/**
 * Calls the "token" function on the contract.
 * @param options - The options for the token function.
 * @returns The parsed result of the function call.
 * @extension ERC6551
 * @example
 * ```ts
 * import { token } from "thirdweb/extensions/erc6551";
 *
 * const result = await token({
 *  contract,
 * });
 *
 * ```
 */
export declare function token(options: BaseTransactionOptions): Promise<readonly [bigint, string, bigint]>;
//# sourceMappingURL=token.d.ts.map