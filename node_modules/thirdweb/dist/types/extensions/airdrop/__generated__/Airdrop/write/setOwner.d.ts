import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "setOwner" function.
 */
export type SetOwnerParams = WithOverrides<{
    newOwner: AbiParameterToPrimitiveType<{
        name: "_newOwner";
        type: "address";
        internalType: "address";
    }>;
}>;
export declare const FN_SELECTOR: "0x13af4035";
/**
 * Checks if the `setOwner` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `setOwner` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isSetOwnerSupported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isSetOwnerSupported(contract);
 * ```
 */
export declare function isSetOwnerSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "setOwner" function.
 * @param options - The options for the setOwner function.
 * @returns The encoded ABI parameters.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeSetOwnerParams } "thirdweb/extensions/airdrop";
 * const result = encodeSetOwnerParams({
 *  newOwner: ...,
 * });
 * ```
 */
export declare function encodeSetOwnerParams(options: SetOwnerParams): `0x${string}`;
/**
 * Encodes the "setOwner" function into a Hex string with its parameters.
 * @param options - The options for the setOwner function.
 * @returns The encoded hexadecimal string.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeSetOwner } "thirdweb/extensions/airdrop";
 * const result = encodeSetOwner({
 *  newOwner: ...,
 * });
 * ```
 */
export declare function encodeSetOwner(options: SetOwnerParams): `0x13af4035${string}`;
/**
 * Prepares a transaction to call the "setOwner" function on the contract.
 * @param options - The options for the "setOwner" function.
 * @returns A prepared transaction object.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { setOwner } from "thirdweb/extensions/airdrop";
 *
 * const transaction = setOwner({
 *  contract,
 *  newOwner: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setOwner(options: BaseTransactionOptions<SetOwnerParams | {
    asyncParams: () => Promise<SetOwnerParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=setOwner.d.ts.map