import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "airdropERC1155" function.
 */
export type AirdropERC1155Params = WithOverrides<{
    tokenAddress: AbiParameterToPrimitiveType<{
        name: "_tokenAddress";
        type: "address";
        internalType: "address";
    }>;
    contents: AbiParameterToPrimitiveType<{
        name: "_contents";
        type: "tuple[]";
        internalType: "struct Airdrop.AirdropContentERC1155[]";
        components: [
            {
                name: "recipient";
                type: "address";
                internalType: "address";
            },
            {
                name: "tokenId";
                type: "uint256";
                internalType: "uint256";
            },
            {
                name: "amount";
                type: "uint256";
                internalType: "uint256";
            }
        ];
    }>;
}>;
export declare const FN_SELECTOR: "0x2d89e38b";
/**
 * Checks if the `airdropERC1155` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `airdropERC1155` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isAirdropERC1155Supported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isAirdropERC1155Supported(contract);
 * ```
 */
export declare function isAirdropERC1155Supported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "airdropERC1155" function.
 * @param options - The options for the airdropERC1155 function.
 * @returns The encoded ABI parameters.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeAirdropERC1155Params } "thirdweb/extensions/airdrop";
 * const result = encodeAirdropERC1155Params({
 *  tokenAddress: ...,
 *  contents: ...,
 * });
 * ```
 */
export declare function encodeAirdropERC1155Params(options: AirdropERC1155Params): `0x${string}`;
/**
 * Encodes the "airdropERC1155" function into a Hex string with its parameters.
 * @param options - The options for the airdropERC1155 function.
 * @returns The encoded hexadecimal string.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeAirdropERC1155 } "thirdweb/extensions/airdrop";
 * const result = encodeAirdropERC1155({
 *  tokenAddress: ...,
 *  contents: ...,
 * });
 * ```
 */
export declare function encodeAirdropERC1155(options: AirdropERC1155Params): `0x2d89e38b${string}`;
/**
 * Prepares a transaction to call the "airdropERC1155" function on the contract.
 * @param options - The options for the "airdropERC1155" function.
 * @returns A prepared transaction object.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { airdropERC1155 } from "thirdweb/extensions/airdrop";
 *
 * const transaction = airdropERC1155({
 *  contract,
 *  tokenAddress: ...,
 *  contents: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function airdropERC1155(options: BaseTransactionOptions<AirdropERC1155Params | {
    asyncParams: () => Promise<AirdropERC1155Params>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=airdropERC1155.d.ts.map