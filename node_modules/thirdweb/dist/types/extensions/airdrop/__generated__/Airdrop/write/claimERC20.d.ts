import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "claimERC20" function.
 */
export type ClaimERC20Params = WithOverrides<{
    token: AbiParameterToPrimitiveType<{
        name: "_token";
        type: "address";
        internalType: "address";
    }>;
    receiver: AbiParameterToPrimitiveType<{
        name: "_receiver";
        type: "address";
        internalType: "address";
    }>;
    quantity: AbiParameterToPrimitiveType<{
        name: "_quantity";
        type: "uint256";
        internalType: "uint256";
    }>;
    proofs: AbiParameterToPrimitiveType<{
        name: "_proofs";
        type: "bytes32[]";
        internalType: "bytes32[]";
    }>;
}>;
export declare const FN_SELECTOR: "0xecf3d3d4";
/**
 * Checks if the `claimERC20` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `claimERC20` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isClaimERC20Supported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isClaimERC20Supported(contract);
 * ```
 */
export declare function isClaimERC20Supported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "claimERC20" function.
 * @param options - The options for the claimERC20 function.
 * @returns The encoded ABI parameters.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeClaimERC20Params } "thirdweb/extensions/airdrop";
 * const result = encodeClaimERC20Params({
 *  token: ...,
 *  receiver: ...,
 *  quantity: ...,
 *  proofs: ...,
 * });
 * ```
 */
export declare function encodeClaimERC20Params(options: ClaimERC20Params): `0x${string}`;
/**
 * Encodes the "claimERC20" function into a Hex string with its parameters.
 * @param options - The options for the claimERC20 function.
 * @returns The encoded hexadecimal string.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeClaimERC20 } "thirdweb/extensions/airdrop";
 * const result = encodeClaimERC20({
 *  token: ...,
 *  receiver: ...,
 *  quantity: ...,
 *  proofs: ...,
 * });
 * ```
 */
export declare function encodeClaimERC20(options: ClaimERC20Params): `0xecf3d3d4${string}`;
/**
 * Prepares a transaction to call the "claimERC20" function on the contract.
 * @param options - The options for the "claimERC20" function.
 * @returns A prepared transaction object.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { claimERC20 } from "thirdweb/extensions/airdrop";
 *
 * const transaction = claimERC20({
 *  contract,
 *  token: ...,
 *  receiver: ...,
 *  quantity: ...,
 *  proofs: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function claimERC20(options: BaseTransactionOptions<ClaimERC20Params | {
    asyncParams: () => Promise<ClaimERC20Params>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=claimERC20.d.ts.map