import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0x84b0196e";
/**
 * Checks if the `eip712Domain` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `eip712Domain` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isEip712DomainSupported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isEip712DomainSupported(contract);
 * ```
 */
export declare function isEip712DomainSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the eip712Domain function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { decodeEip712DomainResult } from "thirdweb/extensions/airdrop";
 * const result = decodeEip712DomainResult("...");
 * ```
 */
export declare function decodeEip712DomainResult(result: Hex): readonly [`0x${string}`, string, string, bigint, string, `0x${string}`, readonly bigint[]];
/**
 * Calls the "eip712Domain" function on the contract.
 * @param options - The options for the eip712Domain function.
 * @returns The parsed result of the function call.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { eip712Domain } from "thirdweb/extensions/airdrop";
 *
 * const result = await eip712Domain({
 *  contract,
 * });
 *
 * ```
 */
export declare function eip712Domain(options: BaseTransactionOptions): Promise<readonly [`0x${string}`, string, string, bigint, string, `0x${string}`, readonly bigint[]]>;
//# sourceMappingURL=eip712Domain.d.ts.map