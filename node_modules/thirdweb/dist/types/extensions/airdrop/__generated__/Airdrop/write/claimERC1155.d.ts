import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "claimERC1155" function.
 */
export type ClaimERC1155Params = WithOverrides<{
    token: AbiParameterToPrimitiveType<{
        name: "_token";
        type: "address";
        internalType: "address";
    }>;
    receiver: AbiParameterToPrimitiveType<{
        name: "_receiver";
        type: "address";
        internalType: "address";
    }>;
    tokenId: AbiParameterToPrimitiveType<{
        name: "_tokenId";
        type: "uint256";
        internalType: "uint256";
    }>;
    quantity: AbiParameterToPrimitiveType<{
        name: "_quantity";
        type: "uint256";
        internalType: "uint256";
    }>;
    proofs: AbiParameterToPrimitiveType<{
        name: "_proofs";
        type: "bytes32[]";
        internalType: "bytes32[]";
    }>;
}>;
export declare const FN_SELECTOR: "0xc6fa26ab";
/**
 * Checks if the `claimERC1155` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `claimERC1155` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isClaimERC1155Supported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isClaimERC1155Supported(contract);
 * ```
 */
export declare function isClaimERC1155Supported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "claimERC1155" function.
 * @param options - The options for the claimERC1155 function.
 * @returns The encoded ABI parameters.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeClaimERC1155Params } "thirdweb/extensions/airdrop";
 * const result = encodeClaimERC1155Params({
 *  token: ...,
 *  receiver: ...,
 *  tokenId: ...,
 *  quantity: ...,
 *  proofs: ...,
 * });
 * ```
 */
export declare function encodeClaimERC1155Params(options: ClaimERC1155Params): `0x${string}`;
/**
 * Encodes the "claimERC1155" function into a Hex string with its parameters.
 * @param options - The options for the claimERC1155 function.
 * @returns The encoded hexadecimal string.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeClaimERC1155 } "thirdweb/extensions/airdrop";
 * const result = encodeClaimERC1155({
 *  token: ...,
 *  receiver: ...,
 *  tokenId: ...,
 *  quantity: ...,
 *  proofs: ...,
 * });
 * ```
 */
export declare function encodeClaimERC1155(options: ClaimERC1155Params): `0xc6fa26ab${string}`;
/**
 * Prepares a transaction to call the "claimERC1155" function on the contract.
 * @param options - The options for the "claimERC1155" function.
 * @returns A prepared transaction object.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { claimERC1155 } from "thirdweb/extensions/airdrop";
 *
 * const transaction = claimERC1155({
 *  contract,
 *  token: ...,
 *  receiver: ...,
 *  tokenId: ...,
 *  quantity: ...,
 *  proofs: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function claimERC1155(options: BaseTransactionOptions<ClaimERC1155Params | {
    asyncParams: () => Promise<ClaimERC1155Params>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=claimERC1155.d.ts.map