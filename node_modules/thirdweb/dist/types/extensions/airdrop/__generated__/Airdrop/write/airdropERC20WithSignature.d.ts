import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "airdropERC20WithSignature" function.
 */
export type AirdropERC20WithSignatureParams = WithOverrides<{
    req: AbiParameterToPrimitiveType<{
        name: "req";
        type: "tuple";
        internalType: "struct Airdrop.AirdropRequestERC20";
        components: [
            {
                name: "uid";
                type: "bytes32";
                internalType: "bytes32";
            },
            {
                name: "tokenAddress";
                type: "address";
                internalType: "address";
            },
            {
                name: "expirationTimestamp";
                type: "uint256";
                internalType: "uint256";
            },
            {
                name: "contents";
                type: "tuple[]";
                internalType: "struct Airdrop.AirdropContentERC20[]";
                components: [
                    {
                        name: "recipient";
                        type: "address";
                        internalType: "address";
                    },
                    {
                        name: "amount";
                        type: "uint256";
                        internalType: "uint256";
                    }
                ];
            }
        ];
    }>;
    signature: AbiParameterToPrimitiveType<{
        name: "signature";
        type: "bytes";
        internalType: "bytes";
    }>;
}>;
export declare const FN_SELECTOR: "0xaaba07f6";
/**
 * Checks if the `airdropERC20WithSignature` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `airdropERC20WithSignature` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isAirdropERC20WithSignatureSupported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isAirdropERC20WithSignatureSupported(contract);
 * ```
 */
export declare function isAirdropERC20WithSignatureSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "airdropERC20WithSignature" function.
 * @param options - The options for the airdropERC20WithSignature function.
 * @returns The encoded ABI parameters.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeAirdropERC20WithSignatureParams } "thirdweb/extensions/airdrop";
 * const result = encodeAirdropERC20WithSignatureParams({
 *  req: ...,
 *  signature: ...,
 * });
 * ```
 */
export declare function encodeAirdropERC20WithSignatureParams(options: AirdropERC20WithSignatureParams): `0x${string}`;
/**
 * Encodes the "airdropERC20WithSignature" function into a Hex string with its parameters.
 * @param options - The options for the airdropERC20WithSignature function.
 * @returns The encoded hexadecimal string.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeAirdropERC20WithSignature } "thirdweb/extensions/airdrop";
 * const result = encodeAirdropERC20WithSignature({
 *  req: ...,
 *  signature: ...,
 * });
 * ```
 */
export declare function encodeAirdropERC20WithSignature(options: AirdropERC20WithSignatureParams): `0xaaba07f6${string}`;
/**
 * Prepares a transaction to call the "airdropERC20WithSignature" function on the contract.
 * @param options - The options for the "airdropERC20WithSignature" function.
 * @returns A prepared transaction object.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { airdropERC20WithSignature } from "thirdweb/extensions/airdrop";
 *
 * const transaction = airdropERC20WithSignature({
 *  contract,
 *  req: ...,
 *  signature: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function airdropERC20WithSignature(options: BaseTransactionOptions<AirdropERC20WithSignatureParams | {
    asyncParams: () => Promise<AirdropERC20WithSignatureParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=airdropERC20WithSignature.d.ts.map