import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "isClaimed" function.
 */
export type IsClaimedParams = {
    receiver: AbiParameterToPrimitiveType<{
        name: "_receiver";
        type: "address";
        internalType: "address";
    }>;
    token: AbiParameterToPrimitiveType<{
        name: "_token";
        type: "address";
        internalType: "address";
    }>;
    tokenId: AbiParameterToPrimitiveType<{
        name: "_tokenId";
        type: "uint256";
        internalType: "uint256";
    }>;
};
export declare const FN_SELECTOR: "0xd12acf73";
/**
 * Checks if the `isClaimed` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `isClaimed` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isIsClaimedSupported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isIsClaimedSupported(contract);
 * ```
 */
export declare function isIsClaimedSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "isClaimed" function.
 * @param options - The options for the isClaimed function.
 * @returns The encoded ABI parameters.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeIsClaimedParams } "thirdweb/extensions/airdrop";
 * const result = encodeIsClaimedParams({
 *  receiver: ...,
 *  token: ...,
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeIsClaimedParams(options: IsClaimedParams): `0x${string}`;
/**
 * Encodes the "isClaimed" function into a Hex string with its parameters.
 * @param options - The options for the isClaimed function.
 * @returns The encoded hexadecimal string.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeIsClaimed } "thirdweb/extensions/airdrop";
 * const result = encodeIsClaimed({
 *  receiver: ...,
 *  token: ...,
 *  tokenId: ...,
 * });
 * ```
 */
export declare function encodeIsClaimed(options: IsClaimedParams): `0xd12acf73${string}`;
/**
 * Decodes the result of the isClaimed function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { decodeIsClaimedResult } from "thirdweb/extensions/airdrop";
 * const result = decodeIsClaimedResult("...");
 * ```
 */
export declare function decodeIsClaimedResult(result: Hex): boolean;
/**
 * Calls the "isClaimed" function on the contract.
 * @param options - The options for the isClaimed function.
 * @returns The parsed result of the function call.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isClaimed } from "thirdweb/extensions/airdrop";
 *
 * const result = await isClaimed({
 *  contract,
 *  receiver: ...,
 *  token: ...,
 *  tokenId: ...,
 * });
 *
 * ```
 */
export declare function isClaimed(options: BaseTransactionOptions<IsClaimedParams>): Promise<boolean>;
//# sourceMappingURL=isClaimed.d.ts.map