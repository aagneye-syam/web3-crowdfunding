import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "airdropNativeToken" function.
 */
export type AirdropNativeTokenParams = WithOverrides<{
    contents: AbiParameterToPrimitiveType<{
        name: "_contents";
        type: "tuple[]";
        internalType: "struct Airdrop.AirdropContentERC20[]";
        components: [
            {
                name: "recipient";
                type: "address";
                internalType: "address";
            },
            {
                name: "amount";
                type: "uint256";
                internalType: "uint256";
            }
        ];
    }>;
}>;
export declare const FN_SELECTOR: "0x0d5818f7";
/**
 * Checks if the `airdropNativeToken` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `airdropNativeToken` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isAirdropNativeTokenSupported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isAirdropNativeTokenSupported(contract);
 * ```
 */
export declare function isAirdropNativeTokenSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "airdropNativeToken" function.
 * @param options - The options for the airdropNativeToken function.
 * @returns The encoded ABI parameters.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeAirdropNativeTokenParams } "thirdweb/extensions/airdrop";
 * const result = encodeAirdropNativeTokenParams({
 *  contents: ...,
 * });
 * ```
 */
export declare function encodeAirdropNativeTokenParams(options: AirdropNativeTokenParams): `0x${string}`;
/**
 * Encodes the "airdropNativeToken" function into a Hex string with its parameters.
 * @param options - The options for the airdropNativeToken function.
 * @returns The encoded hexadecimal string.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeAirdropNativeToken } "thirdweb/extensions/airdrop";
 * const result = encodeAirdropNativeToken({
 *  contents: ...,
 * });
 * ```
 */
export declare function encodeAirdropNativeToken(options: AirdropNativeTokenParams): `0x0d5818f7${string}`;
/**
 * Prepares a transaction to call the "airdropNativeToken" function on the contract.
 * @param options - The options for the "airdropNativeToken" function.
 * @returns A prepared transaction object.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { airdropNativeToken } from "thirdweb/extensions/airdrop";
 *
 * const transaction = airdropNativeToken({
 *  contract,
 *  contents: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function airdropNativeToken(options: BaseTransactionOptions<AirdropNativeTokenParams | {
    asyncParams: () => Promise<AirdropNativeTokenParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=airdropNativeToken.d.ts.map