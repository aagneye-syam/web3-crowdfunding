import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "setMerkleRoot" function.
 */
export type SetMerkleRootParams = WithOverrides<{
    token: AbiParameterToPrimitiveType<{
        name: "_token";
        type: "address";
        internalType: "address";
    }>;
    tokenMerkleRoot: AbiParameterToPrimitiveType<{
        name: "_tokenMerkleRoot";
        type: "bytes32";
        internalType: "bytes32";
    }>;
    resetClaimStatus: AbiParameterToPrimitiveType<{
        name: "_resetClaimStatus";
        type: "bool";
        internalType: "bool";
    }>;
}>;
export declare const FN_SELECTOR: "0x8259a87b";
/**
 * Checks if the `setMerkleRoot` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `setMerkleRoot` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isSetMerkleRootSupported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isSetMerkleRootSupported(contract);
 * ```
 */
export declare function isSetMerkleRootSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "setMerkleRoot" function.
 * @param options - The options for the setMerkleRoot function.
 * @returns The encoded ABI parameters.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeSetMerkleRootParams } "thirdweb/extensions/airdrop";
 * const result = encodeSetMerkleRootParams({
 *  token: ...,
 *  tokenMerkleRoot: ...,
 *  resetClaimStatus: ...,
 * });
 * ```
 */
export declare function encodeSetMerkleRootParams(options: SetMerkleRootParams): `0x${string}`;
/**
 * Encodes the "setMerkleRoot" function into a Hex string with its parameters.
 * @param options - The options for the setMerkleRoot function.
 * @returns The encoded hexadecimal string.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeSetMerkleRoot } "thirdweb/extensions/airdrop";
 * const result = encodeSetMerkleRoot({
 *  token: ...,
 *  tokenMerkleRoot: ...,
 *  resetClaimStatus: ...,
 * });
 * ```
 */
export declare function encodeSetMerkleRoot(options: SetMerkleRootParams): `0x8259a87b${string}`;
/**
 * Prepares a transaction to call the "setMerkleRoot" function on the contract.
 * @param options - The options for the "setMerkleRoot" function.
 * @returns A prepared transaction object.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { setMerkleRoot } from "thirdweb/extensions/airdrop";
 *
 * const transaction = setMerkleRoot({
 *  contract,
 *  token: ...,
 *  tokenMerkleRoot: ...,
 *  resetClaimStatus: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setMerkleRoot(options: BaseTransactionOptions<SetMerkleRootParams | {
    asyncParams: () => Promise<SetMerkleRootParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=setMerkleRoot.d.ts.map