import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "setApprovalForAll" function.
 */
export type SetApprovalForAllParams = WithOverrides<{
    operator: AbiParameterToPrimitiveType<{
        type: "address";
        name: "operator";
    }>;
    approved: AbiParameterToPrimitiveType<{
        type: "bool";
        name: "_approved";
    }>;
}>;
export declare const FN_SELECTOR: "0xa22cb465";
/**
 * Checks if the `setApprovalForAll` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `setApprovalForAll` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isSetApprovalForAllSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = await isSetApprovalForAllSupported(contract);
 * ```
 */
export declare function isSetApprovalForAllSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "setApprovalForAll" function.
 * @param options - The options for the setApprovalForAll function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeSetApprovalForAllParams } "thirdweb/extensions/erc721";
 * const result = encodeSetApprovalForAllParams({
 *  operator: ...,
 *  approved: ...,
 * });
 * ```
 */
export declare function encodeSetApprovalForAllParams(options: SetApprovalForAllParams): `0x${string}`;
/**
 * Encodes the "setApprovalForAll" function into a Hex string with its parameters.
 * @param options - The options for the setApprovalForAll function.
 * @returns The encoded hexadecimal string.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeSetApprovalForAll } "thirdweb/extensions/erc721";
 * const result = encodeSetApprovalForAll({
 *  operator: ...,
 *  approved: ...,
 * });
 * ```
 */
export declare function encodeSetApprovalForAll(options: SetApprovalForAllParams): `0xa22cb465${string}`;
/**
 * Prepares a transaction to call the "setApprovalForAll" function on the contract.
 * @param options - The options for the "setApprovalForAll" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```ts
 * import { setApprovalForAll } from "thirdweb/extensions/erc721";
 *
 * const transaction = setApprovalForAll({
 *  contract,
 *  operator: ...,
 *  approved: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setApprovalForAll(options: BaseTransactionOptions<SetApprovalForAllParams | {
    asyncParams: () => Promise<SetApprovalForAllParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=setApprovalForAll.d.ts.map