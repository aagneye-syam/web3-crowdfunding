import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0xd111515d";
/**
 * Checks if the `freezeMetadata` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `freezeMetadata` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isFreezeMetadataSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = await isFreezeMetadataSupported(contract);
 * ```
 */
export declare function isFreezeMetadataSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Prepares a transaction to call the "freezeMetadata" function on the contract.
 * @param options - The options for the "freezeMetadata" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```ts
 * import { freezeMetadata } from "thirdweb/extensions/erc721";
 *
 * const transaction = freezeMetadata();
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function freezeMetadata(options: BaseTransactionOptions): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=freezeMetadata.d.ts.map