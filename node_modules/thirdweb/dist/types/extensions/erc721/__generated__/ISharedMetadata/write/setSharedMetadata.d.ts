import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "setSharedMetadata" function.
 */
export type SetSharedMetadataParams = WithOverrides<{
    metadata: AbiParameterToPrimitiveType<{
        type: "tuple";
        name: "_metadata";
        components: [
            {
                type: "string";
                name: "name";
            },
            {
                type: "string";
                name: "description";
            },
            {
                type: "string";
                name: "imageURI";
            },
            {
                type: "string";
                name: "animationURI";
            }
        ];
    }>;
}>;
export declare const FN_SELECTOR: "0xa7d27d9d";
/**
 * Checks if the `setSharedMetadata` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `setSharedMetadata` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isSetSharedMetadataSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = await isSetSharedMetadataSupported(contract);
 * ```
 */
export declare function isSetSharedMetadataSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "setSharedMetadata" function.
 * @param options - The options for the setSharedMetadata function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeSetSharedMetadataParams } "thirdweb/extensions/erc721";
 * const result = encodeSetSharedMetadataParams({
 *  metadata: ...,
 * });
 * ```
 */
export declare function encodeSetSharedMetadataParams(options: SetSharedMetadataParams): `0x${string}`;
/**
 * Encodes the "setSharedMetadata" function into a Hex string with its parameters.
 * @param options - The options for the setSharedMetadata function.
 * @returns The encoded hexadecimal string.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeSetSharedMetadata } "thirdweb/extensions/erc721";
 * const result = encodeSetSharedMetadata({
 *  metadata: ...,
 * });
 * ```
 */
export declare function encodeSetSharedMetadata(options: SetSharedMetadataParams): `0xa7d27d9d${string}`;
/**
 * Prepares a transaction to call the "setSharedMetadata" function on the contract.
 * @param options - The options for the "setSharedMetadata" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```ts
 * import { setSharedMetadata } from "thirdweb/extensions/erc721";
 *
 * const transaction = setSharedMetadata({
 *  contract,
 *  metadata: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function setSharedMetadata(options: BaseTransactionOptions<SetSharedMetadataParams | {
    asyncParams: () => Promise<SetSharedMetadataParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=setSharedMetadata.d.ts.map