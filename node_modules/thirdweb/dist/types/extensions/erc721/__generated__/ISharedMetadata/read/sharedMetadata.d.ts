import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0xb280f703";
/**
 * Checks if the `sharedMetadata` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `sharedMetadata` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isSharedMetadataSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = await isSharedMetadataSupported(contract);
 * ```
 */
export declare function isSharedMetadataSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the sharedMetadata function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeSharedMetadataResult } from "thirdweb/extensions/erc721";
 * const result = decodeSharedMetadataResult("...");
 * ```
 */
export declare function decodeSharedMetadataResult(result: Hex): readonly [string, string, string, string];
/**
 * Calls the "sharedMetadata" function on the contract.
 * @param options - The options for the sharedMetadata function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { sharedMetadata } from "thirdweb/extensions/erc721";
 *
 * const result = await sharedMetadata({
 *  contract,
 * });
 *
 * ```
 */
export declare function sharedMetadata(options: BaseTransactionOptions): Promise<readonly [string, string, string, string]>;
//# sourceMappingURL=sharedMetadata.d.ts.map