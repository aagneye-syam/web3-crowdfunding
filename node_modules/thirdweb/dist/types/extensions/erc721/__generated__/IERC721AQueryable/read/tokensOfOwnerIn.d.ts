import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "tokensOfOwnerIn" function.
 */
export type TokensOfOwnerInParams = {
    owner: AbiParameterToPrimitiveType<{
        type: "address";
        name: "owner";
    }>;
    start: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "start";
    }>;
    stop: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "stop";
    }>;
};
export declare const FN_SELECTOR: "0x99a2557a";
/**
 * Checks if the `tokensOfOwnerIn` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `tokensOfOwnerIn` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isTokensOfOwnerInSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = await isTokensOfOwnerInSupported(contract);
 * ```
 */
export declare function isTokensOfOwnerInSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "tokensOfOwnerIn" function.
 * @param options - The options for the tokensOfOwnerIn function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeTokensOfOwnerInParams } "thirdweb/extensions/erc721";
 * const result = encodeTokensOfOwnerInParams({
 *  owner: ...,
 *  start: ...,
 *  stop: ...,
 * });
 * ```
 */
export declare function encodeTokensOfOwnerInParams(options: TokensOfOwnerInParams): `0x${string}`;
/**
 * Encodes the "tokensOfOwnerIn" function into a Hex string with its parameters.
 * @param options - The options for the tokensOfOwnerIn function.
 * @returns The encoded hexadecimal string.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeTokensOfOwnerIn } "thirdweb/extensions/erc721";
 * const result = encodeTokensOfOwnerIn({
 *  owner: ...,
 *  start: ...,
 *  stop: ...,
 * });
 * ```
 */
export declare function encodeTokensOfOwnerIn(options: TokensOfOwnerInParams): `0x99a2557a${string}`;
/**
 * Decodes the result of the tokensOfOwnerIn function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeTokensOfOwnerInResult } from "thirdweb/extensions/erc721";
 * const result = decodeTokensOfOwnerInResult("...");
 * ```
 */
export declare function decodeTokensOfOwnerInResult(result: Hex): readonly bigint[];
/**
 * Calls the "tokensOfOwnerIn" function on the contract.
 * @param options - The options for the tokensOfOwnerIn function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { tokensOfOwnerIn } from "thirdweb/extensions/erc721";
 *
 * const result = await tokensOfOwnerIn({
 *  contract,
 *  owner: ...,
 *  start: ...,
 *  stop: ...,
 * });
 *
 * ```
 */
export declare function tokensOfOwnerIn(options: BaseTransactionOptions<TokensOfOwnerInParams>): Promise<readonly bigint[]>;
//# sourceMappingURL=tokensOfOwnerIn.d.ts.map