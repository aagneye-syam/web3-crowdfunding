import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getStakeInfo" function.
 */
export type GetStakeInfoParams = {
    staker: AbiParameterToPrimitiveType<{
        type: "address";
        name: "staker";
    }>;
};
export declare const FN_SELECTOR: "0xc3453153";
/**
 * Checks if the `getStakeInfo` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getStakeInfo` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isGetStakeInfoSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = await isGetStakeInfoSupported(contract);
 * ```
 */
export declare function isGetStakeInfoSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getStakeInfo" function.
 * @param options - The options for the getStakeInfo function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeGetStakeInfoParams } "thirdweb/extensions/erc721";
 * const result = encodeGetStakeInfoParams({
 *  staker: ...,
 * });
 * ```
 */
export declare function encodeGetStakeInfoParams(options: GetStakeInfoParams): `0x${string}`;
/**
 * Encodes the "getStakeInfo" function into a Hex string with its parameters.
 * @param options - The options for the getStakeInfo function.
 * @returns The encoded hexadecimal string.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeGetStakeInfo } "thirdweb/extensions/erc721";
 * const result = encodeGetStakeInfo({
 *  staker: ...,
 * });
 * ```
 */
export declare function encodeGetStakeInfo(options: GetStakeInfoParams): `0xc3453153${string}`;
/**
 * Decodes the result of the getStakeInfo function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeGetStakeInfoResult } from "thirdweb/extensions/erc721";
 * const result = decodeGetStakeInfoResult("...");
 * ```
 */
export declare function decodeGetStakeInfoResult(result: Hex): readonly [readonly bigint[], bigint];
/**
 * Calls the "getStakeInfo" function on the contract.
 * @param options - The options for the getStakeInfo function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { getStakeInfo } from "thirdweb/extensions/erc721";
 *
 * const result = await getStakeInfo({
 *  contract,
 *  staker: ...,
 * });
 *
 * ```
 */
export declare function getStakeInfo(options: BaseTransactionOptions<GetStakeInfoParams>): Promise<readonly [readonly bigint[], bigint]>;
//# sourceMappingURL=getStakeInfo.d.ts.map