import type { BaseTransactionOptions } from "../../../transaction/types.js";
import type { NFT } from "../../../utils/nft/parseNft.js";
/**
 * Parameters for retrieving NFTs.
 */
export type GetNFTsParams = {
    /**
     * Which tokenId to start at.
     * @default 0
     */
    start?: number;
    /**
     * The number of NFTs to retrieve.
     * @default 100
     */
    count?: number;
    /**
     * Whether to include the owner of each NFT.
     * @default false
     */
    includeOwners?: boolean;
};
/**
 * Retrieves an array of NFTs ("ERC721") based on the provided options.
 * @param options - The options for retrieving the NFTs.
 * @returns A promise that resolves to an array of NFTs.
 * @throws An error if the contract requires either `nextTokenIdToMint` or `totalSupply` function to determine the next token ID to mint.
 * @extension ERC721
 * @example
 * ```ts
 * import { getNFTs } from "thirdweb/extensions/erc721";
 * const nfts = await getNFTs({
 *  contract,
 *  start: 0,
 *  count: 10,
 * });
 * ```
 */
export declare function getNFTs(options: BaseTransactionOptions<GetNFTsParams>): Promise<NFT[]>;
//# sourceMappingURL=getNFTs.d.ts.map