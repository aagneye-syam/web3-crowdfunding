import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "reverse" function.
 */
export type ReverseParams = {
    reverseName: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "reverseName";
    }>;
};
export declare const FN_SELECTOR: "0xec11c823";
/**
 * Checks if the `reverse` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `reverse` method is supported.
 * @extension ENS
 * @example
 * ```ts
 * import { isReverseSupported } from "thirdweb/extensions/ens";
 *
 * const supported = await isReverseSupported(contract);
 * ```
 */
export declare function isReverseSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "reverse" function.
 * @param options - The options for the reverse function.
 * @returns The encoded ABI parameters.
 * @extension ENS
 * @example
 * ```ts
 * import { encodeReverseParams } "thirdweb/extensions/ens";
 * const result = encodeReverseParams({
 *  reverseName: ...,
 * });
 * ```
 */
export declare function encodeReverseParams(options: ReverseParams): `0x${string}`;
/**
 * Encodes the "reverse" function into a Hex string with its parameters.
 * @param options - The options for the reverse function.
 * @returns The encoded hexadecimal string.
 * @extension ENS
 * @example
 * ```ts
 * import { encodeReverse } "thirdweb/extensions/ens";
 * const result = encodeReverse({
 *  reverseName: ...,
 * });
 * ```
 */
export declare function encodeReverse(options: ReverseParams): `0xec11c823${string}`;
/**
 * Decodes the result of the reverse function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ENS
 * @example
 * ```ts
 * import { decodeReverseResult } from "thirdweb/extensions/ens";
 * const result = decodeReverseResult("...");
 * ```
 */
export declare function decodeReverseResult(result: Hex): readonly [string, string, string, string];
/**
 * Calls the "reverse" function on the contract.
 * @param options - The options for the reverse function.
 * @returns The parsed result of the function call.
 * @extension ENS
 * @example
 * ```ts
 * import { reverse } from "thirdweb/extensions/ens";
 *
 * const result = await reverse({
 *  contract,
 *  reverseName: ...,
 * });
 *
 * ```
 */
export declare function reverse(options: BaseTransactionOptions<ReverseParams>): Promise<readonly [string, string, string, string]>;
//# sourceMappingURL=reverse.d.ts.map