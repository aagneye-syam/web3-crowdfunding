import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "resolve" function.
 */
export type ResolveParams = {
    name: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "name";
    }>;
    data: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "data";
    }>;
};
export declare const FN_SELECTOR: "0x9061b923";
/**
 * Checks if the `resolve` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `resolve` method is supported.
 * @extension ENS
 * @example
 * ```ts
 * import { isResolveSupported } from "thirdweb/extensions/ens";
 *
 * const supported = await isResolveSupported(contract);
 * ```
 */
export declare function isResolveSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "resolve" function.
 * @param options - The options for the resolve function.
 * @returns The encoded ABI parameters.
 * @extension ENS
 * @example
 * ```ts
 * import { encodeResolveParams } "thirdweb/extensions/ens";
 * const result = encodeResolveParams({
 *  name: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeResolveParams(options: ResolveParams): `0x${string}`;
/**
 * Encodes the "resolve" function into a Hex string with its parameters.
 * @param options - The options for the resolve function.
 * @returns The encoded hexadecimal string.
 * @extension ENS
 * @example
 * ```ts
 * import { encodeResolve } "thirdweb/extensions/ens";
 * const result = encodeResolve({
 *  name: ...,
 *  data: ...,
 * });
 * ```
 */
export declare function encodeResolve(options: ResolveParams): `0x9061b923${string}`;
/**
 * Decodes the result of the resolve function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ENS
 * @example
 * ```ts
 * import { decodeResolveResult } from "thirdweb/extensions/ens";
 * const result = decodeResolveResult("...");
 * ```
 */
export declare function decodeResolveResult(result: Hex): readonly [`0x${string}`, string];
/**
 * Calls the "resolve" function on the contract.
 * @param options - The options for the resolve function.
 * @returns The parsed result of the function call.
 * @extension ENS
 * @example
 * ```ts
 * import { resolve } from "thirdweb/extensions/ens";
 *
 * const result = await resolve({
 *  contract,
 *  name: ...,
 *  data: ...,
 * });
 *
 * ```
 */
export declare function resolve(options: BaseTransactionOptions<ResolveParams>): Promise<readonly [`0x${string}`, string]>;
//# sourceMappingURL=resolve.d.ts.map