import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "mintWithSignature" function.
 */
export type MintWithSignatureParams = WithOverrides<{
    payload: AbiParameterToPrimitiveType<{
        type: "tuple";
        name: "payload";
        components: [
            {
                type: "address";
                name: "to";
            },
            {
                type: "address";
                name: "primarySaleRecipient";
            },
            {
                type: "uint256";
                name: "quantity";
            },
            {
                type: "uint256";
                name: "price";
            },
            {
                type: "address";
                name: "currency";
            },
            {
                type: "uint128";
                name: "validityStartTimestamp";
            },
            {
                type: "uint128";
                name: "validityEndTimestamp";
            },
            {
                type: "bytes32";
                name: "uid";
            }
        ];
    }>;
    signature: AbiParameterToPrimitiveType<{
        type: "bytes";
        name: "signature";
    }>;
}>;
export declare const FN_SELECTOR: "0x8f0fefbb";
/**
 * Checks if the `mintWithSignature` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `mintWithSignature` method is supported.
 * @extension ERC20
 * @example
 * ```ts
 * import { isMintWithSignatureSupported } from "thirdweb/extensions/erc20";
 *
 * const supported = await isMintWithSignatureSupported(contract);
 * ```
 */
export declare function isMintWithSignatureSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "mintWithSignature" function.
 * @param options - The options for the mintWithSignature function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeMintWithSignatureParams } "thirdweb/extensions/erc20";
 * const result = encodeMintWithSignatureParams({
 *  payload: ...,
 *  signature: ...,
 * });
 * ```
 */
export declare function encodeMintWithSignatureParams(options: MintWithSignatureParams): `0x${string}`;
/**
 * Encodes the "mintWithSignature" function into a Hex string with its parameters.
 * @param options - The options for the mintWithSignature function.
 * @returns The encoded hexadecimal string.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeMintWithSignature } "thirdweb/extensions/erc20";
 * const result = encodeMintWithSignature({
 *  payload: ...,
 *  signature: ...,
 * });
 * ```
 */
export declare function encodeMintWithSignature(options: MintWithSignatureParams): `0x8f0fefbb${string}`;
/**
 * Prepares a transaction to call the "mintWithSignature" function on the contract.
 * @param options - The options for the "mintWithSignature" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```ts
 * import { mintWithSignature } from "thirdweb/extensions/erc20";
 *
 * const transaction = mintWithSignature({
 *  contract,
 *  payload: ...,
 *  signature: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function mintWithSignature(options: BaseTransactionOptions<MintWithSignatureParams | {
    asyncParams: () => Promise<MintWithSignatureParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=mintWithSignature.d.ts.map