import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "delegates" function.
 */
export type DelegatesParams = {
    account: AbiParameterToPrimitiveType<{
        type: "address";
        name: "account";
    }>;
};
export declare const FN_SELECTOR: "0x587cde1e";
/**
 * Checks if the `delegates` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `delegates` method is supported.
 * @extension ERC20
 * @example
 * ```ts
 * import { isDelegatesSupported } from "thirdweb/extensions/erc20";
 *
 * const supported = await isDelegatesSupported(contract);
 * ```
 */
export declare function isDelegatesSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "delegates" function.
 * @param options - The options for the delegates function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeDelegatesParams } "thirdweb/extensions/erc20";
 * const result = encodeDelegatesParams({
 *  account: ...,
 * });
 * ```
 */
export declare function encodeDelegatesParams(options: DelegatesParams): `0x${string}`;
/**
 * Encodes the "delegates" function into a Hex string with its parameters.
 * @param options - The options for the delegates function.
 * @returns The encoded hexadecimal string.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeDelegates } "thirdweb/extensions/erc20";
 * const result = encodeDelegates({
 *  account: ...,
 * });
 * ```
 */
export declare function encodeDelegates(options: DelegatesParams): `0x587cde1e${string}`;
/**
 * Decodes the result of the delegates function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC20
 * @example
 * ```ts
 * import { decodeDelegatesResult } from "thirdweb/extensions/erc20";
 * const result = decodeDelegatesResult("...");
 * ```
 */
export declare function decodeDelegatesResult(result: Hex): string;
/**
 * Calls the "delegates" function on the contract.
 * @param options - The options for the delegates function.
 * @returns The parsed result of the function call.
 * @extension ERC20
 * @example
 * ```ts
 * import { delegates } from "thirdweb/extensions/erc20";
 *
 * const result = await delegates({
 *  contract,
 *  account: ...,
 * });
 *
 * ```
 */
export declare function delegates(options: BaseTransactionOptions<DelegatesParams>): Promise<string>;
//# sourceMappingURL=delegates.d.ts.map