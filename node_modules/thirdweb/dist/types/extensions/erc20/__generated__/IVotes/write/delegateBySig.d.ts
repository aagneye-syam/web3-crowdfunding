import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "delegateBySig" function.
 */
export type DelegateBySigParams = WithOverrides<{
    delegatee: AbiParameterToPrimitiveType<{
        type: "address";
        name: "delegatee";
    }>;
    nonce: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "nonce";
    }>;
    expiry: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "expiry";
    }>;
    v: AbiParameterToPrimitiveType<{
        type: "uint8";
        name: "v";
    }>;
    r: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "r";
    }>;
    s: AbiParameterToPrimitiveType<{
        type: "bytes32";
        name: "s";
    }>;
}>;
export declare const FN_SELECTOR: "0xc3cda520";
/**
 * Checks if the `delegateBySig` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `delegateBySig` method is supported.
 * @extension ERC20
 * @example
 * ```ts
 * import { isDelegateBySigSupported } from "thirdweb/extensions/erc20";
 *
 * const supported = await isDelegateBySigSupported(contract);
 * ```
 */
export declare function isDelegateBySigSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "delegateBySig" function.
 * @param options - The options for the delegateBySig function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeDelegateBySigParams } "thirdweb/extensions/erc20";
 * const result = encodeDelegateBySigParams({
 *  delegatee: ...,
 *  nonce: ...,
 *  expiry: ...,
 *  v: ...,
 *  r: ...,
 *  s: ...,
 * });
 * ```
 */
export declare function encodeDelegateBySigParams(options: DelegateBySigParams): `0x${string}`;
/**
 * Encodes the "delegateBySig" function into a Hex string with its parameters.
 * @param options - The options for the delegateBySig function.
 * @returns The encoded hexadecimal string.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeDelegateBySig } "thirdweb/extensions/erc20";
 * const result = encodeDelegateBySig({
 *  delegatee: ...,
 *  nonce: ...,
 *  expiry: ...,
 *  v: ...,
 *  r: ...,
 *  s: ...,
 * });
 * ```
 */
export declare function encodeDelegateBySig(options: DelegateBySigParams): `0xc3cda520${string}`;
/**
 * Prepares a transaction to call the "delegateBySig" function on the contract.
 * @param options - The options for the "delegateBySig" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```ts
 * import { delegateBySig } from "thirdweb/extensions/erc20";
 *
 * const transaction = delegateBySig({
 *  contract,
 *  delegatee: ...,
 *  nonce: ...,
 *  expiry: ...,
 *  v: ...,
 *  r: ...,
 *  s: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function delegateBySig(options: BaseTransactionOptions<DelegateBySigParams | {
    asyncParams: () => Promise<DelegateBySigParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=delegateBySig.d.ts.map