import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "delegate" function.
 */
export type DelegateParams = WithOverrides<{
    delegatee: AbiParameterToPrimitiveType<{
        type: "address";
        name: "delegatee";
    }>;
}>;
export declare const FN_SELECTOR: "0x5c19a95c";
/**
 * Checks if the `delegate` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `delegate` method is supported.
 * @extension ERC20
 * @example
 * ```ts
 * import { isDelegateSupported } from "thirdweb/extensions/erc20";
 *
 * const supported = await isDelegateSupported(contract);
 * ```
 */
export declare function isDelegateSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "delegate" function.
 * @param options - The options for the delegate function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeDelegateParams } "thirdweb/extensions/erc20";
 * const result = encodeDelegateParams({
 *  delegatee: ...,
 * });
 * ```
 */
export declare function encodeDelegateParams(options: DelegateParams): `0x${string}`;
/**
 * Encodes the "delegate" function into a Hex string with its parameters.
 * @param options - The options for the delegate function.
 * @returns The encoded hexadecimal string.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeDelegate } "thirdweb/extensions/erc20";
 * const result = encodeDelegate({
 *  delegatee: ...,
 * });
 * ```
 */
export declare function encodeDelegate(options: DelegateParams): `0x5c19a95c${string}`;
/**
 * Prepares a transaction to call the "delegate" function on the contract.
 * @param options - The options for the "delegate" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```ts
 * import { delegate } from "thirdweb/extensions/erc20";
 *
 * const transaction = delegate({
 *  contract,
 *  delegatee: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function delegate(options: BaseTransactionOptions<DelegateParams | {
    asyncParams: () => Promise<DelegateParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=delegate.d.ts.map