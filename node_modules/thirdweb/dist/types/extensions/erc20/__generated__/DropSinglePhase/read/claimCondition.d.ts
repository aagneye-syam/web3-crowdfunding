import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
export declare const FN_SELECTOR: "0xd637ed59";
/**
 * Checks if the `claimCondition` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `claimCondition` method is supported.
 * @extension ERC20
 * @example
 * ```ts
 * import { isClaimConditionSupported } from "thirdweb/extensions/erc20";
 *
 * const supported = await isClaimConditionSupported(contract);
 * ```
 */
export declare function isClaimConditionSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Decodes the result of the claimCondition function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC20
 * @example
 * ```ts
 * import { decodeClaimConditionResult } from "thirdweb/extensions/erc20";
 * const result = decodeClaimConditionResult("...");
 * ```
 */
export declare function decodeClaimConditionResult(result: Hex): readonly [bigint, bigint, bigint, bigint, `0x${string}`, bigint, string, string];
/**
 * Calls the "claimCondition" function on the contract.
 * @param options - The options for the claimCondition function.
 * @returns The parsed result of the function call.
 * @extension ERC20
 * @example
 * ```ts
 * import { claimCondition } from "thirdweb/extensions/erc20";
 *
 * const result = await claimCondition({
 *  contract,
 * });
 *
 * ```
 */
export declare function claimCondition(options: BaseTransactionOptions): Promise<readonly [bigint, bigint, bigint, bigint, `0x${string}`, bigint, string, string]>;
//# sourceMappingURL=claimCondition.d.ts.map