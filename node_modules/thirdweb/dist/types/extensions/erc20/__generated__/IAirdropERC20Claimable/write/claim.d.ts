import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "claim" function.
 */
export type ClaimParams = WithOverrides<{
    receiver: AbiParameterToPrimitiveType<{
        type: "address";
        name: "receiver";
    }>;
    quantity: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "quantity";
    }>;
    proofs: AbiParameterToPrimitiveType<{
        type: "bytes32[]";
        name: "proofs";
    }>;
    proofMaxQuantityForWallet: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "proofMaxQuantityForWallet";
    }>;
}>;
export declare const FN_SELECTOR: "0x3b4b57b0";
/**
 * Checks if the `claim` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `claim` method is supported.
 * @extension ERC20
 * @example
 * ```ts
 * import { isClaimSupported } from "thirdweb/extensions/erc20";
 *
 * const supported = await isClaimSupported(contract);
 * ```
 */
export declare function isClaimSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "claim" function.
 * @param options - The options for the claim function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeClaimParams } "thirdweb/extensions/erc20";
 * const result = encodeClaimParams({
 *  receiver: ...,
 *  quantity: ...,
 *  proofs: ...,
 *  proofMaxQuantityForWallet: ...,
 * });
 * ```
 */
export declare function encodeClaimParams(options: ClaimParams): `0x${string}`;
/**
 * Encodes the "claim" function into a Hex string with its parameters.
 * @param options - The options for the claim function.
 * @returns The encoded hexadecimal string.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeClaim } "thirdweb/extensions/erc20";
 * const result = encodeClaim({
 *  receiver: ...,
 *  quantity: ...,
 *  proofs: ...,
 *  proofMaxQuantityForWallet: ...,
 * });
 * ```
 */
export declare function encodeClaim(options: ClaimParams): `0x3b4b57b0${string}`;
/**
 * Prepares a transaction to call the "claim" function on the contract.
 * @param options - The options for the "claim" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```ts
 * import { claim } from "thirdweb/extensions/erc20";
 *
 * const transaction = claim({
 *  contract,
 *  receiver: ...,
 *  quantity: ...,
 *  proofs: ...,
 *  proofMaxQuantityForWallet: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function claim(options: BaseTransactionOptions<ClaimParams | {
    asyncParams: () => Promise<ClaimParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=claim.d.ts.map