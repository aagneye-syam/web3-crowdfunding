import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "stake" function.
 */
export type StakeParams = WithOverrides<{
    amount: AbiParameterToPrimitiveType<{
        type: "uint256";
        name: "amount";
    }>;
}>;
export declare const FN_SELECTOR: "0xa694fc3a";
/**
 * Checks if the `stake` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `stake` method is supported.
 * @extension ERC20
 * @example
 * ```ts
 * import { isStakeSupported } from "thirdweb/extensions/erc20";
 *
 * const supported = await isStakeSupported(contract);
 * ```
 */
export declare function isStakeSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "stake" function.
 * @param options - The options for the stake function.
 * @returns The encoded ABI parameters.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeStakeParams } "thirdweb/extensions/erc20";
 * const result = encodeStakeParams({
 *  amount: ...,
 * });
 * ```
 */
export declare function encodeStakeParams(options: StakeParams): `0x${string}`;
/**
 * Encodes the "stake" function into a Hex string with its parameters.
 * @param options - The options for the stake function.
 * @returns The encoded hexadecimal string.
 * @extension ERC20
 * @example
 * ```ts
 * import { encodeStake } "thirdweb/extensions/erc20";
 * const result = encodeStake({
 *  amount: ...,
 * });
 * ```
 */
export declare function encodeStake(options: StakeParams): `0xa694fc3a${string}`;
/**
 * Prepares a transaction to call the "stake" function on the contract.
 * @param options - The options for the "stake" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```ts
 * import { stake } from "thirdweb/extensions/erc20";
 *
 * const transaction = stake({
 *  contract,
 *  amount: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function stake(options: BaseTransactionOptions<StakeParams | {
    asyncParams: () => Promise<StakeParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=stake.d.ts.map