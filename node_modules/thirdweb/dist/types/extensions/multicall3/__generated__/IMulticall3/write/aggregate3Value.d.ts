import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "aggregate3Value" function.
 */
export type Aggregate3ValueParams = WithOverrides<{
    calls: AbiParameterToPrimitiveType<{
        components: [
            {
                internalType: "address";
                name: "target";
                type: "address";
            },
            {
                internalType: "bool";
                name: "allowFailure";
                type: "bool";
            },
            {
                internalType: "uint256";
                name: "value";
                type: "uint256";
            },
            {
                internalType: "bytes";
                name: "callData";
                type: "bytes";
            }
        ];
        internalType: "struct Multicall3.Call3Value[]";
        name: "calls";
        type: "tuple[]";
    }>;
}>;
export declare const FN_SELECTOR: "0x174dea71";
/**
 * Checks if the `aggregate3Value` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `aggregate3Value` method is supported.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { isAggregate3ValueSupported } from "thirdweb/extensions/multicall3";
 *
 * const supported = await isAggregate3ValueSupported(contract);
 * ```
 */
export declare function isAggregate3ValueSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "aggregate3Value" function.
 * @param options - The options for the aggregate3Value function.
 * @returns The encoded ABI parameters.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { encodeAggregate3ValueParams } "thirdweb/extensions/multicall3";
 * const result = encodeAggregate3ValueParams({
 *  calls: ...,
 * });
 * ```
 */
export declare function encodeAggregate3ValueParams(options: Aggregate3ValueParams): `0x${string}`;
/**
 * Encodes the "aggregate3Value" function into a Hex string with its parameters.
 * @param options - The options for the aggregate3Value function.
 * @returns The encoded hexadecimal string.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { encodeAggregate3Value } "thirdweb/extensions/multicall3";
 * const result = encodeAggregate3Value({
 *  calls: ...,
 * });
 * ```
 */
export declare function encodeAggregate3Value(options: Aggregate3ValueParams): `0x174dea71${string}`;
/**
 * Prepares a transaction to call the "aggregate3Value" function on the contract.
 * @param options - The options for the "aggregate3Value" function.
 * @returns A prepared transaction object.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { aggregate3Value } from "thirdweb/extensions/multicall3";
 *
 * const transaction = aggregate3Value({
 *  contract,
 *  calls: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function aggregate3Value(options: BaseTransactionOptions<Aggregate3ValueParams | {
    asyncParams: () => Promise<Aggregate3ValueParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=aggregate3Value.d.ts.map