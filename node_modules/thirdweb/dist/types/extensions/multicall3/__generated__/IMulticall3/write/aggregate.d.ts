import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "aggregate" function.
 */
export type AggregateParams = WithOverrides<{
    calls: AbiParameterToPrimitiveType<{
        components: [
            {
                internalType: "address";
                name: "target";
                type: "address";
            },
            {
                internalType: "bytes";
                name: "callData";
                type: "bytes";
            }
        ];
        internalType: "struct Multicall3.Call[]";
        name: "calls";
        type: "tuple[]";
    }>;
}>;
export declare const FN_SELECTOR: "0x252dba42";
/**
 * Checks if the `aggregate` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `aggregate` method is supported.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { isAggregateSupported } from "thirdweb/extensions/multicall3";
 *
 * const supported = await isAggregateSupported(contract);
 * ```
 */
export declare function isAggregateSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "aggregate" function.
 * @param options - The options for the aggregate function.
 * @returns The encoded ABI parameters.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { encodeAggregateParams } "thirdweb/extensions/multicall3";
 * const result = encodeAggregateParams({
 *  calls: ...,
 * });
 * ```
 */
export declare function encodeAggregateParams(options: AggregateParams): `0x${string}`;
/**
 * Encodes the "aggregate" function into a Hex string with its parameters.
 * @param options - The options for the aggregate function.
 * @returns The encoded hexadecimal string.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { encodeAggregate } "thirdweb/extensions/multicall3";
 * const result = encodeAggregate({
 *  calls: ...,
 * });
 * ```
 */
export declare function encodeAggregate(options: AggregateParams): `0x252dba42${string}`;
/**
 * Prepares a transaction to call the "aggregate" function on the contract.
 * @param options - The options for the "aggregate" function.
 * @returns A prepared transaction object.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { aggregate } from "thirdweb/extensions/multicall3";
 *
 * const transaction = aggregate({
 *  contract,
 *  calls: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function aggregate(options: BaseTransactionOptions<AggregateParams | {
    asyncParams: () => Promise<AggregateParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=aggregate.d.ts.map