import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions, WithOverrides } from "../../../../../transaction/types.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "tryAggregate" function.
 */
export type TryAggregateParams = WithOverrides<{
    requireSuccess: AbiParameterToPrimitiveType<{
        internalType: "bool";
        name: "requireSuccess";
        type: "bool";
    }>;
    calls: AbiParameterToPrimitiveType<{
        components: [
            {
                internalType: "address";
                name: "target";
                type: "address";
            },
            {
                internalType: "bytes";
                name: "callData";
                type: "bytes";
            }
        ];
        internalType: "struct Multicall3.Call[]";
        name: "calls";
        type: "tuple[]";
    }>;
}>;
export declare const FN_SELECTOR: "0xbce38bd7";
/**
 * Checks if the `tryAggregate` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `tryAggregate` method is supported.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { isTryAggregateSupported } from "thirdweb/extensions/multicall3";
 *
 * const supported = await isTryAggregateSupported(contract);
 * ```
 */
export declare function isTryAggregateSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "tryAggregate" function.
 * @param options - The options for the tryAggregate function.
 * @returns The encoded ABI parameters.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { encodeTryAggregateParams } "thirdweb/extensions/multicall3";
 * const result = encodeTryAggregateParams({
 *  requireSuccess: ...,
 *  calls: ...,
 * });
 * ```
 */
export declare function encodeTryAggregateParams(options: TryAggregateParams): `0x${string}`;
/**
 * Encodes the "tryAggregate" function into a Hex string with its parameters.
 * @param options - The options for the tryAggregate function.
 * @returns The encoded hexadecimal string.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { encodeTryAggregate } "thirdweb/extensions/multicall3";
 * const result = encodeTryAggregate({
 *  requireSuccess: ...,
 *  calls: ...,
 * });
 * ```
 */
export declare function encodeTryAggregate(options: TryAggregateParams): `0xbce38bd7${string}`;
/**
 * Prepares a transaction to call the "tryAggregate" function on the contract.
 * @param options - The options for the "tryAggregate" function.
 * @returns A prepared transaction object.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { tryAggregate } from "thirdweb/extensions/multicall3";
 *
 * const transaction = tryAggregate({
 *  contract,
 *  requireSuccess: ...,
 *  calls: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
export declare function tryAggregate(options: BaseTransactionOptions<TryAggregateParams | {
    asyncParams: () => Promise<TryAggregateParams>;
}>): import("../../../../../transaction/prepare-transaction.js").PreparedTransaction<any, import("abitype").AbiFunction, import("../../../../../transaction/prepare-transaction.js").PrepareTransactionOptions>;
//# sourceMappingURL=tryAggregate.d.ts.map