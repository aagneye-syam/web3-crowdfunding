import type { AbiParameterToPrimitiveType } from "abitype";
import type { BaseTransactionOptions } from "../../../../../transaction/types.js";
import type { Hex } from "../../../../../utils/encoding/hex.js";
import type { ThirdwebContract } from "../../../../../contract/contract.js";
/**
 * Represents the parameters for the "getBlockHash" function.
 */
export type GetBlockHashParams = {
    blockNumber: AbiParameterToPrimitiveType<{
        internalType: "uint256";
        name: "blockNumber";
        type: "uint256";
    }>;
};
export declare const FN_SELECTOR: "0xee82ac5e";
/**
 * Checks if the `getBlockHash` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getBlockHash` method is supported.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { isGetBlockHashSupported } from "thirdweb/extensions/multicall3";
 *
 * const supported = await isGetBlockHashSupported(contract);
 * ```
 */
export declare function isGetBlockHashSupported(contract: ThirdwebContract<any>): Promise<boolean>;
/**
 * Encodes the parameters for the "getBlockHash" function.
 * @param options - The options for the getBlockHash function.
 * @returns The encoded ABI parameters.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { encodeGetBlockHashParams } "thirdweb/extensions/multicall3";
 * const result = encodeGetBlockHashParams({
 *  blockNumber: ...,
 * });
 * ```
 */
export declare function encodeGetBlockHashParams(options: GetBlockHashParams): `0x${string}`;
/**
 * Encodes the "getBlockHash" function into a Hex string with its parameters.
 * @param options - The options for the getBlockHash function.
 * @returns The encoded hexadecimal string.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { encodeGetBlockHash } "thirdweb/extensions/multicall3";
 * const result = encodeGetBlockHash({
 *  blockNumber: ...,
 * });
 * ```
 */
export declare function encodeGetBlockHash(options: GetBlockHashParams): `0xee82ac5e${string}`;
/**
 * Decodes the result of the getBlockHash function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { decodeGetBlockHashResult } from "thirdweb/extensions/multicall3";
 * const result = decodeGetBlockHashResult("...");
 * ```
 */
export declare function decodeGetBlockHashResult(result: Hex): `0x${string}`;
/**
 * Calls the "getBlockHash" function on the contract.
 * @param options - The options for the getBlockHash function.
 * @returns The parsed result of the function call.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { getBlockHash } from "thirdweb/extensions/multicall3";
 *
 * const result = await getBlockHash({
 *  contract,
 *  blockNumber: ...,
 * });
 *
 * ```
 */
export declare function getBlockHash(options: BaseTransactionOptions<GetBlockHashParams>): Promise<`0x${string}`>;
//# sourceMappingURL=getBlockHash.d.ts.map