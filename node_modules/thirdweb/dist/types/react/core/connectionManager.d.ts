export declare const connectionManager: {
    activeWalletStore: import("../../reactive/store.js").Store<import("../../exports/wallets.js").Wallet | undefined>;
    activeAccountStore: import("../../reactive/store.js").Store<import("../../exports/wallets.js").Account | undefined>;
    connectedWallets: import("../../reactive/computedStore.js").ReadonlyStore<import("../../exports/wallets.js").Wallet[]>;
    addConnectedWallet: (wallet: import("../../exports/wallets.js").Wallet) => void;
    disconnectWallet: (wallet: import("../../exports/wallets.js").Wallet) => void;
    setActiveWallet: (activeWallet: import("../../exports/wallets.js").Wallet) => Promise<void>;
    connect: (wallet: import("../../exports/wallets.js").Wallet, options?: import("../../wallets/manager/index.js").ConnectManagerOptions | undefined) => Promise<import("../../exports/wallets.js").Wallet>;
    handleConnection: (wallet: import("../../exports/wallets.js").Wallet, options?: import("../../wallets/manager/index.js").ConnectManagerOptions | undefined) => Promise<import("../../exports/wallets.js").Wallet>;
    activeWalletChainStore: import("../../reactive/store.js").Store<{
        readonly id: number;
        readonly name?: string | undefined;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        } | undefined;
        readonly nativeCurrency?: {
            name?: string | undefined;
            symbol?: string | undefined;
            decimals?: number | undefined;
        } | undefined;
        readonly blockExplorers?: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        }[] | undefined;
        readonly testnet?: true | undefined;
        readonly experimental?: {
            increaseZeroByteCount?: boolean | undefined;
        } | undefined;
    } | undefined>;
    switchActiveWalletChain: (chain: {
        readonly id: number;
        readonly name?: string | undefined;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        } | undefined;
        readonly nativeCurrency?: {
            name?: string | undefined;
            symbol?: string | undefined;
            decimals?: number | undefined;
        } | undefined;
        readonly blockExplorers?: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        }[] | undefined;
        readonly testnet?: true | undefined;
        readonly experimental?: {
            increaseZeroByteCount?: boolean | undefined;
        } | undefined;
    }) => Promise<void>;
    activeWalletConnectionStatusStore: import("../../reactive/store.js").Store<import("../../wallets/manager/index.js").ConnectionStatus>;
    isAutoConnecting: import("../../reactive/store.js").Store<boolean>;
    removeConnectedWallet: (wallet: import("../../exports/wallets.js").Wallet) => void;
};
//# sourceMappingURL=connectionManager.d.ts.map