import type { LoginPayload } from "../../../../auth/core/types.js";
import type { VerifyLoginPayloadParams } from "../../../../auth/core/verify-login-payload.js";
/**
 * Options for Setting up SIWE (Sign in with Ethereum) Authentication
 * @auth
 */
export type SiweAuthOptions = {
    /**
     * Method to get the login payload for given address and chainId
     * @param params - The parameters to get the login payload for.
     */
    getLoginPayload: (params: {
        address: string;
        chainId: number;
    }) => Promise<LoginPayload>;
    /**
     * Method to login with the signed login payload
     * @param params
     */
    doLogin: (params: VerifyLoginPayloadParams) => Promise<void>;
    /**
     * Method to logout the user
     */
    doLogout: () => Promise<void>;
    /**
     * Method to check if the user is logged in or not
     * @param address
     */
    isLoggedIn: (address: string) => Promise<boolean>;
};
/**
 * @internal
 */
export declare function useSiweAuth(authOptions?: SiweAuthOptions): {
    requiresAuth: boolean;
    doLogin: import("@tanstack/react-query").UseMutateAsyncFunction<void, Error, void, unknown>;
    isLoggingIn: boolean;
    doLogout: import("@tanstack/react-query").UseMutateAsyncFunction<void, Error, void, unknown>;
    isLoggingOut: boolean;
    isLoggedIn: boolean | undefined;
    isLoading: boolean;
};
//# sourceMappingURL=useSiweAuth.d.ts.map