import { type UseMutationResult } from "@tanstack/react-query";
import type { GaslessOptions } from "../../../../transaction/actions/gasless/types.js";
import type { WaitForReceiptOptions } from "../../../../transaction/actions/wait-for-tx-receipt.js";
import type { PreparedTransaction } from "../../../../transaction/prepare-transaction.js";
import type { Account } from "../../../../wallets/interfaces/wallet.js";
import { type GetWalletBalanceResult } from "../../../../wallets/utils/getWalletBalance.js";
type ShowModalData = {
    tx: PreparedTransaction;
    sendTx: () => void;
    rejectTx: () => void;
    totalCostWei: bigint;
    walletBalance: GetWalletBalanceResult;
};
/**
 * A hook to send a transaction.
 * @returns A mutation object to send a transaction.
 * @example
 * ```jsx
 * import { useSendTransaction } from "thirdweb/react";
 * const { mutate: sendTx, data: transactionResult } = useSendTransaction();
 *
 * // later
 * sendTx(tx);
 * ```
 * @internal
 */
export declare function useSendTransactionCore(showPayModal?: (data: ShowModalData) => void, gasless?: GaslessOptions): UseMutationResult<WaitForReceiptOptions, Error, PreparedTransaction>;
export declare function getTotalTxCostForBuy(tx: PreparedTransaction, account?: Account): Promise<bigint>;
export {};
//# sourceMappingURL=useSendTransaction.d.ts.map