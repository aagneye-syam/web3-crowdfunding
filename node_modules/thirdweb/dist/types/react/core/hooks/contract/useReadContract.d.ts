import { type UseQueryOptions, type UseQueryResult } from "@tanstack/react-query";
import type { Abi, AbiFunction, ExtractAbiFunctionNames } from "abitype";
import type { PrepareContractCallOptions } from "../../../../transaction/prepare-contract-call.js";
import { type ReadContractResult } from "../../../../transaction/read-contract.js";
import type { BaseTransactionOptions, ParseMethod } from "../../../../transaction/types.js";
import type { PreparedMethod } from "../../../../utils/abi/prepare-method.js";
type PickedQueryOptions = Pick<UseQueryOptions, "enabled">;
/**
 * A hook to read from a contract.
 * @param options - The options for reading from a contract
 * @returns a query object.
 * @example
 * ```jsx
 * import { useReadContract } from "thirdweb/react";
 * const { data, isLoading } = useReadContract({contract, method: "totalSupply"});
 * ```
 * @contract
 */
export declare function useReadContract<const abi extends Abi, const method extends abi extends {
    length: 0;
} ? AbiFunction | string : ExtractAbiFunctionNames<abi>>(options: PrepareContractCallOptions<abi, method> & {
    queryOptions?: PickedQueryOptions;
}): UseQueryResult<ReadContractResult<PreparedMethod<ParseMethod<abi, method>>[2]>>;
/**
 * A hook to read from a contract.
 * @param extension - An extension to call.
 * @param options - The read extension params.
 * @returns a query object.
 * @example
 * ```jsx
 * import { useReadContract } from "thirdweb/react";
 * import { getOwnedNFTs } form "thirdweb/extensions/erc721"
 * const { data, isLoading } = useReadContract(getOwnedNFTs, { contract, owner: address });
 * ```
 */
export declare function useReadContract<const abi extends Abi, const params extends object, result>(extension: (options: BaseTransactionOptions<params, abi>) => Promise<result>, options: BaseTransactionOptions<params, abi> & {
    queryOptions?: PickedQueryOptions;
}): UseQueryResult<result>;
export {};
//# sourceMappingURL=useReadContract.d.ts.map