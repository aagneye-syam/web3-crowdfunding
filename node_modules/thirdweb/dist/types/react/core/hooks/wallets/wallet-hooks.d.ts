import type { Wallet } from "../../../../wallets/interfaces/wallet.js";
import type { ConnectManagerOptions } from "../../../../wallets/manager/index.js";
/**
 * A hook that returns the active account
 * @returns The active `Account` or `undefined` if no active account is set.
 * @example
 * ```jsx
 * import { useActiveAccount } from "thirdweb/react";
 *
 * const activeAccount = useActiveAccount();
 * ```
 * @walletConnection
 */
export declare function useActiveAccount(): import("../../../../wallets/interfaces/wallet.js").Account | undefined;
/**
 * A hook that returns the active wallet
 * @returns The active `Wallet` or `undefined` if no active wallet is set.
 * @example
 * ```jsx
 * import { useActiveWallet } from "thirdweb/react";
 *
 * const wallet = useActiveWallet();
 * ```
 * @walletConnection
 */
export declare function useActiveWallet(): Wallet | undefined;
/**
 * Switch to blockchain with given chain id in the active wallet.
 * @returns A function to switch to blockchain with given chain id in the active wallet.
 * @example
 * ```jsx
 * import { useSwitchActiveWalletChain } from "thirdweb/react";
 * import { sepolia } from "thirdweb/chains";
 *
 * const switchChain = useSwitchActiveWalletChain();
 *
 * // later in your code
 * <button onClick={() => switchChain(sepolia)}>Switch Chain</button>
 * ```
 * @walletConnection
 */
export declare function useSwitchActiveWalletChain(): (chain: {
    readonly id: number;
    readonly name?: string | undefined;
    readonly rpc: string;
    readonly icon?: {
        url: string;
        width: number;
        height: number;
        format: string;
    } | undefined;
    readonly nativeCurrency?: {
        name?: string | undefined;
        symbol?: string | undefined;
        decimals?: number | undefined;
    } | undefined;
    readonly blockExplorers?: {
        name: string;
        url: string;
        apiUrl?: string | undefined;
    }[] | undefined;
    readonly testnet?: true | undefined;
    readonly experimental?: {
        increaseZeroByteCount?: boolean | undefined;
    } | undefined;
}) => Promise<void>;
/**
 * A hook that returns the chain the active wallet is connected to
 * @returns The chain the active wallet is connected to or null if no active wallet.
 * @example
 * ```jsx
 * import { useActiveWalletChain } from "thirdweb/react";
 *
 * const chainId = useActiveWalletChain();
 * ```
 * @walletConnection
 */
export declare function useActiveWalletChain(): {
    readonly id: number;
    readonly name?: string | undefined;
    readonly rpc: string;
    readonly icon?: {
        url: string;
        width: number;
        height: number;
        format: string;
    } | undefined;
    readonly nativeCurrency?: {
        name?: string | undefined;
        symbol?: string | undefined;
        decimals?: number | undefined;
    } | undefined;
    readonly blockExplorers?: {
        name: string;
        url: string;
        apiUrl?: string | undefined;
    }[] | undefined;
    readonly testnet?: true | undefined;
    readonly experimental?: {
        increaseZeroByteCount?: boolean | undefined;
    } | undefined;
} | undefined;
/**
 * A hook that returns all connected wallets
 * @returns An array of all connected wallets
 * @example
 * ```jsx
 * import { useConnectedWallets } from "thirdweb/react";
 *
 * const wallets = useConnectedWallets();
 * ```
 * @walletConnection
 */
export declare function useConnectedWallets(): Wallet[];
/**
 * A hook that lets you set the active wallet.
 * @returns A function that lets you set the active wallet.
 * @example
 * ```jsx
 * import { useSetActiveWallet } from "thirdweb/react";
 *
 * const setActiveAccount = useSetActiveWallet();
 *
 * // later in your code
 * await setActiveAccount(account);
 * ```
 * @walletConnection
 */
export declare function useSetActiveWallet(): (activeWallet: Wallet) => Promise<void>;
/**
 * A hook to set a wallet as active wallet
 * @returns A function that lets you connect a wallet.
 * @example
 * ```jsx
 * import { useConnect } from "thirdweb/react";
 * import { createWallet } from "thirdweb/wallets";
 *
 * function Example() {
 *   const { connect, isConnecting, error } = useConnect();
 *   return (
 *     <button
 *       onClick={() =>
 *         connect(async () => {
 *           // instantiate wallet
 *           const wallet = createWallet("io.metamask");
 *           // connect wallet
 *           await wallet.connect();
 *           // return the wallet
 *           return wallet;
 *         })
 *       }
 *     >
 *       Connect
 *     </button>
 *   );
 * }
 * ```
 * @walletConnection
 */
export declare function useConnect(options?: ConnectManagerOptions): {
    readonly connect: (walletOrFn: Wallet | (() => Promise<Wallet>)) => Promise<Wallet | null>;
    readonly isConnecting: boolean;
    readonly error: Error | null;
};
/**
 * Disconnect from given account
 * @example
 * ```jsx
 * import { useDisconnect, useActiveWallet } from "thirdweb/react";
 *
 * function Example() {
 *   const { disconnect } = useDisconnect();
 *   const wallet = useActiveWallet();
 *
 *   return (
 *     <button onClick={() => disconnect(wallet)}>
 *       Disconnect
 *     </button>
 *   );
 * }
 * ```
 * @walletConnection
 * @returns An object with a function to disconnect an account
 */
export declare function useDisconnect(): {
    disconnect: (wallet: Wallet) => void;
};
/**
 * A hook that returns the active account's connection status.
 * @example
 * ```jsx
 * import { useActiveWalletConnectionStatus } from "thirdweb/react";
 *
 * function Example() {
 *   const status = useActiveWalletConnectionStatus();
 *   console.log(status);
 *   return <div> ... </div>;
 * }
 * ```
 * @returns The active wallet's connection status.
 * @walletConnection
 */
export declare function useActiveWalletConnectionStatus(): import("../../../../wallets/manager/index.js").ConnectionStatus;
/**
 * A hook that returns the active wallet's connection status.
 * @example
 * ```jsx
 * function Example() {
 *   const setActive = useSetActiveWalletConnectionStatus();
 *
 *   // when you want to set an account as active
 *   setActive(account)
 * }
 * ```
 * @returns The active wallet's connection status.
 * @internal
 */
export declare function useSetActiveWalletConnectionStatus(): (newValue: import("../../../../wallets/manager/index.js").ConnectionStatus) => void;
/**
 * A hook to check if the auto connect is in progress.
 * @example
 * ```jsx
 * function Example() {
 *   const isAutoConnecting = useIsAutoConnecting();
 *
 *   return <div> ... </div>;
 * }
 * ```
 * @returns A boolean indicating if the auto connect is in progress.
 * @walletConnection
 */
export declare function useIsAutoConnecting(): boolean;
//# sourceMappingURL=wallet-hooks.d.ts.map