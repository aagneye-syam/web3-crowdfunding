/// <reference types="react" />
type DrawerProps = {
    children: React.ReactNode;
    close: () => void;
};
/**
 *
 * @internal
 */
export declare const Drawer: import("react").ForwardRefExoticComponent<DrawerProps & import("react").RefAttributes<HTMLDivElement>>;
export declare const DrawerContainer: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
export declare const drawerOpenAnimation: import("@emotion/react").Keyframes;
export declare const DrawerOverlay: import("@emotion/styled").StyledComponent<{
    theme?: import("@emotion/react").Theme | undefined;
    as?: import("react").ElementType<any> | undefined;
}, import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {}>;
/**
 *
 * @internal
 */
export declare function useDrawer(): {
    drawerRef: import("react").RefObject<HTMLDivElement>;
    drawerOverlayRef: import("react").RefObject<HTMLDivElement>;
    onClose: (closeDrawer: () => void) => void;
};
export {};
//# sourceMappingURL=Drawer.d.ts.map