import type { Chain } from "../../../../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../../../../client/client.js";
export type SupportedChainAndTokens = Array<{
    chain: Chain;
    tokens: Array<{
        address: string;
        buyWithCryptoEnabled: boolean;
        buyWithFiatEnabled: boolean;
        name: string;
        symbol: string;
        icon?: string;
    }>;
}>;
export declare function fetchBuySupportedDestinations(client: ThirdwebClient): Promise<SupportedChainAndTokens>;
/**
 * @internal
 */
export declare function useBuySupportedDestinations(client: ThirdwebClient): import("@tanstack/react-query").UseQueryResult<SupportedChainAndTokens, Error>;
export declare function useBuySupportedSources(options: {
    client: ThirdwebClient;
    destinationChainId: number;
    destinationTokenAddress: string;
}): import("@tanstack/react-query").UseQueryResult<{
    chain: {
        readonly id: number;
        readonly name?: string | undefined;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        } | undefined;
        readonly nativeCurrency?: {
            name?: string | undefined;
            symbol?: string | undefined;
            decimals?: number | undefined;
        } | undefined;
        readonly blockExplorers?: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        }[] | undefined;
        readonly testnet?: true | undefined;
        readonly experimental?: {
            increaseZeroByteCount?: boolean | undefined;
        } | undefined;
    };
    tokens: {
        address: string;
        buyWithCryptoEnabled: boolean;
        buyWithFiatEnabled: boolean;
        name: string;
        symbol: string;
    }[];
}[], Error>;
//# sourceMappingURL=useSwapSupportedChains.d.ts.map