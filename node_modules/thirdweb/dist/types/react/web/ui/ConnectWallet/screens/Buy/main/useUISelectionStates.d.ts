/// <reference types="react" />
import type { PayUIOptions } from "../../../ConnectButtonProps.js";
import { type ERC20OrNativeToken } from "../../nativeToken.js";
import type { SupportedChainAndTokens } from "../swap/useSwapSupportedChains.js";
import type { BuyForTx } from "./types.js";
export declare function useUISelectionStates(options: {
    payOptions: PayUIOptions;
    buyForTx?: BuyForTx;
    supportedDestinations: SupportedChainAndTokens;
}): {
    tokenAmount: string;
    setTokenAmount: import("react").Dispatch<import("react").SetStateAction<string>>;
    hasEditedAmount: boolean;
    toChain: {
        readonly id: number;
        readonly name?: string | undefined;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        } | undefined;
        readonly nativeCurrency?: {
            name?: string | undefined;
            symbol?: string | undefined;
            decimals?: number | undefined;
        } | undefined;
        readonly blockExplorers?: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        }[] | undefined;
        readonly testnet?: true | undefined;
        readonly experimental?: {
            increaseZeroByteCount?: boolean | undefined;
        } | undefined;
    };
    setToChain: import("react").Dispatch<import("react").SetStateAction<{
        readonly id: number;
        readonly name?: string | undefined;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        } | undefined;
        readonly nativeCurrency?: {
            name?: string | undefined;
            symbol?: string | undefined;
            decimals?: number | undefined;
        } | undefined;
        readonly blockExplorers?: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        }[] | undefined;
        readonly testnet?: true | undefined;
        readonly experimental?: {
            increaseZeroByteCount?: boolean | undefined;
        } | undefined;
    }>>;
    deferredTokenAmount: string;
    fromChain: {
        readonly id: number;
        readonly name?: string | undefined;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        } | undefined;
        readonly nativeCurrency?: {
            name?: string | undefined;
            symbol?: string | undefined;
            decimals?: number | undefined;
        } | undefined;
        readonly blockExplorers?: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        }[] | undefined;
        readonly testnet?: true | undefined;
        readonly experimental?: {
            increaseZeroByteCount?: boolean | undefined;
        } | undefined;
    };
    setFromChain: import("react").Dispatch<import("react").SetStateAction<{
        readonly id: number;
        readonly name?: string | undefined;
        readonly rpc: string;
        readonly icon?: {
            url: string;
            width: number;
            height: number;
            format: string;
        } | undefined;
        readonly nativeCurrency?: {
            name?: string | undefined;
            symbol?: string | undefined;
            decimals?: number | undefined;
        } | undefined;
        readonly blockExplorers?: {
            name: string;
            url: string;
            apiUrl?: string | undefined;
        }[] | undefined;
        readonly testnet?: true | undefined;
        readonly experimental?: {
            increaseZeroByteCount?: boolean | undefined;
        } | undefined;
    }>>;
    toToken: ERC20OrNativeToken;
    setToToken: import("react").Dispatch<import("react").SetStateAction<ERC20OrNativeToken>>;
    fromToken: ERC20OrNativeToken;
    setFromToken: import("react").Dispatch<import("react").SetStateAction<ERC20OrNativeToken>>;
    selectedCurrency: import("../fiat/currencies.js").CurrencyMeta;
    setHasEditedAmount: import("react").Dispatch<import("react").SetStateAction<boolean>>;
};
//# sourceMappingURL=useUISelectionStates.d.ts.map