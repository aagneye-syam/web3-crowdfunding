import type React from "react";
import type { Chain } from "../../../../chains/types.js";
import type { ThirdwebClient } from "../../../../client/client.js";
import type { ConnectLocale } from "./locale/types.js";
type NetworkSelectorChainProps = {
    /**
     * `Chain` object to be displayed
     */
    chain: Chain;
    /**
     * function to be called for switching to the given chain
     */
    switchChain: () => void;
    /**
     * flag indicating whether the SDK is currently switching to the given chain
     */
    switching: boolean;
    /**
     * flag indicating whether the SDK failed to switch to the given chain
     */
    switchFailed: boolean;
    /**
     * function to close the modal
     */
    close?: () => void;
};
/**
 * @connectWallet
 */
export type NetworkSelectorProps = {
    /**
     * Chains to be displayed as "Popular"
     */
    popularChainIds?: number[];
    /**
     * Chains to be displayed as "Recent"
     */
    recentChainIds?: number[];
    /**
     * Override how the chain button is rendered in the Modal
     */
    renderChain?: React.FC<NetworkSelectorChainProps>;
    /**
     * Callback to be called when a chain is successfully switched
     * @param chain - The `Chain` of the chain that was switched to
     */
    onSwitch?: (chain: Chain) => void;
    /**
     * Callback to be called when the "Add Custom Network" button is clicked
     *
     * The "Add Custom Network" button is displayed at the bottom of the modal - only if this prop is provided
     */
    onCustomClick?: () => void;
};
type NetworkSelectorContentProps = {
    onBack?: () => void;
    closeModal: () => void;
    chains: Chain[];
    networkSelector?: NetworkSelectorProps;
    showTabs?: boolean;
    connectLocale: ConnectLocale;
    client: ThirdwebClient;
};
/**
 * @internal
 */
export declare function NetworkSelectorContent(props: NetworkSelectorContentProps): import("react/jsx-runtime.js").JSX.Element;
export declare const ChainButton: React.NamedExoticComponent<{
    chain: Chain;
    onClick: () => void;
    confirming: boolean;
    switchingFailed: boolean;
    client: ThirdwebClient;
    connectLocale: ConnectLocale;
}>;
export {};
//# sourceMappingURL=NetworkSelector.d.ts.map