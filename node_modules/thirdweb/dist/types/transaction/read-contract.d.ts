import { type Abi, type AbiFunction, type AbiParameter, type AbiParametersToPrimitiveTypes, type ExtractAbiFunctionNames } from "abitype";
import { type TransactionRequest } from "viem";
import type { ThirdwebContract } from "../contract/contract.js";
import type { PrepareTransactionOptions } from "./prepare-transaction.js";
import type { BaseTransactionOptions, ParamsOption, ParseMethod } from "./types.js";
import { type PreparedMethod } from "../utils/abi/prepare-method.js";
export type ReadContractResult<outputs extends readonly AbiParameter[]> = outputs extends {
    length: 0;
} ? never : outputs extends {
    length: 1;
} ? AbiParametersToPrimitiveTypes<outputs>[0] : AbiParametersToPrimitiveTypes<outputs>;
export type ReadContractOptions<TAbi extends Abi = [], TMethod extends AbiFunction | string | ((contract: ThirdwebContract<TAbi>) => Promise<AbiFunction>) = TAbi extends {
    length: 0;
} ? AbiFunction | string : ExtractAbiFunctionNames<TAbi>, TPreparedMethod extends PreparedMethod<ParseMethod<TAbi, TMethod>> = PreparedMethod<ParseMethod<TAbi, TMethod>>> = BaseTransactionOptions<Omit<TransactionRequest, "from" | "to" | "data" | "value" | "accessList" | "gas" | "gasPrice" | "maxFeePerGas" | "maxPriorityFeePerGas" | "nonce"> & {
    method: TMethod | TPreparedMethod;
} & ParamsOption<TPreparedMethod[1]> & Omit<PrepareTransactionOptions, "to" | "data" | "chain" | "client">, TAbi>;
/**
 * Reads data from a smart contract.
 * @param options - The transaction options.
 * @returns A promise that resolves with the result of the read transaction.
 * @transaction
 * @example
 * ```ts
 * import { readContract } from "thirdweb";
 * const result = await readContract({
 *  contract,
 *  method: "totalSupply",
 * });
 * ```
 */
export declare function readContract<const TAbi extends Abi, const TMethod extends TAbi extends {
    length: 0;
} ? AbiFunction | `function ${string}` | ((contract: ThirdwebContract<TAbi>) => Promise<AbiFunction>) : ExtractAbiFunctionNames<TAbi>, const TPreparedMethod extends PreparedMethod<ParseMethod<TAbi, TMethod>> = PreparedMethod<ParseMethod<TAbi, TMethod>>>(options: ReadContractOptions<TAbi, TMethod, TPreparedMethod>): Promise<ReadContractResult<TPreparedMethod[2]>>;
//# sourceMappingURL=read-contract.d.ts.map