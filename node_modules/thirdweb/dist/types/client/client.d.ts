import type { Prettify } from "../utils/type-utils.js";
type FetchConfig = {
    requestTimeoutMs?: number;
    keepalive?: boolean;
    headers?: HeadersInit;
};
type ClientOptions = Prettify<{
    /**
     * The configuration options for the client.
     */
    config?: {
        /**
         * The configuration options for the RPC client.
         */
        rpc?: {
            /**
             * The configuration options for the fetch function.
             * @default {}
             */
            fetch?: FetchConfig;
            /**
             * The maximum number of requests to batch together.
             * @default 100
             */
            maxBatchSize?: number;
            /**
             * The maximum time to wait before sending a batch of requests.
             * @default 0 (no timeout)
             */
            batchTimeoutMs?: number;
        };
        /**
         * The configuration options for the storage client.
         */
        storage?: {
            /**
             * The configuration options for the fetch function.
             * @default {}
             */
            fetch?: FetchConfig;
            /**
             * The IPFS gateway URL.
             * @default "https://<your_client_id>.ipfscdn.io/ipfs/<cid>"
             */
            gatewayUrl?: string;
        };
    };
}>;
export type CreateThirdwebClientOptions = Prettify<({
    clientId: string;
    secretKey?: never;
} | {
    clientId?: never;
    secretKey: string;
}) & ClientOptions>;
export type ThirdwebClient = {
    readonly clientId: string;
    readonly secretKey: string | undefined;
} & Readonly<ClientOptions>;
/**
 * Creates a Thirdweb client with the provided options.
 * @param options - The options for creating the client.
 * @returns The created Thirdweb client.
 * @throws An error if neither `clientId` nor `secretKey` is provided.
 * @example
 * ```ts
 * import { createThirdwebClient } from "thirdweb";
 * const client = createThirdwebClient({ clientId: "..." });
 * ```
 */
export declare function createThirdwebClient(options: CreateThirdwebClientOptions): ThirdwebClient;
export {};
//# sourceMappingURL=client.d.ts.map