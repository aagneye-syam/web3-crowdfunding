"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.owner = exports.decodeOwnerResult = exports.isOwnerSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x8da5cb5b";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        type: "address",
    },
];
/**
 * Checks if the `owner` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `owner` method is supported.
 * @extension COMMON
 * @example
 * ```ts
 * import { isOwnerSupported } from "thirdweb/extensions/common";
 *
 * const supported = await isOwnerSupported(contract);
 * ```
 */
async function isOwnerSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isOwnerSupported = isOwnerSupported;
/**
 * Decodes the result of the owner function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension COMMON
 * @example
 * ```ts
 * import { decodeOwnerResult } from "thirdweb/extensions/common";
 * const result = decodeOwnerResult("...");
 * ```
 */
function decodeOwnerResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeOwnerResult = decodeOwnerResult;
/**
 * Calls the "owner" function on the contract.
 * @param options - The options for the owner function.
 * @returns The parsed result of the function call.
 * @extension COMMON
 * @example
 * ```ts
 * import { owner } from "thirdweb/extensions/common";
 *
 * const result = await owner({
 *  contract,
 * });
 *
 * ```
 */
async function owner(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
exports.owner = owner;
//# sourceMappingURL=owner.js.map