"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.royaltyInfo = exports.decodeRoyaltyInfoResult = exports.encodeRoyaltyInfo = exports.encodeRoyaltyInfoParams = exports.isRoyaltyInfoSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x2a55205a";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "tokenId",
    },
    {
        type: "uint256",
        name: "salePrice",
    },
];
const FN_OUTPUTS = [
    {
        type: "address",
        name: "receiver",
    },
    {
        type: "uint256",
        name: "royaltyAmount",
    },
];
/**
 * Checks if the `royaltyInfo` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `royaltyInfo` method is supported.
 * @extension ERC2981
 * @example
 * ```ts
 * import { isRoyaltyInfoSupported } from "thirdweb/extensions/erc2981";
 *
 * const supported = await isRoyaltyInfoSupported(contract);
 * ```
 */
async function isRoyaltyInfoSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isRoyaltyInfoSupported = isRoyaltyInfoSupported;
/**
 * Encodes the parameters for the "royaltyInfo" function.
 * @param options - The options for the royaltyInfo function.
 * @returns The encoded ABI parameters.
 * @extension ERC2981
 * @example
 * ```ts
 * import { encodeRoyaltyInfoParams } "thirdweb/extensions/erc2981";
 * const result = encodeRoyaltyInfoParams({
 *  tokenId: ...,
 *  salePrice: ...,
 * });
 * ```
 */
function encodeRoyaltyInfoParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.tokenId, options.salePrice]);
}
exports.encodeRoyaltyInfoParams = encodeRoyaltyInfoParams;
/**
 * Encodes the "royaltyInfo" function into a Hex string with its parameters.
 * @param options - The options for the royaltyInfo function.
 * @returns The encoded hexadecimal string.
 * @extension ERC2981
 * @example
 * ```ts
 * import { encodeRoyaltyInfo } "thirdweb/extensions/erc2981";
 * const result = encodeRoyaltyInfo({
 *  tokenId: ...,
 *  salePrice: ...,
 * });
 * ```
 */
function encodeRoyaltyInfo(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeRoyaltyInfoParams(options).slice(2));
}
exports.encodeRoyaltyInfo = encodeRoyaltyInfo;
/**
 * Decodes the result of the royaltyInfo function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC2981
 * @example
 * ```ts
 * import { decodeRoyaltyInfoResult } from "thirdweb/extensions/erc2981";
 * const result = decodeRoyaltyInfoResult("...");
 * ```
 */
function decodeRoyaltyInfoResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result);
}
exports.decodeRoyaltyInfoResult = decodeRoyaltyInfoResult;
/**
 * Calls the "royaltyInfo" function on the contract.
 * @param options - The options for the royaltyInfo function.
 * @returns The parsed result of the function call.
 * @extension ERC2981
 * @example
 * ```ts
 * import { royaltyInfo } from "thirdweb/extensions/erc2981";
 *
 * const result = await royaltyInfo({
 *  contract,
 *  tokenId: ...,
 *  salePrice: ...,
 * });
 *
 * ```
 */
async function royaltyInfo(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.tokenId, options.salePrice],
    });
}
exports.royaltyInfo = royaltyInfo;
//# sourceMappingURL=royaltyInfo.js.map