"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCurrentBlockCoinbase = exports.decodeGetCurrentBlockCoinbaseResult = exports.isGetCurrentBlockCoinbaseSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xa8b0574e";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        internalType: "address",
        name: "coinbase",
        type: "address",
    },
];
/**
 * Checks if the `getCurrentBlockCoinbase` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getCurrentBlockCoinbase` method is supported.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { isGetCurrentBlockCoinbaseSupported } from "thirdweb/extensions/multicall3";
 *
 * const supported = await isGetCurrentBlockCoinbaseSupported(contract);
 * ```
 */
async function isGetCurrentBlockCoinbaseSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetCurrentBlockCoinbaseSupported = isGetCurrentBlockCoinbaseSupported;
/**
 * Decodes the result of the getCurrentBlockCoinbase function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { decodeGetCurrentBlockCoinbaseResult } from "thirdweb/extensions/multicall3";
 * const result = decodeGetCurrentBlockCoinbaseResult("...");
 * ```
 */
function decodeGetCurrentBlockCoinbaseResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetCurrentBlockCoinbaseResult = decodeGetCurrentBlockCoinbaseResult;
/**
 * Calls the "getCurrentBlockCoinbase" function on the contract.
 * @param options - The options for the getCurrentBlockCoinbase function.
 * @returns The parsed result of the function call.
 * @extension MULTICALL3
 * @example
 * ```ts
 * import { getCurrentBlockCoinbase } from "thirdweb/extensions/multicall3";
 *
 * const result = await getCurrentBlockCoinbase({
 *  contract,
 * });
 *
 * ```
 */
async function getCurrentBlockCoinbase(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
exports.getCurrentBlockCoinbase = getCurrentBlockCoinbase;
//# sourceMappingURL=getCurrentBlockCoinbase.js.map