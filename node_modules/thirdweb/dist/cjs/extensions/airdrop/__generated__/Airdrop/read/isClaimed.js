"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isClaimed = exports.decodeIsClaimedResult = exports.encodeIsClaimed = exports.encodeIsClaimedParams = exports.isIsClaimedSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xd12acf73";
const FN_INPUTS = [
    {
        name: "_receiver",
        type: "address",
        internalType: "address",
    },
    {
        name: "_token",
        type: "address",
        internalType: "address",
    },
    {
        name: "_tokenId",
        type: "uint256",
        internalType: "uint256",
    },
];
const FN_OUTPUTS = [
    {
        name: "",
        type: "bool",
        internalType: "bool",
    },
];
/**
 * Checks if the `isClaimed` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `isClaimed` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isIsClaimedSupported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isIsClaimedSupported(contract);
 * ```
 */
async function isIsClaimedSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isIsClaimedSupported = isIsClaimedSupported;
/**
 * Encodes the parameters for the "isClaimed" function.
 * @param options - The options for the isClaimed function.
 * @returns The encoded ABI parameters.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeIsClaimedParams } "thirdweb/extensions/airdrop";
 * const result = encodeIsClaimedParams({
 *  receiver: ...,
 *  token: ...,
 *  tokenId: ...,
 * });
 * ```
 */
function encodeIsClaimedParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.receiver,
        options.token,
        options.tokenId,
    ]);
}
exports.encodeIsClaimedParams = encodeIsClaimedParams;
/**
 * Encodes the "isClaimed" function into a Hex string with its parameters.
 * @param options - The options for the isClaimed function.
 * @returns The encoded hexadecimal string.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeIsClaimed } "thirdweb/extensions/airdrop";
 * const result = encodeIsClaimed({
 *  receiver: ...,
 *  token: ...,
 *  tokenId: ...,
 * });
 * ```
 */
function encodeIsClaimed(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeIsClaimedParams(options).slice(2));
}
exports.encodeIsClaimed = encodeIsClaimed;
/**
 * Decodes the result of the isClaimed function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { decodeIsClaimedResult } from "thirdweb/extensions/airdrop";
 * const result = decodeIsClaimedResult("...");
 * ```
 */
function decodeIsClaimedResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeIsClaimedResult = decodeIsClaimedResult;
/**
 * Calls the "isClaimed" function on the contract.
 * @param options - The options for the isClaimed function.
 * @returns The parsed result of the function call.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isClaimed } from "thirdweb/extensions/airdrop";
 *
 * const result = await isClaimed({
 *  contract,
 *  receiver: ...,
 *  token: ...,
 *  tokenId: ...,
 * });
 *
 * ```
 */
async function isClaimed(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.receiver, options.token, options.tokenId],
    });
}
exports.isClaimed = isClaimed;
//# sourceMappingURL=isClaimed.js.map