"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.eip712Domain = exports.decodeEip712DomainResult = exports.isEip712DomainSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x84b0196e";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        name: "fields",
        type: "bytes1",
        internalType: "bytes1",
    },
    {
        name: "name",
        type: "string",
        internalType: "string",
    },
    {
        name: "version",
        type: "string",
        internalType: "string",
    },
    {
        name: "chainId",
        type: "uint256",
        internalType: "uint256",
    },
    {
        name: "verifyingContract",
        type: "address",
        internalType: "address",
    },
    {
        name: "salt",
        type: "bytes32",
        internalType: "bytes32",
    },
    {
        name: "extensions",
        type: "uint256[]",
        internalType: "uint256[]",
    },
];
/**
 * Checks if the `eip712Domain` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `eip712Domain` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isEip712DomainSupported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isEip712DomainSupported(contract);
 * ```
 */
async function isEip712DomainSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isEip712DomainSupported = isEip712DomainSupported;
/**
 * Decodes the result of the eip712Domain function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { decodeEip712DomainResult } from "thirdweb/extensions/airdrop";
 * const result = decodeEip712DomainResult("...");
 * ```
 */
function decodeEip712DomainResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result);
}
exports.decodeEip712DomainResult = decodeEip712DomainResult;
/**
 * Calls the "eip712Domain" function on the contract.
 * @param options - The options for the eip712Domain function.
 * @returns The parsed result of the function call.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { eip712Domain } from "thirdweb/extensions/airdrop";
 *
 * const result = await eip712Domain({
 *  contract,
 * });
 *
 * ```
 */
async function eip712Domain(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
exports.eip712Domain = eip712Domain;
//# sourceMappingURL=eip712Domain.js.map