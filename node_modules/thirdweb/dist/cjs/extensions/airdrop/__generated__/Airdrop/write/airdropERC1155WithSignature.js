"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.airdropERC1155WithSignature = exports.encodeAirdropERC1155WithSignature = exports.encodeAirdropERC1155WithSignatureParams = exports.isAirdropERC1155WithSignatureSupported = exports.FN_SELECTOR = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const once_js_1 = require("../../../../../utils/promise/once.js");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xd0d4afd6";
const FN_INPUTS = [
    {
        name: "req",
        type: "tuple",
        internalType: "struct Airdrop.AirdropRequestERC1155",
        components: [
            {
                name: "uid",
                type: "bytes32",
                internalType: "bytes32",
            },
            {
                name: "tokenAddress",
                type: "address",
                internalType: "address",
            },
            {
                name: "expirationTimestamp",
                type: "uint256",
                internalType: "uint256",
            },
            {
                name: "contents",
                type: "tuple[]",
                internalType: "struct Airdrop.AirdropContentERC1155[]",
                components: [
                    {
                        name: "recipient",
                        type: "address",
                        internalType: "address",
                    },
                    {
                        name: "tokenId",
                        type: "uint256",
                        internalType: "uint256",
                    },
                    {
                        name: "amount",
                        type: "uint256",
                        internalType: "uint256",
                    },
                ],
            },
        ],
    },
    {
        name: "signature",
        type: "bytes",
        internalType: "bytes",
    },
];
const FN_OUTPUTS = [];
/**
 * Checks if the `airdropERC1155WithSignature` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `airdropERC1155WithSignature` method is supported.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { isAirdropERC1155WithSignatureSupported } from "thirdweb/extensions/airdrop";
 *
 * const supported = await isAirdropERC1155WithSignatureSupported(contract);
 * ```
 */
async function isAirdropERC1155WithSignatureSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isAirdropERC1155WithSignatureSupported = isAirdropERC1155WithSignatureSupported;
/**
 * Encodes the parameters for the "airdropERC1155WithSignature" function.
 * @param options - The options for the airdropERC1155WithSignature function.
 * @returns The encoded ABI parameters.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeAirdropERC1155WithSignatureParams } "thirdweb/extensions/airdrop";
 * const result = encodeAirdropERC1155WithSignatureParams({
 *  req: ...,
 *  signature: ...,
 * });
 * ```
 */
function encodeAirdropERC1155WithSignatureParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.req, options.signature]);
}
exports.encodeAirdropERC1155WithSignatureParams = encodeAirdropERC1155WithSignatureParams;
/**
 * Encodes the "airdropERC1155WithSignature" function into a Hex string with its parameters.
 * @param options - The options for the airdropERC1155WithSignature function.
 * @returns The encoded hexadecimal string.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { encodeAirdropERC1155WithSignature } "thirdweb/extensions/airdrop";
 * const result = encodeAirdropERC1155WithSignature({
 *  req: ...,
 *  signature: ...,
 * });
 * ```
 */
function encodeAirdropERC1155WithSignature(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeAirdropERC1155WithSignatureParams(options).slice(2));
}
exports.encodeAirdropERC1155WithSignature = encodeAirdropERC1155WithSignature;
/**
 * Prepares a transaction to call the "airdropERC1155WithSignature" function on the contract.
 * @param options - The options for the "airdropERC1155WithSignature" function.
 * @returns A prepared transaction object.
 * @extension AIRDROP
 * @example
 * ```ts
 * import { airdropERC1155WithSignature } from "thirdweb/extensions/airdrop";
 *
 * const transaction = airdropERC1155WithSignature({
 *  contract,
 *  req: ...,
 *  signature: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function airdropERC1155WithSignature(options) {
    const asyncOptions = (0, once_js_1.once)(async () => {
        return "asyncParams" in options ? await options.asyncParams() : options;
    });
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: async () => {
            const resolvedOptions = await asyncOptions();
            return [resolvedOptions.req, resolvedOptions.signature];
        },
        value: async () => (await asyncOptions()).overrides?.value,
        accessList: async () => (await asyncOptions()).overrides?.accessList,
        gas: async () => (await asyncOptions()).overrides?.gas,
        gasPrice: async () => (await asyncOptions()).overrides?.gasPrice,
        maxFeePerGas: async () => (await asyncOptions()).overrides?.maxFeePerGas,
        maxPriorityFeePerGas: async () => (await asyncOptions()).overrides?.maxPriorityFeePerGas,
        nonce: async () => (await asyncOptions()).overrides?.nonce,
        extraGas: async () => (await asyncOptions()).overrides?.extraGas,
    });
}
exports.airdropERC1155WithSignature = airdropERC1155WithSignature;
//# sourceMappingURL=airdropERC1155WithSignature.js.map