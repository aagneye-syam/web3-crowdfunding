"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initialize = exports.encodeInitialize = exports.encodeInitializeParams = exports.isInitializeSupported = exports.FN_SELECTOR = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const once_js_1 = require("../../../../../utils/promise/once.js");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xdfad80a6";
const FN_INPUTS = [
    {
        type: "address",
        name: "_defaultAdmin",
    },
    {
        type: "string",
        name: "_name",
    },
    {
        type: "string",
        name: "_symbol",
    },
    {
        type: "string",
        name: "_contractURI",
    },
    {
        type: "address[]",
        name: "_trustedForwarders",
    },
    {
        type: "address",
        name: "_primarySaleRecipient",
    },
    {
        type: "address",
        name: "_platformFeeRecipient",
    },
    {
        type: "uint256",
        name: "_platformFeeBps",
    },
];
const FN_OUTPUTS = [];
/**
 * Checks if the `initialize` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `initialize` method is supported.
 * @extension PREBUILTS
 * @example
 * ```ts
 * import { isInitializeSupported } from "thirdweb/extensions/prebuilts";
 *
 * const supported = await isInitializeSupported(contract);
 * ```
 */
async function isInitializeSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isInitializeSupported = isInitializeSupported;
/**
 * Encodes the parameters for the "initialize" function.
 * @param options - The options for the initialize function.
 * @returns The encoded ABI parameters.
 * @extension PREBUILTS
 * @example
 * ```ts
 * import { encodeInitializeParams } "thirdweb/extensions/prebuilts";
 * const result = encodeInitializeParams({
 *  defaultAdmin: ...,
 *  name: ...,
 *  symbol: ...,
 *  contractURI: ...,
 *  trustedForwarders: ...,
 *  primarySaleRecipient: ...,
 *  platformFeeRecipient: ...,
 *  platformFeeBps: ...,
 * });
 * ```
 */
function encodeInitializeParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.defaultAdmin,
        options.name,
        options.symbol,
        options.contractURI,
        options.trustedForwarders,
        options.primarySaleRecipient,
        options.platformFeeRecipient,
        options.platformFeeBps,
    ]);
}
exports.encodeInitializeParams = encodeInitializeParams;
/**
 * Encodes the "initialize" function into a Hex string with its parameters.
 * @param options - The options for the initialize function.
 * @returns The encoded hexadecimal string.
 * @extension PREBUILTS
 * @example
 * ```ts
 * import { encodeInitialize } "thirdweb/extensions/prebuilts";
 * const result = encodeInitialize({
 *  defaultAdmin: ...,
 *  name: ...,
 *  symbol: ...,
 *  contractURI: ...,
 *  trustedForwarders: ...,
 *  primarySaleRecipient: ...,
 *  platformFeeRecipient: ...,
 *  platformFeeBps: ...,
 * });
 * ```
 */
function encodeInitialize(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeInitializeParams(options).slice(2));
}
exports.encodeInitialize = encodeInitialize;
/**
 * Prepares a transaction to call the "initialize" function on the contract.
 * @param options - The options for the "initialize" function.
 * @returns A prepared transaction object.
 * @extension PREBUILTS
 * @example
 * ```ts
 * import { initialize } from "thirdweb/extensions/prebuilts";
 *
 * const transaction = initialize({
 *  contract,
 *  defaultAdmin: ...,
 *  name: ...,
 *  symbol: ...,
 *  contractURI: ...,
 *  trustedForwarders: ...,
 *  primarySaleRecipient: ...,
 *  platformFeeRecipient: ...,
 *  platformFeeBps: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function initialize(options) {
    const asyncOptions = (0, once_js_1.once)(async () => {
        return "asyncParams" in options ? await options.asyncParams() : options;
    });
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: async () => {
            const resolvedOptions = await asyncOptions();
            return [
                resolvedOptions.defaultAdmin,
                resolvedOptions.name,
                resolvedOptions.symbol,
                resolvedOptions.contractURI,
                resolvedOptions.trustedForwarders,
                resolvedOptions.primarySaleRecipient,
                resolvedOptions.platformFeeRecipient,
                resolvedOptions.platformFeeBps,
            ];
        },
        value: async () => (await asyncOptions()).overrides?.value,
        accessList: async () => (await asyncOptions()).overrides?.accessList,
        gas: async () => (await asyncOptions()).overrides?.gas,
        gasPrice: async () => (await asyncOptions()).overrides?.gasPrice,
        maxFeePerGas: async () => (await asyncOptions()).overrides?.maxFeePerGas,
        maxPriorityFeePerGas: async () => (await asyncOptions()).overrides?.maxPriorityFeePerGas,
        nonce: async () => (await asyncOptions()).overrides?.nonce,
        extraGas: async () => (await asyncOptions()).overrides?.extraGas,
    });
}
exports.initialize = initialize;
//# sourceMappingURL=initialize.js.map