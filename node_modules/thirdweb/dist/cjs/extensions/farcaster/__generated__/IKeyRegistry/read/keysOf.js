"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keysOf = exports.decodeKeysOfResult = exports.encodeKeysOf = exports.encodeKeysOfParams = exports.isKeysOfSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x1f64222f";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "fid",
    },
    {
        type: "uint8",
        name: "state",
    },
];
const FN_OUTPUTS = [
    {
        type: "bytes[]",
    },
];
/**
 * Checks if the `keysOf` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `keysOf` method is supported.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { isKeysOfSupported } from "thirdweb/extensions/farcaster";
 *
 * const supported = await isKeysOfSupported(contract);
 * ```
 */
async function isKeysOfSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isKeysOfSupported = isKeysOfSupported;
/**
 * Encodes the parameters for the "keysOf" function.
 * @param options - The options for the keysOf function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeKeysOfParams } "thirdweb/extensions/farcaster";
 * const result = encodeKeysOfParams({
 *  fid: ...,
 *  state: ...,
 * });
 * ```
 */
function encodeKeysOfParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.fid, options.state]);
}
exports.encodeKeysOfParams = encodeKeysOfParams;
/**
 * Encodes the "keysOf" function into a Hex string with its parameters.
 * @param options - The options for the keysOf function.
 * @returns The encoded hexadecimal string.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeKeysOf } "thirdweb/extensions/farcaster";
 * const result = encodeKeysOf({
 *  fid: ...,
 *  state: ...,
 * });
 * ```
 */
function encodeKeysOf(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeKeysOfParams(options).slice(2));
}
exports.encodeKeysOf = encodeKeysOf;
/**
 * Decodes the result of the keysOf function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeKeysOfResult } from "thirdweb/extensions/farcaster";
 * const result = decodeKeysOfResult("...");
 * ```
 */
function decodeKeysOfResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeKeysOfResult = decodeKeysOfResult;
/**
 * Calls the "keysOf" function on the contract.
 * @param options - The options for the keysOf function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { keysOf } from "thirdweb/extensions/farcaster";
 *
 * const result = await keysOf({
 *  contract,
 *  fid: ...,
 *  state: ...,
 * });
 *
 * ```
 */
async function keysOf(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.fid, options.state],
    });
}
exports.keysOf = keysOf;
//# sourceMappingURL=keysOf.js.map