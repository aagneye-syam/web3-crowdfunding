"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyAt = exports.decodeKeyAtResult = exports.encodeKeyAt = exports.encodeKeyAtParams = exports.isKeyAtSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x0ea9442c";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "fid",
    },
    {
        type: "uint8",
        name: "state",
    },
    {
        type: "uint256",
        name: "index",
    },
];
const FN_OUTPUTS = [
    {
        type: "bytes",
    },
];
/**
 * Checks if the `keyAt` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `keyAt` method is supported.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { isKeyAtSupported } from "thirdweb/extensions/farcaster";
 *
 * const supported = await isKeyAtSupported(contract);
 * ```
 */
async function isKeyAtSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isKeyAtSupported = isKeyAtSupported;
/**
 * Encodes the parameters for the "keyAt" function.
 * @param options - The options for the keyAt function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeKeyAtParams } "thirdweb/extensions/farcaster";
 * const result = encodeKeyAtParams({
 *  fid: ...,
 *  state: ...,
 *  index: ...,
 * });
 * ```
 */
function encodeKeyAtParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.fid,
        options.state,
        options.index,
    ]);
}
exports.encodeKeyAtParams = encodeKeyAtParams;
/**
 * Encodes the "keyAt" function into a Hex string with its parameters.
 * @param options - The options for the keyAt function.
 * @returns The encoded hexadecimal string.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeKeyAt } "thirdweb/extensions/farcaster";
 * const result = encodeKeyAt({
 *  fid: ...,
 *  state: ...,
 *  index: ...,
 * });
 * ```
 */
function encodeKeyAt(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeKeyAtParams(options).slice(2));
}
exports.encodeKeyAt = encodeKeyAt;
/**
 * Decodes the result of the keyAt function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeKeyAtResult } from "thirdweb/extensions/farcaster";
 * const result = decodeKeyAtResult("...");
 * ```
 */
function decodeKeyAtResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeKeyAtResult = decodeKeyAtResult;
/**
 * Calls the "keyAt" function on the contract.
 * @param options - The options for the keyAt function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { keyAt } from "thirdweb/extensions/farcaster";
 *
 * const result = await keyAt({
 *  contract,
 *  fid: ...,
 *  state: ...,
 *  index: ...,
 * });
 *
 * ```
 */
async function keyAt(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.fid, options.state, options.index],
    });
}
exports.keyAt = keyAt;
//# sourceMappingURL=keyAt.js.map