"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyFidSignature = exports.decodeVerifyFidSignatureResult = exports.encodeVerifyFidSignature = exports.encodeVerifyFidSignatureParams = exports.isVerifyFidSignatureSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x32faac70";
const FN_INPUTS = [
    {
        type: "address",
        name: "custodyAddress",
    },
    {
        type: "uint256",
        name: "fid",
    },
    {
        type: "bytes32",
        name: "digest",
    },
    {
        type: "bytes",
        name: "sig",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
        name: "isValid",
    },
];
/**
 * Checks if the `verifyFidSignature` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `verifyFidSignature` method is supported.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { isVerifyFidSignatureSupported } from "thirdweb/extensions/farcaster";
 *
 * const supported = await isVerifyFidSignatureSupported(contract);
 * ```
 */
async function isVerifyFidSignatureSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isVerifyFidSignatureSupported = isVerifyFidSignatureSupported;
/**
 * Encodes the parameters for the "verifyFidSignature" function.
 * @param options - The options for the verifyFidSignature function.
 * @returns The encoded ABI parameters.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeVerifyFidSignatureParams } "thirdweb/extensions/farcaster";
 * const result = encodeVerifyFidSignatureParams({
 *  custodyAddress: ...,
 *  fid: ...,
 *  digest: ...,
 *  sig: ...,
 * });
 * ```
 */
function encodeVerifyFidSignatureParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.custodyAddress,
        options.fid,
        options.digest,
        options.sig,
    ]);
}
exports.encodeVerifyFidSignatureParams = encodeVerifyFidSignatureParams;
/**
 * Encodes the "verifyFidSignature" function into a Hex string with its parameters.
 * @param options - The options for the verifyFidSignature function.
 * @returns The encoded hexadecimal string.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { encodeVerifyFidSignature } "thirdweb/extensions/farcaster";
 * const result = encodeVerifyFidSignature({
 *  custodyAddress: ...,
 *  fid: ...,
 *  digest: ...,
 *  sig: ...,
 * });
 * ```
 */
function encodeVerifyFidSignature(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeVerifyFidSignatureParams(options).slice(2));
}
exports.encodeVerifyFidSignature = encodeVerifyFidSignature;
/**
 * Decodes the result of the verifyFidSignature function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeVerifyFidSignatureResult } from "thirdweb/extensions/farcaster";
 * const result = decodeVerifyFidSignatureResult("...");
 * ```
 */
function decodeVerifyFidSignatureResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeVerifyFidSignatureResult = decodeVerifyFidSignatureResult;
/**
 * Calls the "verifyFidSignature" function on the contract.
 * @param options - The options for the verifyFidSignature function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { verifyFidSignature } from "thirdweb/extensions/farcaster";
 *
 * const result = await verifyFidSignature({
 *  contract,
 *  custodyAddress: ...,
 *  fid: ...,
 *  digest: ...,
 *  sig: ...,
 * });
 *
 * ```
 */
async function verifyFidSignature(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.custodyAddress, options.fid, options.digest, options.sig],
    });
}
exports.verifyFidSignature = verifyFidSignature;
//# sourceMappingURL=verifyFidSignature.js.map