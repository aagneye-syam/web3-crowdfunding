"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CHANGE_RECOVERY_ADDRESS_TYPEHASH = exports.decodeCHANGE_RECOVERY_ADDRESS_TYPEHASHResult = exports.isCHANGE_RECOVERY_ADDRESS_TYPEHASHSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xd5bac7f3";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        type: "bytes32",
    },
];
/**
 * Checks if the `CHANGE_RECOVERY_ADDRESS_TYPEHASH` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `CHANGE_RECOVERY_ADDRESS_TYPEHASH` method is supported.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { isCHANGE_RECOVERY_ADDRESS_TYPEHASHSupported } from "thirdweb/extensions/farcaster";
 *
 * const supported = await isCHANGE_RECOVERY_ADDRESS_TYPEHASHSupported(contract);
 * ```
 */
async function isCHANGE_RECOVERY_ADDRESS_TYPEHASHSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isCHANGE_RECOVERY_ADDRESS_TYPEHASHSupported = isCHANGE_RECOVERY_ADDRESS_TYPEHASHSupported;
/**
 * Decodes the result of the CHANGE_RECOVERY_ADDRESS_TYPEHASH function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeCHANGE_RECOVERY_ADDRESS_TYPEHASHResult } from "thirdweb/extensions/farcaster";
 * const result = decodeCHANGE_RECOVERY_ADDRESS_TYPEHASHResult("...");
 * ```
 */
function decodeCHANGE_RECOVERY_ADDRESS_TYPEHASHResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeCHANGE_RECOVERY_ADDRESS_TYPEHASHResult = decodeCHANGE_RECOVERY_ADDRESS_TYPEHASHResult;
/**
 * Calls the "CHANGE_RECOVERY_ADDRESS_TYPEHASH" function on the contract.
 * @param options - The options for the CHANGE_RECOVERY_ADDRESS_TYPEHASH function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { CHANGE_RECOVERY_ADDRESS_TYPEHASH } from "thirdweb/extensions/farcaster";
 *
 * const result = await CHANGE_RECOVERY_ADDRESS_TYPEHASH({
 *  contract,
 * });
 *
 * ```
 */
async function CHANGE_RECOVERY_ADDRESS_TYPEHASH(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
exports.CHANGE_RECOVERY_ADDRESS_TYPEHASH = CHANGE_RECOVERY_ADDRESS_TYPEHASH;
//# sourceMappingURL=CHANGE_RECOVERY_ADDRESS_TYPEHASH.js.map