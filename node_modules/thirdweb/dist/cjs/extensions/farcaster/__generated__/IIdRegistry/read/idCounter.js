"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.idCounter = exports.decodeIdCounterResult = exports.isIdCounterSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xeb08ab28";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        type: "uint256",
    },
];
/**
 * Checks if the `idCounter` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `idCounter` method is supported.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { isIdCounterSupported } from "thirdweb/extensions/farcaster";
 *
 * const supported = await isIdCounterSupported(contract);
 * ```
 */
async function isIdCounterSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isIdCounterSupported = isIdCounterSupported;
/**
 * Decodes the result of the idCounter function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { decodeIdCounterResult } from "thirdweb/extensions/farcaster";
 * const result = decodeIdCounterResult("...");
 * ```
 */
function decodeIdCounterResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeIdCounterResult = decodeIdCounterResult;
/**
 * Calls the "idCounter" function on the contract.
 * @param options - The options for the idCounter function.
 * @returns The parsed result of the function call.
 * @extension FARCASTER
 * @example
 * ```ts
 * import { idCounter } from "thirdweb/extensions/farcaster";
 *
 * const result = await idCounter({
 *  contract,
 * });
 *
 * ```
 */
async function idCounter(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
exports.idCounter = idCounter;
//# sourceMappingURL=idCounter.js.map