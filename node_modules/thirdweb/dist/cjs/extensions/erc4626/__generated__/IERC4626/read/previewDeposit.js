"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.previewDeposit = exports.decodePreviewDepositResult = exports.encodePreviewDeposit = exports.encodePreviewDepositParams = exports.isPreviewDepositSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xef8b30f7";
const FN_INPUTS = [
    {
        name: "assets",
        type: "uint256",
        internalType: "uint256",
    },
];
const FN_OUTPUTS = [
    {
        name: "shares",
        type: "uint256",
        internalType: "uint256",
    },
];
/**
 * Checks if the `previewDeposit` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `previewDeposit` method is supported.
 * @extension ERC4626
 * @example
 * ```ts
 * import { isPreviewDepositSupported } from "thirdweb/extensions/erc4626";
 *
 * const supported = await isPreviewDepositSupported(contract);
 * ```
 */
async function isPreviewDepositSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isPreviewDepositSupported = isPreviewDepositSupported;
/**
 * Encodes the parameters for the "previewDeposit" function.
 * @param options - The options for the previewDeposit function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodePreviewDepositParams } "thirdweb/extensions/erc4626";
 * const result = encodePreviewDepositParams({
 *  assets: ...,
 * });
 * ```
 */
function encodePreviewDepositParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.assets]);
}
exports.encodePreviewDepositParams = encodePreviewDepositParams;
/**
 * Encodes the "previewDeposit" function into a Hex string with its parameters.
 * @param options - The options for the previewDeposit function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodePreviewDeposit } "thirdweb/extensions/erc4626";
 * const result = encodePreviewDeposit({
 *  assets: ...,
 * });
 * ```
 */
function encodePreviewDeposit(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodePreviewDepositParams(options).slice(2));
}
exports.encodePreviewDeposit = encodePreviewDeposit;
/**
 * Decodes the result of the previewDeposit function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4626
 * @example
 * ```ts
 * import { decodePreviewDepositResult } from "thirdweb/extensions/erc4626";
 * const result = decodePreviewDepositResult("...");
 * ```
 */
function decodePreviewDepositResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodePreviewDepositResult = decodePreviewDepositResult;
/**
 * Calls the "previewDeposit" function on the contract.
 * @param options - The options for the previewDeposit function.
 * @returns The parsed result of the function call.
 * @extension ERC4626
 * @example
 * ```ts
 * import { previewDeposit } from "thirdweb/extensions/erc4626";
 *
 * const result = await previewDeposit({
 *  contract,
 *  assets: ...,
 * });
 *
 * ```
 */
async function previewDeposit(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.assets],
    });
}
exports.previewDeposit = previewDeposit;
//# sourceMappingURL=previewDeposit.js.map