"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.previewWithdraw = exports.decodePreviewWithdrawResult = exports.encodePreviewWithdraw = exports.encodePreviewWithdrawParams = exports.isPreviewWithdrawSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x0a28a477";
const FN_INPUTS = [
    {
        name: "assets",
        type: "uint256",
        internalType: "uint256",
    },
];
const FN_OUTPUTS = [
    {
        name: "shares",
        type: "uint256",
        internalType: "uint256",
    },
];
/**
 * Checks if the `previewWithdraw` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `previewWithdraw` method is supported.
 * @extension ERC4626
 * @example
 * ```ts
 * import { isPreviewWithdrawSupported } from "thirdweb/extensions/erc4626";
 *
 * const supported = await isPreviewWithdrawSupported(contract);
 * ```
 */
async function isPreviewWithdrawSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isPreviewWithdrawSupported = isPreviewWithdrawSupported;
/**
 * Encodes the parameters for the "previewWithdraw" function.
 * @param options - The options for the previewWithdraw function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodePreviewWithdrawParams } "thirdweb/extensions/erc4626";
 * const result = encodePreviewWithdrawParams({
 *  assets: ...,
 * });
 * ```
 */
function encodePreviewWithdrawParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.assets]);
}
exports.encodePreviewWithdrawParams = encodePreviewWithdrawParams;
/**
 * Encodes the "previewWithdraw" function into a Hex string with its parameters.
 * @param options - The options for the previewWithdraw function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodePreviewWithdraw } "thirdweb/extensions/erc4626";
 * const result = encodePreviewWithdraw({
 *  assets: ...,
 * });
 * ```
 */
function encodePreviewWithdraw(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodePreviewWithdrawParams(options).slice(2));
}
exports.encodePreviewWithdraw = encodePreviewWithdraw;
/**
 * Decodes the result of the previewWithdraw function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4626
 * @example
 * ```ts
 * import { decodePreviewWithdrawResult } from "thirdweb/extensions/erc4626";
 * const result = decodePreviewWithdrawResult("...");
 * ```
 */
function decodePreviewWithdrawResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodePreviewWithdrawResult = decodePreviewWithdrawResult;
/**
 * Calls the "previewWithdraw" function on the contract.
 * @param options - The options for the previewWithdraw function.
 * @returns The parsed result of the function call.
 * @extension ERC4626
 * @example
 * ```ts
 * import { previewWithdraw } from "thirdweb/extensions/erc4626";
 *
 * const result = await previewWithdraw({
 *  contract,
 *  assets: ...,
 * });
 *
 * ```
 */
async function previewWithdraw(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.assets],
    });
}
exports.previewWithdraw = previewWithdraw;
//# sourceMappingURL=previewWithdraw.js.map