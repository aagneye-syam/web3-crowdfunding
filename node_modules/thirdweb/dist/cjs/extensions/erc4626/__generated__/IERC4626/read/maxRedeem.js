"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.maxRedeem = exports.decodeMaxRedeemResult = exports.encodeMaxRedeem = exports.encodeMaxRedeemParams = exports.isMaxRedeemSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xd905777e";
const FN_INPUTS = [
    {
        name: "owner",
        type: "address",
        internalType: "address",
    },
];
const FN_OUTPUTS = [
    {
        name: "maxShares",
        type: "uint256",
        internalType: "uint256",
    },
];
/**
 * Checks if the `maxRedeem` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `maxRedeem` method is supported.
 * @extension ERC4626
 * @example
 * ```ts
 * import { isMaxRedeemSupported } from "thirdweb/extensions/erc4626";
 *
 * const supported = await isMaxRedeemSupported(contract);
 * ```
 */
async function isMaxRedeemSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isMaxRedeemSupported = isMaxRedeemSupported;
/**
 * Encodes the parameters for the "maxRedeem" function.
 * @param options - The options for the maxRedeem function.
 * @returns The encoded ABI parameters.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodeMaxRedeemParams } "thirdweb/extensions/erc4626";
 * const result = encodeMaxRedeemParams({
 *  owner: ...,
 * });
 * ```
 */
function encodeMaxRedeemParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.owner]);
}
exports.encodeMaxRedeemParams = encodeMaxRedeemParams;
/**
 * Encodes the "maxRedeem" function into a Hex string with its parameters.
 * @param options - The options for the maxRedeem function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4626
 * @example
 * ```ts
 * import { encodeMaxRedeem } "thirdweb/extensions/erc4626";
 * const result = encodeMaxRedeem({
 *  owner: ...,
 * });
 * ```
 */
function encodeMaxRedeem(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeMaxRedeemParams(options).slice(2));
}
exports.encodeMaxRedeem = encodeMaxRedeem;
/**
 * Decodes the result of the maxRedeem function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4626
 * @example
 * ```ts
 * import { decodeMaxRedeemResult } from "thirdweb/extensions/erc4626";
 * const result = decodeMaxRedeemResult("...");
 * ```
 */
function decodeMaxRedeemResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeMaxRedeemResult = decodeMaxRedeemResult;
/**
 * Calls the "maxRedeem" function on the contract.
 * @param options - The options for the maxRedeem function.
 * @returns The parsed result of the function call.
 * @extension ERC4626
 * @example
 * ```ts
 * import { maxRedeem } from "thirdweb/extensions/erc4626";
 *
 * const result = await maxRedeem({
 *  contract,
 *  owner: ...,
 * });
 *
 * ```
 */
async function maxRedeem(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.owner],
    });
}
exports.maxRedeem = maxRedeem;
//# sourceMappingURL=maxRedeem.js.map