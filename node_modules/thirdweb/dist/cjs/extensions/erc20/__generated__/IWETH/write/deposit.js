"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deposit = exports.isDepositSupported = exports.FN_SELECTOR = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xd0e30db0";
const FN_INPUTS = [];
const FN_OUTPUTS = [];
/**
 * Checks if the `deposit` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `deposit` method is supported.
 * @extension ERC20
 * @example
 * ```ts
 * import { isDepositSupported } from "thirdweb/extensions/erc20";
 *
 * const supported = await isDepositSupported(contract);
 * ```
 */
async function isDepositSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isDepositSupported = isDepositSupported;
/**
 * Prepares a transaction to call the "deposit" function on the contract.
 * @param options - The options for the "deposit" function.
 * @returns A prepared transaction object.
 * @extension ERC20
 * @example
 * ```ts
 * import { deposit } from "thirdweb/extensions/erc20";
 *
 * const transaction = deposit();
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function deposit(options) {
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.deposit = deposit;
//# sourceMappingURL=deposit.js.map