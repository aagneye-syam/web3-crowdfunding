"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllExtensions = exports.decodeGetAllExtensionsResult = exports.isGetAllExtensionsSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x4a00cc48";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        type: "tuple[]",
        name: "allExtensions",
        components: [
            {
                type: "tuple",
                name: "metadata",
                components: [
                    {
                        type: "string",
                        name: "name",
                    },
                    {
                        type: "string",
                        name: "metadataURI",
                    },
                    {
                        type: "address",
                        name: "implementation",
                    },
                ],
            },
            {
                type: "tuple[]",
                name: "functions",
                components: [
                    {
                        type: "bytes4",
                        name: "functionSelector",
                    },
                    {
                        type: "string",
                        name: "functionSignature",
                    },
                ],
            },
        ],
    },
];
/**
 * Checks if the `getAllExtensions` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAllExtensions` method is supported.
 * @extension ERC7504
 * @example
 * ```ts
 * import { isGetAllExtensionsSupported } from "thirdweb/extensions/erc7504";
 *
 * const supported = await isGetAllExtensionsSupported(contract);
 * ```
 */
async function isGetAllExtensionsSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetAllExtensionsSupported = isGetAllExtensionsSupported;
/**
 * Decodes the result of the getAllExtensions function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC7504
 * @example
 * ```ts
 * import { decodeGetAllExtensionsResult } from "thirdweb/extensions/erc7504";
 * const result = decodeGetAllExtensionsResult("...");
 * ```
 */
function decodeGetAllExtensionsResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetAllExtensionsResult = decodeGetAllExtensionsResult;
/**
 * Calls the "getAllExtensions" function on the contract.
 * @param options - The options for the getAllExtensions function.
 * @returns The parsed result of the function call.
 * @extension ERC7504
 * @example
 * ```ts
 * import { getAllExtensions } from "thirdweb/extensions/erc7504";
 *
 * const result = await getAllExtensions({
 *  contract,
 * });
 *
 * ```
 */
async function getAllExtensions(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
exports.getAllExtensions = getAllExtensions;
//# sourceMappingURL=getAllExtensions.js.map