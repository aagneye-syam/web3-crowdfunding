"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFTs = void 0;
const bigint_js_1 = require("../../../utils/bigint.js");
const nextTokenIdToMint_js_1 = require("../__generated__/IERC1155Enumerable/read/nextTokenIdToMint.js");
const getNFT_js_1 = require("./getNFT.js");
const DEFAULT_QUERY_ALL_COUNT = 100n;
/**
 * Retrieves an array of NFTs ("ERC1155") based on the provided options.
 * @param options - The options for retrieving the NFTs.
 * @returns A promise that resolves to an array of NFTs.
 * @extension ERC1155
 * @example
 * ```ts
 * import { getNFTs } from "thirdweb/extensions/erc1155";
 * const nfts = await getNFTs({
 *  contract,
 *  start: 0,
 *  count: 10,
 * });
 * ```
 */
async function getNFTs(options) {
    const start = BigInt(options.start || 0);
    const count = BigInt(options.count || DEFAULT_QUERY_ALL_COUNT);
    const totalCount = await (0, nextTokenIdToMint_js_1.nextTokenIdToMint)(options);
    const maxId = (0, bigint_js_1.min)(totalCount, start + count);
    const promises = [];
    for (let i = start; i < maxId; i++) {
        promises.push((0, getNFT_js_1.getNFT)({
            ...options,
            tokenId: i,
        }));
    }
    return await Promise.all(promises);
}
exports.getNFTs = getNFTs;
//# sourceMappingURL=getNFTs.js.map