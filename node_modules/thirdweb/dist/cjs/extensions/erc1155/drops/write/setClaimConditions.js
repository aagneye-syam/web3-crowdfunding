"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setClaimConditions = void 0;
const get_multicall_set_claim_claim_conditon_transactions_js_1 = require("../../../../utils/extensions/drops/get-multicall-set-claim-claim-conditon-transactions.js");
const multicall_js_1 = require("../../../common/__generated__/IMulticall/write/multicall.js");
/**
 * Set the claim conditions for a ERC1155 drop
 * @param options
 * @returns the prepared transaction
 * @extension ERC1155
 * @example
 * ```ts
 * import { setClaimConditions } from "thirdweb/extensions/erc1155";
 *
 * const tx = setClaimConditions({
 *  contract,
 *  tokenId: 0n,
 *  phases: [
 *    {
 *      maxClaimableSupply: 100n,
 *      maxClaimablePerWallet: 1n,
 *      currencyAddress: "0x...",
 *      price: 0.1,
 *      startTime: new Date(),
 *    },
 *   ],
 * });
 * ```
 */
function setClaimConditions(options) {
    return (0, multicall_js_1.multicall)({
        contract: options.contract,
        asyncParams: async () => {
            return {
                data: await (0, get_multicall_set_claim_claim_conditon_transactions_js_1.getMulticallSetClaimConditionTransactions)({
                    contract: options.contract,
                    phases: options.phases,
                    resetClaimEligibility: options.resetClaimEligibility,
                    tokenId: options.tokenId,
                    tokenDecimals: 0,
                }),
            };
        },
    });
}
exports.setClaimConditions = setClaimConditions;
//# sourceMappingURL=setClaimConditions.js.map