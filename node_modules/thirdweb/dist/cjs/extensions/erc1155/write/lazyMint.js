"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lazyMint = void 0;
const ipfs_js_1 = require("../../../utils/ipfs.js");
const nextTokenIdToMint_js_1 = require("../__generated__/IERC1155Enumerable/read/nextTokenIdToMint.js");
const lazyMint_js_1 = require("../__generated__/ILazyMint/write/lazyMint.js");
/**
 * Lazily mints ERC1155 tokens.
 * @param options - The options for the lazy minting process.
 * @returns A promise that resolves to the prepared contract call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { lazyMint } from "thirdweb/extensions/erc1155";
 *
 * const tx = await lazyMint({
 * contract,
 * nfts: [
 *    {
 *      name: "My NFT",
 *      description: "This is my NFT",
 *      image: "https://example.com/image.png",
 *    },
 *  ],
 * });
 * ```
 */
function lazyMint(options) {
    return (0, lazyMint_js_1.lazyMint)({
        contract: options.contract,
        asyncParams: async () => {
            const startFileNumber = await (0, nextTokenIdToMint_js_1.nextTokenIdToMint)({
                contract: options.contract,
            });
            const batchOfUris = await (0, ipfs_js_1.uploadOrExtractURIs)(options.nfts, options.contract.client, 
            // TODO: this is potentially unsafe since it *may* be bigger than what Number can represent, however the likelyhood is very low (fine, for now)
            Number(startFileNumber));
            const baseUri = (0, ipfs_js_1.getBaseUriFromBatch)(batchOfUris);
            return {
                amount: BigInt(batchOfUris.length),
                baseURIForTokens: baseUri.endsWith("/") ? baseUri : `${baseUri}/`,
                extraData: "0x",
            };
        },
    });
}
exports.lazyMint = lazyMint;
//# sourceMappingURL=lazyMint.js.map