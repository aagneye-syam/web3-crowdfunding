"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.claimCondition = exports.decodeClaimConditionResult = exports.encodeClaimCondition = exports.encodeClaimConditionParams = exports.isClaimConditionSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xe9703d25";
const FN_INPUTS = [
    {
        name: "_tokenId",
        type: "uint256",
        internalType: "uint256",
    },
];
const FN_OUTPUTS = [
    {
        name: "startTimestamp",
        type: "uint256",
        internalType: "uint256",
    },
    {
        name: "maxClaimableSupply",
        type: "uint256",
        internalType: "uint256",
    },
    {
        name: "supplyClaimed",
        type: "uint256",
        internalType: "uint256",
    },
    {
        name: "quantityLimitPerWallet",
        type: "uint256",
        internalType: "uint256",
    },
    {
        name: "merkleRoot",
        type: "bytes32",
        internalType: "bytes32",
    },
    {
        name: "pricePerToken",
        type: "uint256",
        internalType: "uint256",
    },
    {
        name: "currency",
        type: "address",
        internalType: "address",
    },
    {
        name: "metadata",
        type: "string",
        internalType: "string",
    },
];
/**
 * Checks if the `claimCondition` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `claimCondition` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isClaimConditionSupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = await isClaimConditionSupported(contract);
 * ```
 */
async function isClaimConditionSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isClaimConditionSupported = isClaimConditionSupported;
/**
 * Encodes the parameters for the "claimCondition" function.
 * @param options - The options for the claimCondition function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeClaimConditionParams } "thirdweb/extensions/erc1155";
 * const result = encodeClaimConditionParams({
 *  tokenId: ...,
 * });
 * ```
 */
function encodeClaimConditionParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.tokenId]);
}
exports.encodeClaimConditionParams = encodeClaimConditionParams;
/**
 * Encodes the "claimCondition" function into a Hex string with its parameters.
 * @param options - The options for the claimCondition function.
 * @returns The encoded hexadecimal string.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeClaimCondition } "thirdweb/extensions/erc1155";
 * const result = encodeClaimCondition({
 *  tokenId: ...,
 * });
 * ```
 */
function encodeClaimCondition(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeClaimConditionParams(options).slice(2));
}
exports.encodeClaimCondition = encodeClaimCondition;
/**
 * Decodes the result of the claimCondition function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```ts
 * import { decodeClaimConditionResult } from "thirdweb/extensions/erc1155";
 * const result = decodeClaimConditionResult("...");
 * ```
 */
function decodeClaimConditionResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result);
}
exports.decodeClaimConditionResult = decodeClaimConditionResult;
/**
 * Calls the "claimCondition" function on the contract.
 * @param options - The options for the claimCondition function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { claimCondition } from "thirdweb/extensions/erc1155";
 *
 * const result = await claimCondition({
 *  contract,
 *  tokenId: ...,
 * });
 *
 * ```
 */
async function claimCondition(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.tokenId],
    });
}
exports.claimCondition = claimCondition;
//# sourceMappingURL=claimCondition.js.map