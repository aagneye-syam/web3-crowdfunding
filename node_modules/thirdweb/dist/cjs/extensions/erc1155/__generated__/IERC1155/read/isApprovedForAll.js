"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isApprovedForAll = exports.decodeIsApprovedForAllResult = exports.encodeIsApprovedForAll = exports.encodeIsApprovedForAllParams = exports.isIsApprovedForAllSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xe985e9c5";
const FN_INPUTS = [
    {
        type: "address",
        name: "_owner",
    },
    {
        type: "address",
        name: "_operator",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
    },
];
/**
 * Checks if the `isApprovedForAll` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `isApprovedForAll` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isIsApprovedForAllSupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = await isIsApprovedForAllSupported(contract);
 * ```
 */
async function isIsApprovedForAllSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isIsApprovedForAllSupported = isIsApprovedForAllSupported;
/**
 * Encodes the parameters for the "isApprovedForAll" function.
 * @param options - The options for the isApprovedForAll function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeIsApprovedForAllParams } "thirdweb/extensions/erc1155";
 * const result = encodeIsApprovedForAllParams({
 *  owner: ...,
 *  operator: ...,
 * });
 * ```
 */
function encodeIsApprovedForAllParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.owner, options.operator]);
}
exports.encodeIsApprovedForAllParams = encodeIsApprovedForAllParams;
/**
 * Encodes the "isApprovedForAll" function into a Hex string with its parameters.
 * @param options - The options for the isApprovedForAll function.
 * @returns The encoded hexadecimal string.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeIsApprovedForAll } "thirdweb/extensions/erc1155";
 * const result = encodeIsApprovedForAll({
 *  owner: ...,
 *  operator: ...,
 * });
 * ```
 */
function encodeIsApprovedForAll(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeIsApprovedForAllParams(options).slice(2));
}
exports.encodeIsApprovedForAll = encodeIsApprovedForAll;
/**
 * Decodes the result of the isApprovedForAll function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```ts
 * import { decodeIsApprovedForAllResult } from "thirdweb/extensions/erc1155";
 * const result = decodeIsApprovedForAllResult("...");
 * ```
 */
function decodeIsApprovedForAllResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeIsApprovedForAllResult = decodeIsApprovedForAllResult;
/**
 * Calls the "isApprovedForAll" function on the contract.
 * @param options - The options for the isApprovedForAll function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isApprovedForAll } from "thirdweb/extensions/erc1155";
 *
 * const result = await isApprovedForAll({
 *  contract,
 *  owner: ...,
 *  operator: ...,
 * });
 *
 * ```
 */
async function isApprovedForAll(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.owner, options.operator],
    });
}
exports.isApprovedForAll = isApprovedForAll;
//# sourceMappingURL=isApprovedForAll.js.map