"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.totalSupply = exports.decodeTotalSupplyResult = exports.encodeTotalSupply = exports.encodeTotalSupplyParams = exports.isTotalSupplySupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xbd85b039";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "id",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
    },
];
/**
 * Checks if the `totalSupply` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `totalSupply` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isTotalSupplySupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = await isTotalSupplySupported(contract);
 * ```
 */
async function isTotalSupplySupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isTotalSupplySupported = isTotalSupplySupported;
/**
 * Encodes the parameters for the "totalSupply" function.
 * @param options - The options for the totalSupply function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeTotalSupplyParams } "thirdweb/extensions/erc1155";
 * const result = encodeTotalSupplyParams({
 *  id: ...,
 * });
 * ```
 */
function encodeTotalSupplyParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.id]);
}
exports.encodeTotalSupplyParams = encodeTotalSupplyParams;
/**
 * Encodes the "totalSupply" function into a Hex string with its parameters.
 * @param options - The options for the totalSupply function.
 * @returns The encoded hexadecimal string.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeTotalSupply } "thirdweb/extensions/erc1155";
 * const result = encodeTotalSupply({
 *  id: ...,
 * });
 * ```
 */
function encodeTotalSupply(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeTotalSupplyParams(options).slice(2));
}
exports.encodeTotalSupply = encodeTotalSupply;
/**
 * Decodes the result of the totalSupply function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```ts
 * import { decodeTotalSupplyResult } from "thirdweb/extensions/erc1155";
 * const result = decodeTotalSupplyResult("...");
 * ```
 */
function decodeTotalSupplyResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeTotalSupplyResult = decodeTotalSupplyResult;
/**
 * Calls the "totalSupply" function on the contract.
 * @param options - The options for the totalSupply function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { totalSupply } from "thirdweb/extensions/erc1155";
 *
 * const result = await totalSupply({
 *  contract,
 *  id: ...,
 * });
 *
 * ```
 */
async function totalSupply(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.id],
    });
}
exports.totalSupply = totalSupply;
//# sourceMappingURL=totalSupply.js.map