"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStakeInfo = exports.decodeGetStakeInfoResult = exports.encodeGetStakeInfo = exports.encodeGetStakeInfoParams = exports.isGetStakeInfoSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xc3453153";
const FN_INPUTS = [
    {
        type: "address",
        name: "staker",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256[]",
        name: "_tokensStaked",
    },
    {
        type: "uint256[]",
        name: "_tokenAmounts",
    },
    {
        type: "uint256",
        name: "_totalRewards",
    },
];
/**
 * Checks if the `getStakeInfo` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getStakeInfo` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isGetStakeInfoSupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = await isGetStakeInfoSupported(contract);
 * ```
 */
async function isGetStakeInfoSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetStakeInfoSupported = isGetStakeInfoSupported;
/**
 * Encodes the parameters for the "getStakeInfo" function.
 * @param options - The options for the getStakeInfo function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeGetStakeInfoParams } "thirdweb/extensions/erc1155";
 * const result = encodeGetStakeInfoParams({
 *  staker: ...,
 * });
 * ```
 */
function encodeGetStakeInfoParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.staker]);
}
exports.encodeGetStakeInfoParams = encodeGetStakeInfoParams;
/**
 * Encodes the "getStakeInfo" function into a Hex string with its parameters.
 * @param options - The options for the getStakeInfo function.
 * @returns The encoded hexadecimal string.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeGetStakeInfo } "thirdweb/extensions/erc1155";
 * const result = encodeGetStakeInfo({
 *  staker: ...,
 * });
 * ```
 */
function encodeGetStakeInfo(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetStakeInfoParams(options).slice(2));
}
exports.encodeGetStakeInfo = encodeGetStakeInfo;
/**
 * Decodes the result of the getStakeInfo function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```ts
 * import { decodeGetStakeInfoResult } from "thirdweb/extensions/erc1155";
 * const result = decodeGetStakeInfoResult("...");
 * ```
 */
function decodeGetStakeInfoResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result);
}
exports.decodeGetStakeInfoResult = decodeGetStakeInfoResult;
/**
 * Calls the "getStakeInfo" function on the contract.
 * @param options - The options for the getStakeInfo function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { getStakeInfo } from "thirdweb/extensions/erc1155";
 *
 * const result = await getStakeInfo({
 *  contract,
 *  staker: ...,
 * });
 *
 * ```
 */
async function getStakeInfo(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.staker],
    });
}
exports.getStakeInfo = getStakeInfo;
//# sourceMappingURL=getStakeInfo.js.map