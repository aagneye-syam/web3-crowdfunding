"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStakeInfoForToken = exports.decodeGetStakeInfoForTokenResult = exports.encodeGetStakeInfoForToken = exports.encodeGetStakeInfoForTokenParams = exports.isGetStakeInfoForTokenSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x168fb5c5";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "tokenId",
    },
    {
        type: "address",
        name: "staker",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
        name: "_tokensStaked",
    },
    {
        type: "uint256",
        name: "_rewards",
    },
];
/**
 * Checks if the `getStakeInfoForToken` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getStakeInfoForToken` method is supported.
 * @extension ERC1155
 * @example
 * ```ts
 * import { isGetStakeInfoForTokenSupported } from "thirdweb/extensions/erc1155";
 *
 * const supported = await isGetStakeInfoForTokenSupported(contract);
 * ```
 */
async function isGetStakeInfoForTokenSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetStakeInfoForTokenSupported = isGetStakeInfoForTokenSupported;
/**
 * Encodes the parameters for the "getStakeInfoForToken" function.
 * @param options - The options for the getStakeInfoForToken function.
 * @returns The encoded ABI parameters.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeGetStakeInfoForTokenParams } "thirdweb/extensions/erc1155";
 * const result = encodeGetStakeInfoForTokenParams({
 *  tokenId: ...,
 *  staker: ...,
 * });
 * ```
 */
function encodeGetStakeInfoForTokenParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.tokenId, options.staker]);
}
exports.encodeGetStakeInfoForTokenParams = encodeGetStakeInfoForTokenParams;
/**
 * Encodes the "getStakeInfoForToken" function into a Hex string with its parameters.
 * @param options - The options for the getStakeInfoForToken function.
 * @returns The encoded hexadecimal string.
 * @extension ERC1155
 * @example
 * ```ts
 * import { encodeGetStakeInfoForToken } "thirdweb/extensions/erc1155";
 * const result = encodeGetStakeInfoForToken({
 *  tokenId: ...,
 *  staker: ...,
 * });
 * ```
 */
function encodeGetStakeInfoForToken(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetStakeInfoForTokenParams(options).slice(2));
}
exports.encodeGetStakeInfoForToken = encodeGetStakeInfoForToken;
/**
 * Decodes the result of the getStakeInfoForToken function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC1155
 * @example
 * ```ts
 * import { decodeGetStakeInfoForTokenResult } from "thirdweb/extensions/erc1155";
 * const result = decodeGetStakeInfoForTokenResult("...");
 * ```
 */
function decodeGetStakeInfoForTokenResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result);
}
exports.decodeGetStakeInfoForTokenResult = decodeGetStakeInfoForTokenResult;
/**
 * Calls the "getStakeInfoForToken" function on the contract.
 * @param options - The options for the getStakeInfoForToken function.
 * @returns The parsed result of the function call.
 * @extension ERC1155
 * @example
 * ```ts
 * import { getStakeInfoForToken } from "thirdweb/extensions/erc1155";
 *
 * const result = await getStakeInfoForToken({
 *  contract,
 *  tokenId: ...,
 *  staker: ...,
 * });
 *
 * ```
 */
async function getStakeInfoForToken(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.tokenId, options.staker],
    });
}
exports.getStakeInfoForToken = getStakeInfoForToken;
//# sourceMappingURL=getStakeInfoForToken.js.map