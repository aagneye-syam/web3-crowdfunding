"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getListing = exports.decodeGetListingResult = exports.encodeGetListing = exports.encodeGetListingParams = exports.isGetListingSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x107a274a";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "_listingId",
    },
];
const FN_OUTPUTS = [
    {
        type: "tuple",
        name: "listing",
        components: [
            {
                type: "uint256",
                name: "listingId",
            },
            {
                type: "uint256",
                name: "tokenId",
            },
            {
                type: "uint256",
                name: "quantity",
            },
            {
                type: "uint256",
                name: "pricePerToken",
            },
            {
                type: "uint128",
                name: "startTimestamp",
            },
            {
                type: "uint128",
                name: "endTimestamp",
            },
            {
                type: "address",
                name: "listingCreator",
            },
            {
                type: "address",
                name: "assetContract",
            },
            {
                type: "address",
                name: "currency",
            },
            {
                type: "uint8",
                name: "tokenType",
            },
            {
                type: "uint8",
                name: "status",
            },
            {
                type: "bool",
                name: "reserved",
            },
        ],
    },
];
/**
 * Checks if the `getListing` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getListing` method is supported.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { isGetListingSupported } from "thirdweb/extensions/marketplace";
 *
 * const supported = await isGetListingSupported(contract);
 * ```
 */
async function isGetListingSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetListingSupported = isGetListingSupported;
/**
 * Encodes the parameters for the "getListing" function.
 * @param options - The options for the getListing function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetListingParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetListingParams({
 *  listingId: ...,
 * });
 * ```
 */
function encodeGetListingParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.listingId]);
}
exports.encodeGetListingParams = encodeGetListingParams;
/**
 * Encodes the "getListing" function into a Hex string with its parameters.
 * @param options - The options for the getListing function.
 * @returns The encoded hexadecimal string.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetListing } "thirdweb/extensions/marketplace";
 * const result = encodeGetListing({
 *  listingId: ...,
 * });
 * ```
 */
function encodeGetListing(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetListingParams(options).slice(2));
}
exports.encodeGetListing = encodeGetListing;
/**
 * Decodes the result of the getListing function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { decodeGetListingResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetListingResult("...");
 * ```
 */
function decodeGetListingResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetListingResult = decodeGetListingResult;
/**
 * Calls the "getListing" function on the contract.
 * @param options - The options for the getListing function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { getListing } from "thirdweb/extensions/marketplace";
 *
 * const result = await getListing({
 *  contract,
 *  listingId: ...,
 * });
 *
 * ```
 */
async function getListing(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.listingId],
    });
}
exports.getListing = getListing;
//# sourceMappingURL=getListing.js.map