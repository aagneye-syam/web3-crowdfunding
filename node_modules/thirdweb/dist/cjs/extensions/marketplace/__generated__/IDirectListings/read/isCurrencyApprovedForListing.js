"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCurrencyApprovedForListing = exports.decodeIsCurrencyApprovedForListingResult = exports.encodeIsCurrencyApprovedForListing = exports.encodeIsCurrencyApprovedForListingParams = exports.isIsCurrencyApprovedForListingSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xa8519047";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "_listingId",
    },
    {
        type: "address",
        name: "_currency",
    },
];
const FN_OUTPUTS = [
    {
        type: "bool",
    },
];
/**
 * Checks if the `isCurrencyApprovedForListing` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `isCurrencyApprovedForListing` method is supported.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { isIsCurrencyApprovedForListingSupported } from "thirdweb/extensions/marketplace";
 *
 * const supported = await isIsCurrencyApprovedForListingSupported(contract);
 * ```
 */
async function isIsCurrencyApprovedForListingSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isIsCurrencyApprovedForListingSupported = isIsCurrencyApprovedForListingSupported;
/**
 * Encodes the parameters for the "isCurrencyApprovedForListing" function.
 * @param options - The options for the isCurrencyApprovedForListing function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeIsCurrencyApprovedForListingParams } "thirdweb/extensions/marketplace";
 * const result = encodeIsCurrencyApprovedForListingParams({
 *  listingId: ...,
 *  currency: ...,
 * });
 * ```
 */
function encodeIsCurrencyApprovedForListingParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.listingId, options.currency]);
}
exports.encodeIsCurrencyApprovedForListingParams = encodeIsCurrencyApprovedForListingParams;
/**
 * Encodes the "isCurrencyApprovedForListing" function into a Hex string with its parameters.
 * @param options - The options for the isCurrencyApprovedForListing function.
 * @returns The encoded hexadecimal string.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeIsCurrencyApprovedForListing } "thirdweb/extensions/marketplace";
 * const result = encodeIsCurrencyApprovedForListing({
 *  listingId: ...,
 *  currency: ...,
 * });
 * ```
 */
function encodeIsCurrencyApprovedForListing(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeIsCurrencyApprovedForListingParams(options).slice(2));
}
exports.encodeIsCurrencyApprovedForListing = encodeIsCurrencyApprovedForListing;
/**
 * Decodes the result of the isCurrencyApprovedForListing function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { decodeIsCurrencyApprovedForListingResult } from "thirdweb/extensions/marketplace";
 * const result = decodeIsCurrencyApprovedForListingResult("...");
 * ```
 */
function decodeIsCurrencyApprovedForListingResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeIsCurrencyApprovedForListingResult = decodeIsCurrencyApprovedForListingResult;
/**
 * Calls the "isCurrencyApprovedForListing" function on the contract.
 * @param options - The options for the isCurrencyApprovedForListing function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { isCurrencyApprovedForListing } from "thirdweb/extensions/marketplace";
 *
 * const result = await isCurrencyApprovedForListing({
 *  contract,
 *  listingId: ...,
 *  currency: ...,
 * });
 *
 * ```
 */
async function isCurrencyApprovedForListing(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.listingId, options.currency],
    });
}
exports.isCurrencyApprovedForListing = isCurrencyApprovedForListing;
//# sourceMappingURL=isCurrencyApprovedForListing.js.map