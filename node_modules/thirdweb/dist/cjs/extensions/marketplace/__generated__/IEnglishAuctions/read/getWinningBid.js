"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWinningBid = exports.decodeGetWinningBidResult = exports.encodeGetWinningBid = exports.encodeGetWinningBidParams = exports.isGetWinningBidSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x6891939d";
const FN_INPUTS = [
    {
        type: "uint256",
        name: "_auctionId",
    },
];
const FN_OUTPUTS = [
    {
        type: "address",
        name: "bidder",
    },
    {
        type: "address",
        name: "currency",
    },
    {
        type: "uint256",
        name: "bidAmount",
    },
];
/**
 * Checks if the `getWinningBid` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getWinningBid` method is supported.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { isGetWinningBidSupported } from "thirdweb/extensions/marketplace";
 *
 * const supported = await isGetWinningBidSupported(contract);
 * ```
 */
async function isGetWinningBidSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetWinningBidSupported = isGetWinningBidSupported;
/**
 * Encodes the parameters for the "getWinningBid" function.
 * @param options - The options for the getWinningBid function.
 * @returns The encoded ABI parameters.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetWinningBidParams } "thirdweb/extensions/marketplace";
 * const result = encodeGetWinningBidParams({
 *  auctionId: ...,
 * });
 * ```
 */
function encodeGetWinningBidParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.auctionId]);
}
exports.encodeGetWinningBidParams = encodeGetWinningBidParams;
/**
 * Encodes the "getWinningBid" function into a Hex string with its parameters.
 * @param options - The options for the getWinningBid function.
 * @returns The encoded hexadecimal string.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { encodeGetWinningBid } "thirdweb/extensions/marketplace";
 * const result = encodeGetWinningBid({
 *  auctionId: ...,
 * });
 * ```
 */
function encodeGetWinningBid(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetWinningBidParams(options).slice(2));
}
exports.encodeGetWinningBid = encodeGetWinningBid;
/**
 * Decodes the result of the getWinningBid function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { decodeGetWinningBidResult } from "thirdweb/extensions/marketplace";
 * const result = decodeGetWinningBidResult("...");
 * ```
 */
function decodeGetWinningBidResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result);
}
exports.decodeGetWinningBidResult = decodeGetWinningBidResult;
/**
 * Calls the "getWinningBid" function on the contract.
 * @param options - The options for the getWinningBid function.
 * @returns The parsed result of the function call.
 * @extension MARKETPLACE
 * @example
 * ```ts
 * import { getWinningBid } from "thirdweb/extensions/marketplace";
 *
 * const result = await getWinningBid({
 *  contract,
 *  auctionId: ...,
 * });
 *
 * ```
 */
async function getWinningBid(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.auctionId],
    });
}
exports.getWinningBid = getWinningBid;
//# sourceMappingURL=getWinningBid.js.map