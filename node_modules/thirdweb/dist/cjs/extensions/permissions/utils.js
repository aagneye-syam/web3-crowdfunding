"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRoleHash = exports.isThirdwebContractRole = exports.ALL_ROLES = void 0;
const keccak_id_js_1 = require("../../utils/any-evm/keccak-id.js");
const lru_js_1 = require("../../utils/caching/lru.js");
const hex_js_1 = require("../../utils/encoding/hex.js");
const roleMap = {
    admin: "",
    transfer: "TRANSFER_ROLE",
    minter: "MINTER_ROLE",
    pauser: "PAUSER_ROLE",
    lister: "LISTER_ROLE",
    asset: "ASSET_ROLE",
    unwrap: "UNWRAP_ROLE",
    factory: "FACTORY_ROLE",
    signer: "SIGNER_ROLE",
    metadata: "METADATA_ROLE",
    revoke: "REVOKE_ROLE",
    migration: "MIGRATION_ROLE",
};
exports.ALL_ROLES = (() => Object.keys(roleMap))();
function isThirdwebContractRole(role) {
    return role in roleMap;
}
exports.isThirdwebContractRole = isThirdwebContractRole;
const roleCache = new lru_js_1.LruMap(128);
function getRoleHash(role) {
    if (roleCache.has(role)) {
        // biome-ignore lint/style/noNonNullAssertion: we know it's in the cache
        return roleCache.get(role);
    }
    const roleHash = (() => {
        // if it's hex we pass it through as is -- assume it's a role has already
        if ((0, hex_js_1.isHex)(role)) {
            return role;
        }
        // if it's a known thirdweb role, we convert it to the role hash
        if (isThirdwebContractRole(role)) {
            if (role === "admin") {
                return (0, hex_js_1.padHex)("0x", { size: 32 });
            }
            return (0, keccak_id_js_1.keccakId)(roleMap[role]);
        }
        // otherwise we assume it's some other role and we pass it to keccakId to compute the role hash
        return (0, keccak_id_js_1.keccakId)(role);
    })();
    roleCache.set(role, roleHash);
    return roleHash;
}
exports.getRoleHash = getRoleHash;
//# sourceMappingURL=utils.js.map