"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renounceRole = exports.encodeRenounceRole = exports.encodeRenounceRoleParams = exports.isRenounceRoleSupported = exports.FN_SELECTOR = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const once_js_1 = require("../../../../../utils/promise/once.js");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x36568abe";
const FN_INPUTS = [
    {
        type: "bytes32",
        name: "role",
    },
    {
        type: "address",
        name: "account",
    },
];
const FN_OUTPUTS = [];
/**
 * Checks if the `renounceRole` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `renounceRole` method is supported.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { isRenounceRoleSupported } from "thirdweb/extensions/permissions";
 *
 * const supported = await isRenounceRoleSupported(contract);
 * ```
 */
async function isRenounceRoleSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isRenounceRoleSupported = isRenounceRoleSupported;
/**
 * Encodes the parameters for the "renounceRole" function.
 * @param options - The options for the renounceRole function.
 * @returns The encoded ABI parameters.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { encodeRenounceRoleParams } "thirdweb/extensions/permissions";
 * const result = encodeRenounceRoleParams({
 *  role: ...,
 *  account: ...,
 * });
 * ```
 */
function encodeRenounceRoleParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.role, options.account]);
}
exports.encodeRenounceRoleParams = encodeRenounceRoleParams;
/**
 * Encodes the "renounceRole" function into a Hex string with its parameters.
 * @param options - The options for the renounceRole function.
 * @returns The encoded hexadecimal string.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { encodeRenounceRole } "thirdweb/extensions/permissions";
 * const result = encodeRenounceRole({
 *  role: ...,
 *  account: ...,
 * });
 * ```
 */
function encodeRenounceRole(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeRenounceRoleParams(options).slice(2));
}
exports.encodeRenounceRole = encodeRenounceRole;
/**
 * Prepares a transaction to call the "renounceRole" function on the contract.
 * @param options - The options for the "renounceRole" function.
 * @returns A prepared transaction object.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { renounceRole } from "thirdweb/extensions/permissions";
 *
 * const transaction = renounceRole({
 *  contract,
 *  role: ...,
 *  account: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function renounceRole(options) {
    const asyncOptions = (0, once_js_1.once)(async () => {
        return "asyncParams" in options ? await options.asyncParams() : options;
    });
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: async () => {
            const resolvedOptions = await asyncOptions();
            return [resolvedOptions.role, resolvedOptions.account];
        },
        value: async () => (await asyncOptions()).overrides?.value,
        accessList: async () => (await asyncOptions()).overrides?.accessList,
        gas: async () => (await asyncOptions()).overrides?.gas,
        gasPrice: async () => (await asyncOptions()).overrides?.gasPrice,
        maxFeePerGas: async () => (await asyncOptions()).overrides?.maxFeePerGas,
        maxPriorityFeePerGas: async () => (await asyncOptions()).overrides?.maxPriorityFeePerGas,
        nonce: async () => (await asyncOptions()).overrides?.nonce,
        extraGas: async () => (await asyncOptions()).overrides?.extraGas,
    });
}
exports.renounceRole = renounceRole;
//# sourceMappingURL=renounceRole.js.map