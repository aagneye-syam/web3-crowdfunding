"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRoleAdmin = exports.decodeGetRoleAdminResult = exports.encodeGetRoleAdmin = exports.encodeGetRoleAdminParams = exports.isGetRoleAdminSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x248a9ca3";
const FN_INPUTS = [
    {
        type: "bytes32",
        name: "role",
    },
];
const FN_OUTPUTS = [
    {
        type: "bytes32",
    },
];
/**
 * Checks if the `getRoleAdmin` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getRoleAdmin` method is supported.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { isGetRoleAdminSupported } from "thirdweb/extensions/permissions";
 *
 * const supported = await isGetRoleAdminSupported(contract);
 * ```
 */
async function isGetRoleAdminSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetRoleAdminSupported = isGetRoleAdminSupported;
/**
 * Encodes the parameters for the "getRoleAdmin" function.
 * @param options - The options for the getRoleAdmin function.
 * @returns The encoded ABI parameters.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { encodeGetRoleAdminParams } "thirdweb/extensions/permissions";
 * const result = encodeGetRoleAdminParams({
 *  role: ...,
 * });
 * ```
 */
function encodeGetRoleAdminParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.role]);
}
exports.encodeGetRoleAdminParams = encodeGetRoleAdminParams;
/**
 * Encodes the "getRoleAdmin" function into a Hex string with its parameters.
 * @param options - The options for the getRoleAdmin function.
 * @returns The encoded hexadecimal string.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { encodeGetRoleAdmin } "thirdweb/extensions/permissions";
 * const result = encodeGetRoleAdmin({
 *  role: ...,
 * });
 * ```
 */
function encodeGetRoleAdmin(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetRoleAdminParams(options).slice(2));
}
exports.encodeGetRoleAdmin = encodeGetRoleAdmin;
/**
 * Decodes the result of the getRoleAdmin function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { decodeGetRoleAdminResult } from "thirdweb/extensions/permissions";
 * const result = decodeGetRoleAdminResult("...");
 * ```
 */
function decodeGetRoleAdminResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetRoleAdminResult = decodeGetRoleAdminResult;
/**
 * Calls the "getRoleAdmin" function on the contract.
 * @param options - The options for the getRoleAdmin function.
 * @returns The parsed result of the function call.
 * @extension PERMISSIONS
 * @example
 * ```ts
 * import { getRoleAdmin } from "thirdweb/extensions/permissions";
 *
 * const result = await getRoleAdmin({
 *  contract,
 *  role: ...,
 * });
 *
 * ```
 */
async function getRoleAdmin(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.role],
    });
}
exports.getRoleAdmin = getRoleAdmin;
//# sourceMappingURL=getRoleAdmin.js.map