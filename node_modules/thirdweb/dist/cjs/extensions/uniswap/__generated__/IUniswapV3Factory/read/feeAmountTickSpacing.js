"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.feeAmountTickSpacing = exports.decodeFeeAmountTickSpacingResult = exports.encodeFeeAmountTickSpacing = exports.encodeFeeAmountTickSpacingParams = exports.isFeeAmountTickSpacingSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x22afcccb";
const FN_INPUTS = [
    {
        type: "uint24",
        name: "fee",
    },
];
const FN_OUTPUTS = [
    {
        type: "int24",
    },
];
/**
 * Checks if the `feeAmountTickSpacing` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `feeAmountTickSpacing` method is supported.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { isFeeAmountTickSpacingSupported } from "thirdweb/extensions/uniswap";
 *
 * const supported = await isFeeAmountTickSpacingSupported(contract);
 * ```
 */
async function isFeeAmountTickSpacingSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isFeeAmountTickSpacingSupported = isFeeAmountTickSpacingSupported;
/**
 * Encodes the parameters for the "feeAmountTickSpacing" function.
 * @param options - The options for the feeAmountTickSpacing function.
 * @returns The encoded ABI parameters.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { encodeFeeAmountTickSpacingParams } "thirdweb/extensions/uniswap";
 * const result = encodeFeeAmountTickSpacingParams({
 *  fee: ...,
 * });
 * ```
 */
function encodeFeeAmountTickSpacingParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.fee]);
}
exports.encodeFeeAmountTickSpacingParams = encodeFeeAmountTickSpacingParams;
/**
 * Encodes the "feeAmountTickSpacing" function into a Hex string with its parameters.
 * @param options - The options for the feeAmountTickSpacing function.
 * @returns The encoded hexadecimal string.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { encodeFeeAmountTickSpacing } "thirdweb/extensions/uniswap";
 * const result = encodeFeeAmountTickSpacing({
 *  fee: ...,
 * });
 * ```
 */
function encodeFeeAmountTickSpacing(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeFeeAmountTickSpacingParams(options).slice(2));
}
exports.encodeFeeAmountTickSpacing = encodeFeeAmountTickSpacing;
/**
 * Decodes the result of the feeAmountTickSpacing function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { decodeFeeAmountTickSpacingResult } from "thirdweb/extensions/uniswap";
 * const result = decodeFeeAmountTickSpacingResult("...");
 * ```
 */
function decodeFeeAmountTickSpacingResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeFeeAmountTickSpacingResult = decodeFeeAmountTickSpacingResult;
/**
 * Calls the "feeAmountTickSpacing" function on the contract.
 * @param options - The options for the feeAmountTickSpacing function.
 * @returns The parsed result of the function call.
 * @extension UNISWAP
 * @example
 * ```ts
 * import { feeAmountTickSpacing } from "thirdweb/extensions/uniswap";
 *
 * const result = await feeAmountTickSpacing({
 *  contract,
 *  fee: ...,
 * });
 *
 * ```
 */
async function feeAmountTickSpacing(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.fee],
    });
}
exports.feeAmountTickSpacing = feeAmountTickSpacing;
//# sourceMappingURL=feeAmountTickSpacing.js.map