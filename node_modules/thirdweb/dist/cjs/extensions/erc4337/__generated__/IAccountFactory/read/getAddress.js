"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAddress = exports.decodeGetAddressResult = exports.encodeGetAddress = exports.encodeGetAddressParams = exports.isGetAddressSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x8878ed33";
const FN_INPUTS = [
    {
        type: "address",
        name: "adminSigner",
    },
    {
        type: "bytes",
        name: "data",
    },
];
const FN_OUTPUTS = [
    {
        type: "address",
    },
];
/**
 * Checks if the `getAddress` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAddress` method is supported.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isGetAddressSupported } from "thirdweb/extensions/erc4337";
 *
 * const supported = await isGetAddressSupported(contract);
 * ```
 */
async function isGetAddressSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetAddressSupported = isGetAddressSupported;
/**
 * Encodes the parameters for the "getAddress" function.
 * @param options - The options for the getAddress function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetAddressParams } "thirdweb/extensions/erc4337";
 * const result = encodeGetAddressParams({
 *  adminSigner: ...,
 *  data: ...,
 * });
 * ```
 */
function encodeGetAddressParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.adminSigner, options.data]);
}
exports.encodeGetAddressParams = encodeGetAddressParams;
/**
 * Encodes the "getAddress" function into a Hex string with its parameters.
 * @param options - The options for the getAddress function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetAddress } "thirdweb/extensions/erc4337";
 * const result = encodeGetAddress({
 *  adminSigner: ...,
 *  data: ...,
 * });
 * ```
 */
function encodeGetAddress(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetAddressParams(options).slice(2));
}
exports.encodeGetAddress = encodeGetAddress;
/**
 * Decodes the result of the getAddress function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeGetAddressResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetAddressResult("...");
 * ```
 */
function decodeGetAddressResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetAddressResult = decodeGetAddressResult;
/**
 * Calls the "getAddress" function on the contract.
 * @param options - The options for the getAddress function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { getAddress } from "thirdweb/extensions/erc4337";
 *
 * const result = await getAddress({
 *  contract,
 *  adminSigner: ...,
 *  data: ...,
 * });
 *
 * ```
 */
async function getAddress(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.adminSigner, options.data],
    });
}
exports.getAddress = getAddress;
//# sourceMappingURL=getAddress.js.map