"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDepositInfo = exports.decodeGetDepositInfoResult = exports.encodeGetDepositInfo = exports.encodeGetDepositInfoParams = exports.isGetDepositInfoSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x5287ce12";
const FN_INPUTS = [
    {
        type: "address",
        name: "account",
    },
];
const FN_OUTPUTS = [
    {
        type: "tuple",
        name: "info",
        components: [
            {
                type: "uint112",
                name: "deposit",
            },
            {
                type: "bool",
                name: "staked",
            },
            {
                type: "uint112",
                name: "stake",
            },
            {
                type: "uint32",
                name: "unstakeDelaySec",
            },
            {
                type: "uint48",
                name: "withdrawTime",
            },
        ],
    },
];
/**
 * Checks if the `getDepositInfo` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getDepositInfo` method is supported.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isGetDepositInfoSupported } from "thirdweb/extensions/erc4337";
 *
 * const supported = await isGetDepositInfoSupported(contract);
 * ```
 */
async function isGetDepositInfoSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetDepositInfoSupported = isGetDepositInfoSupported;
/**
 * Encodes the parameters for the "getDepositInfo" function.
 * @param options - The options for the getDepositInfo function.
 * @returns The encoded ABI parameters.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetDepositInfoParams } "thirdweb/extensions/erc4337";
 * const result = encodeGetDepositInfoParams({
 *  account: ...,
 * });
 * ```
 */
function encodeGetDepositInfoParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.account]);
}
exports.encodeGetDepositInfoParams = encodeGetDepositInfoParams;
/**
 * Encodes the "getDepositInfo" function into a Hex string with its parameters.
 * @param options - The options for the getDepositInfo function.
 * @returns The encoded hexadecimal string.
 * @extension ERC4337
 * @example
 * ```ts
 * import { encodeGetDepositInfo } "thirdweb/extensions/erc4337";
 * const result = encodeGetDepositInfo({
 *  account: ...,
 * });
 * ```
 */
function encodeGetDepositInfo(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetDepositInfoParams(options).slice(2));
}
exports.encodeGetDepositInfo = encodeGetDepositInfo;
/**
 * Decodes the result of the getDepositInfo function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeGetDepositInfoResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetDepositInfoResult("...");
 * ```
 */
function decodeGetDepositInfoResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetDepositInfoResult = decodeGetDepositInfoResult;
/**
 * Calls the "getDepositInfo" function on the contract.
 * @param options - The options for the getDepositInfo function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { getDepositInfo } from "thirdweb/extensions/erc4337";
 *
 * const result = await getDepositInfo({
 *  contract,
 *  account: ...,
 * });
 *
 * ```
 */
async function getDepositInfo(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.account],
    });
}
exports.getDepositInfo = getDepositInfo;
//# sourceMappingURL=getDepositInfo.js.map