"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAllSigners = exports.decodeGetAllSignersResult = exports.isGetAllSignersSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xd42f2f35";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        type: "tuple[]",
        name: "signers",
        components: [
            {
                type: "address",
                name: "signer",
            },
            {
                type: "address[]",
                name: "approvedTargets",
            },
            {
                type: "uint256",
                name: "nativeTokenLimitPerTransaction",
            },
            {
                type: "uint128",
                name: "startTimestamp",
            },
            {
                type: "uint128",
                name: "endTimestamp",
            },
        ],
    },
];
/**
 * Checks if the `getAllSigners` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAllSigners` method is supported.
 * @extension ERC4337
 * @example
 * ```ts
 * import { isGetAllSignersSupported } from "thirdweb/extensions/erc4337";
 *
 * const supported = await isGetAllSignersSupported(contract);
 * ```
 */
async function isGetAllSignersSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetAllSignersSupported = isGetAllSignersSupported;
/**
 * Decodes the result of the getAllSigners function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC4337
 * @example
 * ```ts
 * import { decodeGetAllSignersResult } from "thirdweb/extensions/erc4337";
 * const result = decodeGetAllSignersResult("...");
 * ```
 */
function decodeGetAllSignersResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetAllSignersResult = decodeGetAllSignersResult;
/**
 * Calls the "getAllSigners" function on the contract.
 * @param options - The options for the getAllSigners function.
 * @returns The parsed result of the function call.
 * @extension ERC4337
 * @example
 * ```ts
 * import { getAllSigners } from "thirdweb/extensions/erc4337";
 *
 * const result = await getAllSigners({
 *  contract,
 * });
 *
 * ```
 */
async function getAllSigners(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
exports.getAllSigners = getAllSigners;
//# sourceMappingURL=getAllSigners.js.map