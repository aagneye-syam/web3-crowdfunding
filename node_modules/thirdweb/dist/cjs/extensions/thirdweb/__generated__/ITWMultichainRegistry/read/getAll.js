"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAll = exports.decodeGetAllResult = exports.encodeGetAll = exports.encodeGetAllParams = exports.isGetAllSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xeb077342";
const FN_INPUTS = [
    {
        type: "address",
        name: "_deployer",
    },
];
const FN_OUTPUTS = [
    {
        type: "tuple[]",
        name: "allDeployments",
        components: [
            {
                type: "address",
                name: "deploymentAddress",
            },
            {
                type: "uint256",
                name: "chainId",
            },
            {
                type: "string",
                name: "metadataURI",
            },
        ],
    },
];
/**
 * Checks if the `getAll` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getAll` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isGetAllSupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isGetAllSupported(contract);
 * ```
 */
async function isGetAllSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetAllSupported = isGetAllSupported;
/**
 * Encodes the parameters for the "getAll" function.
 * @param options - The options for the getAll function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetAllParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetAllParams({
 *  deployer: ...,
 * });
 * ```
 */
function encodeGetAllParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.deployer]);
}
exports.encodeGetAllParams = encodeGetAllParams;
/**
 * Encodes the "getAll" function into a Hex string with its parameters.
 * @param options - The options for the getAll function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetAll } "thirdweb/extensions/thirdweb";
 * const result = encodeGetAll({
 *  deployer: ...,
 * });
 * ```
 */
function encodeGetAll(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetAllParams(options).slice(2));
}
exports.encodeGetAll = encodeGetAll;
/**
 * Decodes the result of the getAll function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetAllResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetAllResult("...");
 * ```
 */
function decodeGetAllResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetAllResult = decodeGetAllResult;
/**
 * Calls the "getAll" function on the contract.
 * @param options - The options for the getAll function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getAll } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getAll({
 *  contract,
 *  deployer: ...,
 * });
 *
 * ```
 */
async function getAll(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.deployer],
    });
}
exports.getAll = getAll;
//# sourceMappingURL=getAll.js.map