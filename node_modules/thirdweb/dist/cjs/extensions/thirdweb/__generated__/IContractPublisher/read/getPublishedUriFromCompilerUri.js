"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPublishedUriFromCompilerUri = exports.decodeGetPublishedUriFromCompilerUriResult = exports.encodeGetPublishedUriFromCompilerUri = exports.encodeGetPublishedUriFromCompilerUriParams = exports.isGetPublishedUriFromCompilerUriSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x819e992f";
const FN_INPUTS = [
    {
        type: "string",
        name: "compilerMetadataUri",
    },
];
const FN_OUTPUTS = [
    {
        type: "string[]",
        name: "publishedMetadataUris",
    },
];
/**
 * Checks if the `getPublishedUriFromCompilerUri` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getPublishedUriFromCompilerUri` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isGetPublishedUriFromCompilerUriSupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isGetPublishedUriFromCompilerUriSupported(contract);
 * ```
 */
async function isGetPublishedUriFromCompilerUriSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetPublishedUriFromCompilerUriSupported = isGetPublishedUriFromCompilerUriSupported;
/**
 * Encodes the parameters for the "getPublishedUriFromCompilerUri" function.
 * @param options - The options for the getPublishedUriFromCompilerUri function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetPublishedUriFromCompilerUriParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetPublishedUriFromCompilerUriParams({
 *  compilerMetadataUri: ...,
 * });
 * ```
 */
function encodeGetPublishedUriFromCompilerUriParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.compilerMetadataUri]);
}
exports.encodeGetPublishedUriFromCompilerUriParams = encodeGetPublishedUriFromCompilerUriParams;
/**
 * Encodes the "getPublishedUriFromCompilerUri" function into a Hex string with its parameters.
 * @param options - The options for the getPublishedUriFromCompilerUri function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetPublishedUriFromCompilerUri } "thirdweb/extensions/thirdweb";
 * const result = encodeGetPublishedUriFromCompilerUri({
 *  compilerMetadataUri: ...,
 * });
 * ```
 */
function encodeGetPublishedUriFromCompilerUri(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetPublishedUriFromCompilerUriParams(options).slice(2));
}
exports.encodeGetPublishedUriFromCompilerUri = encodeGetPublishedUriFromCompilerUri;
/**
 * Decodes the result of the getPublishedUriFromCompilerUri function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetPublishedUriFromCompilerUriResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetPublishedUriFromCompilerUriResult("...");
 * ```
 */
function decodeGetPublishedUriFromCompilerUriResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetPublishedUriFromCompilerUriResult = decodeGetPublishedUriFromCompilerUriResult;
/**
 * Calls the "getPublishedUriFromCompilerUri" function on the contract.
 * @param options - The options for the getPublishedUriFromCompilerUri function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getPublishedUriFromCompilerUri } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getPublishedUriFromCompilerUri({
 *  contract,
 *  compilerMetadataUri: ...,
 * });
 *
 * ```
 */
async function getPublishedUriFromCompilerUri(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.compilerMetadataUri],
    });
}
exports.getPublishedUriFromCompilerUri = getPublishedUriFromCompilerUri;
//# sourceMappingURL=getPublishedUriFromCompilerUri.js.map