"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPublisherProfileUri = exports.decodeGetPublisherProfileUriResult = exports.encodeGetPublisherProfileUri = exports.encodeGetPublisherProfileUriParams = exports.isGetPublisherProfileUriSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x4f781675";
const FN_INPUTS = [
    {
        type: "address",
        name: "publisher",
    },
];
const FN_OUTPUTS = [
    {
        type: "string",
        name: "uri",
    },
];
/**
 * Checks if the `getPublisherProfileUri` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getPublisherProfileUri` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isGetPublisherProfileUriSupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isGetPublisherProfileUriSupported(contract);
 * ```
 */
async function isGetPublisherProfileUriSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetPublisherProfileUriSupported = isGetPublisherProfileUriSupported;
/**
 * Encodes the parameters for the "getPublisherProfileUri" function.
 * @param options - The options for the getPublisherProfileUri function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetPublisherProfileUriParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetPublisherProfileUriParams({
 *  publisher: ...,
 * });
 * ```
 */
function encodeGetPublisherProfileUriParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.publisher]);
}
exports.encodeGetPublisherProfileUriParams = encodeGetPublisherProfileUriParams;
/**
 * Encodes the "getPublisherProfileUri" function into a Hex string with its parameters.
 * @param options - The options for the getPublisherProfileUri function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetPublisherProfileUri } "thirdweb/extensions/thirdweb";
 * const result = encodeGetPublisherProfileUri({
 *  publisher: ...,
 * });
 * ```
 */
function encodeGetPublisherProfileUri(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetPublisherProfileUriParams(options).slice(2));
}
exports.encodeGetPublisherProfileUri = encodeGetPublisherProfileUri;
/**
 * Decodes the result of the getPublisherProfileUri function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetPublisherProfileUriResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetPublisherProfileUriResult("...");
 * ```
 */
function decodeGetPublisherProfileUriResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetPublisherProfileUriResult = decodeGetPublisherProfileUriResult;
/**
 * Calls the "getPublisherProfileUri" function on the contract.
 * @param options - The options for the getPublisherProfileUri function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getPublisherProfileUri } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getPublisherProfileUri({
 *  contract,
 *  publisher: ...,
 * });
 *
 * ```
 */
async function getPublisherProfileUri(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.publisher],
    });
}
exports.getPublisherProfileUri = getPublisherProfileUri;
//# sourceMappingURL=getPublisherProfileUri.js.map