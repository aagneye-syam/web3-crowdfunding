"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPublishedContract = exports.decodeGetPublishedContractResult = exports.encodeGetPublishedContract = exports.encodeGetPublishedContractParams = exports.isGetPublishedContractSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x7ec047fa";
const FN_INPUTS = [
    {
        type: "address",
        name: "publisher",
    },
    {
        type: "string",
        name: "contractId",
    },
];
const FN_OUTPUTS = [
    {
        type: "tuple",
        name: "published",
        components: [
            {
                type: "string",
                name: "contractId",
            },
            {
                type: "uint256",
                name: "publishTimestamp",
            },
            {
                type: "string",
                name: "publishMetadataUri",
            },
            {
                type: "bytes32",
                name: "bytecodeHash",
            },
            {
                type: "address",
                name: "implementation",
            },
        ],
    },
];
/**
 * Checks if the `getPublishedContract` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getPublishedContract` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isGetPublishedContractSupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isGetPublishedContractSupported(contract);
 * ```
 */
async function isGetPublishedContractSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetPublishedContractSupported = isGetPublishedContractSupported;
/**
 * Encodes the parameters for the "getPublishedContract" function.
 * @param options - The options for the getPublishedContract function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetPublishedContractParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetPublishedContractParams({
 *  publisher: ...,
 *  contractId: ...,
 * });
 * ```
 */
function encodeGetPublishedContractParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.publisher,
        options.contractId,
    ]);
}
exports.encodeGetPublishedContractParams = encodeGetPublishedContractParams;
/**
 * Encodes the "getPublishedContract" function into a Hex string with its parameters.
 * @param options - The options for the getPublishedContract function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetPublishedContract } "thirdweb/extensions/thirdweb";
 * const result = encodeGetPublishedContract({
 *  publisher: ...,
 *  contractId: ...,
 * });
 * ```
 */
function encodeGetPublishedContract(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetPublishedContractParams(options).slice(2));
}
exports.encodeGetPublishedContract = encodeGetPublishedContract;
/**
 * Decodes the result of the getPublishedContract function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetPublishedContractResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetPublishedContractResult("...");
 * ```
 */
function decodeGetPublishedContractResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeGetPublishedContractResult = decodeGetPublishedContractResult;
/**
 * Calls the "getPublishedContract" function on the contract.
 * @param options - The options for the getPublishedContract function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getPublishedContract } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getPublishedContract({
 *  contract,
 *  publisher: ...,
 *  contractId: ...,
 * });
 *
 * ```
 */
async function getPublishedContract(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.publisher, options.contractId],
    });
}
exports.getPublishedContract = getPublishedContract;
//# sourceMappingURL=getPublishedContract.js.map