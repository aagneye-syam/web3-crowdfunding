"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFeeInfo = exports.decodeGetFeeInfoResult = exports.encodeGetFeeInfo = exports.encodeGetFeeInfoParams = exports.isGetFeeInfoSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x85b49ad0";
const FN_INPUTS = [
    {
        type: "address",
        name: "_proxy",
    },
    {
        type: "uint256",
        name: "_type",
    },
];
const FN_OUTPUTS = [
    {
        type: "address",
        name: "recipient",
    },
    {
        type: "uint256",
        name: "bps",
    },
];
/**
 * Checks if the `getFeeInfo` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `getFeeInfo` method is supported.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { isGetFeeInfoSupported } from "thirdweb/extensions/thirdweb";
 *
 * const supported = await isGetFeeInfoSupported(contract);
 * ```
 */
async function isGetFeeInfoSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isGetFeeInfoSupported = isGetFeeInfoSupported;
/**
 * Encodes the parameters for the "getFeeInfo" function.
 * @param options - The options for the getFeeInfo function.
 * @returns The encoded ABI parameters.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetFeeInfoParams } "thirdweb/extensions/thirdweb";
 * const result = encodeGetFeeInfoParams({
 *  proxy: ...,
 *  type: ...,
 * });
 * ```
 */
function encodeGetFeeInfoParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.proxy, options.type]);
}
exports.encodeGetFeeInfoParams = encodeGetFeeInfoParams;
/**
 * Encodes the "getFeeInfo" function into a Hex string with its parameters.
 * @param options - The options for the getFeeInfo function.
 * @returns The encoded hexadecimal string.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { encodeGetFeeInfo } "thirdweb/extensions/thirdweb";
 * const result = encodeGetFeeInfo({
 *  proxy: ...,
 *  type: ...,
 * });
 * ```
 */
function encodeGetFeeInfo(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeGetFeeInfoParams(options).slice(2));
}
exports.encodeGetFeeInfo = encodeGetFeeInfo;
/**
 * Decodes the result of the getFeeInfo function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { decodeGetFeeInfoResult } from "thirdweb/extensions/thirdweb";
 * const result = decodeGetFeeInfoResult("...");
 * ```
 */
function decodeGetFeeInfoResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result);
}
exports.decodeGetFeeInfoResult = decodeGetFeeInfoResult;
/**
 * Calls the "getFeeInfo" function on the contract.
 * @param options - The options for the getFeeInfo function.
 * @returns The parsed result of the function call.
 * @extension THIRDWEB
 * @example
 * ```ts
 * import { getFeeInfo } from "thirdweb/extensions/thirdweb";
 *
 * const result = await getFeeInfo({
 *  contract,
 *  proxy: ...,
 *  type: ...,
 * });
 *
 * ```
 */
async function getFeeInfo(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.proxy, options.type],
    });
}
exports.getFeeInfo = getFeeInfo;
//# sourceMappingURL=getFeeInfo.js.map