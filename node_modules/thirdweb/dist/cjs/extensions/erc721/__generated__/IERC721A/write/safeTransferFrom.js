"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeTransferFrom = exports.encodeSafeTransferFrom = exports.encodeSafeTransferFromParams = exports.isSafeTransferFromSupported = exports.FN_SELECTOR = void 0;
const prepare_contract_call_js_1 = require("../../../../../transaction/prepare-contract-call.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const once_js_1 = require("../../../../../utils/promise/once.js");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x42842e0e";
const FN_INPUTS = [
    {
        type: "address",
        name: "from",
    },
    {
        type: "address",
        name: "to",
    },
    {
        type: "uint256",
        name: "tokenId",
    },
];
const FN_OUTPUTS = [];
/**
 * Checks if the `safeTransferFrom` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `safeTransferFrom` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isSafeTransferFromSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = await isSafeTransferFromSupported(contract);
 * ```
 */
async function isSafeTransferFromSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isSafeTransferFromSupported = isSafeTransferFromSupported;
/**
 * Encodes the parameters for the "safeTransferFrom" function.
 * @param options - The options for the safeTransferFrom function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeSafeTransferFromParams } "thirdweb/extensions/erc721";
 * const result = encodeSafeTransferFromParams({
 *  from: ...,
 *  to: ...,
 *  tokenId: ...,
 * });
 * ```
 */
function encodeSafeTransferFromParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [
        options.from,
        options.to,
        options.tokenId,
    ]);
}
exports.encodeSafeTransferFromParams = encodeSafeTransferFromParams;
/**
 * Encodes the "safeTransferFrom" function into a Hex string with its parameters.
 * @param options - The options for the safeTransferFrom function.
 * @returns The encoded hexadecimal string.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeSafeTransferFrom } "thirdweb/extensions/erc721";
 * const result = encodeSafeTransferFrom({
 *  from: ...,
 *  to: ...,
 *  tokenId: ...,
 * });
 * ```
 */
function encodeSafeTransferFrom(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeSafeTransferFromParams(options).slice(2));
}
exports.encodeSafeTransferFrom = encodeSafeTransferFrom;
/**
 * Prepares a transaction to call the "safeTransferFrom" function on the contract.
 * @param options - The options for the "safeTransferFrom" function.
 * @returns A prepared transaction object.
 * @extension ERC721
 * @example
 * ```ts
 * import { safeTransferFrom } from "thirdweb/extensions/erc721";
 *
 * const transaction = safeTransferFrom({
 *  contract,
 *  from: ...,
 *  to: ...,
 *  tokenId: ...,
 *  overrides: {
 *    ...
 *  }
 * });
 *
 * // Send the transaction
 * ...
 *
 * ```
 */
function safeTransferFrom(options) {
    const asyncOptions = (0, once_js_1.once)(async () => {
        return "asyncParams" in options ? await options.asyncParams() : options;
    });
    return (0, prepare_contract_call_js_1.prepareContractCall)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: async () => {
            const resolvedOptions = await asyncOptions();
            return [
                resolvedOptions.from,
                resolvedOptions.to,
                resolvedOptions.tokenId,
            ];
        },
        value: async () => (await asyncOptions()).overrides?.value,
        accessList: async () => (await asyncOptions()).overrides?.accessList,
        gas: async () => (await asyncOptions()).overrides?.gas,
        gasPrice: async () => (await asyncOptions()).overrides?.gasPrice,
        maxFeePerGas: async () => (await asyncOptions()).overrides?.maxFeePerGas,
        maxPriorityFeePerGas: async () => (await asyncOptions()).overrides?.maxPriorityFeePerGas,
        nonce: async () => (await asyncOptions()).overrides?.nonce,
        extraGas: async () => (await asyncOptions()).overrides?.extraGas,
    });
}
exports.safeTransferFrom = safeTransferFrom;
//# sourceMappingURL=safeTransferFrom.js.map