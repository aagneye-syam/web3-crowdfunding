"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyClaim = exports.encodeVerifyClaim = exports.encodeVerifyClaimParams = exports.isVerifyClaimSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x2f92023a";
const FN_INPUTS = [
    {
        type: "address",
        name: "_claimer",
    },
    {
        type: "uint256",
        name: "_quantity",
    },
];
const FN_OUTPUTS = [];
/**
 * Checks if the `verifyClaim` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `verifyClaim` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isVerifyClaimSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = await isVerifyClaimSupported(contract);
 * ```
 */
async function isVerifyClaimSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isVerifyClaimSupported = isVerifyClaimSupported;
/**
 * Encodes the parameters for the "verifyClaim" function.
 * @param options - The options for the verifyClaim function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeVerifyClaimParams } "thirdweb/extensions/erc721";
 * const result = encodeVerifyClaimParams({
 *  claimer: ...,
 *  quantity: ...,
 * });
 * ```
 */
function encodeVerifyClaimParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.claimer, options.quantity]);
}
exports.encodeVerifyClaimParams = encodeVerifyClaimParams;
/**
 * Encodes the "verifyClaim" function into a Hex string with its parameters.
 * @param options - The options for the verifyClaim function.
 * @returns The encoded hexadecimal string.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeVerifyClaim } "thirdweb/extensions/erc721";
 * const result = encodeVerifyClaim({
 *  claimer: ...,
 *  quantity: ...,
 * });
 * ```
 */
function encodeVerifyClaim(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeVerifyClaimParams(options).slice(2));
}
exports.encodeVerifyClaim = encodeVerifyClaim;
/**
 * Calls the "verifyClaim" function on the contract.
 * @param options - The options for the verifyClaim function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { verifyClaim } from "thirdweb/extensions/erc721";
 *
 * const result = await verifyClaim({
 *  contract,
 *  claimer: ...,
 *  quantity: ...,
 * });
 *
 * ```
 */
async function verifyClaim(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.claimer, options.quantity],
    });
}
exports.verifyClaim = verifyClaim;
//# sourceMappingURL=verifyClaim.js.map