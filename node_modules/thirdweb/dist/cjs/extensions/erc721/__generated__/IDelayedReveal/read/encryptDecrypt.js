"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encryptDecrypt = exports.decodeEncryptDecryptResult = exports.encodeEncryptDecrypt = exports.encodeEncryptDecryptParams = exports.isEncryptDecryptSupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0xe7150322";
const FN_INPUTS = [
    {
        type: "bytes",
        name: "data",
    },
    {
        type: "bytes",
        name: "key",
    },
];
const FN_OUTPUTS = [
    {
        type: "bytes",
        name: "result",
    },
];
/**
 * Checks if the `encryptDecrypt` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `encryptDecrypt` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isEncryptDecryptSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = await isEncryptDecryptSupported(contract);
 * ```
 */
async function isEncryptDecryptSupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isEncryptDecryptSupported = isEncryptDecryptSupported;
/**
 * Encodes the parameters for the "encryptDecrypt" function.
 * @param options - The options for the encryptDecrypt function.
 * @returns The encoded ABI parameters.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeEncryptDecryptParams } "thirdweb/extensions/erc721";
 * const result = encodeEncryptDecryptParams({
 *  data: ...,
 *  key: ...,
 * });
 * ```
 */
function encodeEncryptDecryptParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.data, options.key]);
}
exports.encodeEncryptDecryptParams = encodeEncryptDecryptParams;
/**
 * Encodes the "encryptDecrypt" function into a Hex string with its parameters.
 * @param options - The options for the encryptDecrypt function.
 * @returns The encoded hexadecimal string.
 * @extension ERC721
 * @example
 * ```ts
 * import { encodeEncryptDecrypt } "thirdweb/extensions/erc721";
 * const result = encodeEncryptDecrypt({
 *  data: ...,
 *  key: ...,
 * });
 * ```
 */
function encodeEncryptDecrypt(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeEncryptDecryptParams(options).slice(2));
}
exports.encodeEncryptDecrypt = encodeEncryptDecrypt;
/**
 * Decodes the result of the encryptDecrypt function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeEncryptDecryptResult } from "thirdweb/extensions/erc721";
 * const result = decodeEncryptDecryptResult("...");
 * ```
 */
function decodeEncryptDecryptResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result)[0];
}
exports.decodeEncryptDecryptResult = decodeEncryptDecryptResult;
/**
 * Calls the "encryptDecrypt" function on the contract.
 * @param options - The options for the encryptDecrypt function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { encryptDecrypt } from "thirdweb/extensions/erc721";
 *
 * const result = await encryptDecrypt({
 *  contract,
 *  data: ...,
 *  key: ...,
 * });
 *
 * ```
 */
async function encryptDecrypt(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.data, options.key],
    });
}
exports.encryptDecrypt = encryptDecrypt;
//# sourceMappingURL=encryptDecrypt.js.map