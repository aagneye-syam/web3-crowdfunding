"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNFT = void 0;
const fetchTokenMetadata_js_1 = require("../../../utils/nft/fetchTokenMetadata.js");
const parseNft_js_1 = require("../../../utils/nft/parseNft.js");
const tokenURI_js_1 = require("../__generated__/IERC721A/read/tokenURI.js");
/**
 * Retrieves information about a specific ERC721 non-fungible token (NFT).
 * @param options - The options for retrieving the NFT.
 * @returns A promise that resolves to the NFT object.
 * @extension ERC721
 * @example
 * ```ts
 * import { getNFT } from "thirdweb/extensions/erc721";
 * const nft = await getNFT({
 *  contract,
 *  tokenId: 1n,
 * });
 * ```
 */
async function getNFT(options) {
    const [uri, owner] = await Promise.all([
        (0, tokenURI_js_1.tokenURI)(options).catch(() => null),
        options.includeOwner
            ? Promise.resolve().then(() => require("../__generated__/IERC721A/read/ownerOf.js")).then((m) => m.ownerOf(options))
                .catch(() => null)
            : null,
    ]);
    if (!uri) {
        return (0, parseNft_js_1.parseNFT)({
            id: options.tokenId,
            type: "ERC721",
            uri: "",
        }, {
            tokenId: options.tokenId,
            tokenUri: "",
            type: "ERC721",
            owner,
        });
    }
    return (0, parseNft_js_1.parseNFT)(await (0, fetchTokenMetadata_js_1.fetchTokenMetadata)({
        client: options.contract.client,
        tokenId: options.tokenId,
        tokenUri: uri,
    }).catch(() => ({
        id: options.tokenId,
        type: "ERC721",
        uri,
    })), {
        tokenId: options.tokenId,
        tokenUri: uri,
        type: "ERC721",
        owner,
    });
}
exports.getNFT = getNFT;
//# sourceMappingURL=getNFT.js.map