"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ABI = exports.decodeABIResult = exports.encodeABI = exports.encodeABIParams = exports.isABISupported = exports.FN_SELECTOR = void 0;
const read_contract_js_1 = require("../../../../../transaction/read-contract.js");
const encodeAbiParameters_js_1 = require("../../../../../utils/abi/encodeAbiParameters.js");
const viem_1 = require("viem");
const detectExtension_js_1 = require("../../../../../utils/bytecode/detectExtension.js");
exports.FN_SELECTOR = "0x2203ab56";
const FN_INPUTS = [
    {
        type: "bytes32",
        name: "name",
    },
    {
        type: "uint256",
        name: "contentTypes",
    },
];
const FN_OUTPUTS = [
    {
        type: "uint256",
    },
    {
        type: "bytes",
    },
];
/**
 * Checks if the `ABI` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `ABI` method is supported.
 * @extension ENS
 * @example
 * ```ts
 * import { isABISupported } from "thirdweb/extensions/ens";
 *
 * const supported = await isABISupported(contract);
 * ```
 */
async function isABISupported(contract) {
    return (0, detectExtension_js_1.detectMethod)({
        contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
exports.isABISupported = isABISupported;
/**
 * Encodes the parameters for the "ABI" function.
 * @param options - The options for the ABI function.
 * @returns The encoded ABI parameters.
 * @extension ENS
 * @example
 * ```ts
 * import { encodeABIParams } "thirdweb/extensions/ens";
 * const result = encodeABIParams({
 *  name: ...,
 *  contentTypes: ...,
 * });
 * ```
 */
function encodeABIParams(options) {
    return (0, encodeAbiParameters_js_1.encodeAbiParameters)(FN_INPUTS, [options.name, options.contentTypes]);
}
exports.encodeABIParams = encodeABIParams;
/**
 * Encodes the "ABI" function into a Hex string with its parameters.
 * @param options - The options for the ABI function.
 * @returns The encoded hexadecimal string.
 * @extension ENS
 * @example
 * ```ts
 * import { encodeABI } "thirdweb/extensions/ens";
 * const result = encodeABI({
 *  name: ...,
 *  contentTypes: ...,
 * });
 * ```
 */
function encodeABI(options) {
    // we do a "manual" concat here to avoid the overhead of the "concatHex" function
    // we can do this because we know the specific formats of the values
    return (exports.FN_SELECTOR +
        encodeABIParams(options).slice(2));
}
exports.encodeABI = encodeABI;
/**
 * Decodes the result of the ABI function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ENS
 * @example
 * ```ts
 * import { decodeABIResult } from "thirdweb/extensions/ens";
 * const result = decodeABIResult("...");
 * ```
 */
function decodeABIResult(result) {
    return (0, viem_1.decodeAbiParameters)(FN_OUTPUTS, result);
}
exports.decodeABIResult = decodeABIResult;
/**
 * Calls the "ABI" function on the contract.
 * @param options - The options for the ABI function.
 * @returns The parsed result of the function call.
 * @extension ENS
 * @example
 * ```ts
 * import { ABI } from "thirdweb/extensions/ens";
 *
 * const result = await ABI({
 *  contract,
 *  name: ...,
 *  contentTypes: ...,
 * });
 *
 * ```
 */
async function ABI(options) {
    return (0, read_contract_js_1.readContract)({
        contract: options.contract,
        method: [exports.FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [options.name, options.contentTypes],
    });
}
exports.ABI = ABI;
//# sourceMappingURL=ABI.js.map