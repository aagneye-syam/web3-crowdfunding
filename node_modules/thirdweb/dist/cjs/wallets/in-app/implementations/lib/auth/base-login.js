"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseLogin = void 0;
const auth_js_1 = require("../../interfaces/auth.js");
const abstract_login_js_1 = require("./abstract-login.js");
/**
 *
 */
class BaseLogin extends abstract_login_js_1.AbstractLogin {
    constructor() {
        super(...arguments);
        Object.defineProperty(this, "closeWindow", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ isWindowOpenedByFn, win, closeOpenedWindow, }) => {
                if (isWindowOpenedByFn) {
                    win?.close();
                }
                else {
                    if (win && closeOpenedWindow) {
                        closeOpenedWindow(win);
                    }
                    else if (win) {
                        win.close();
                    }
                }
            }
        });
    }
    async getOauthLoginUrl(authProvider) {
        const result = await this.LoginQuerier.call({
            procedureName: "getHeadlessOauthLoginLink",
            params: { authProvider },
        });
        return result;
    }
    /**
     * @internal
     */
    async loginWithModal() {
        await this.preLogin();
        const result = await this.LoginQuerier.call({
            procedureName: "loginWithThirdwebModal",
            params: undefined,
            showIframe: true,
        });
        return this.postLogin(result);
    }
    /**
     * @internal
     */
    async loginWithEmailOtp({ email, }) {
        await this.preLogin();
        const result = await this.LoginQuerier.call({
            procedureName: "loginWithThirdwebModal",
            params: { email },
            showIframe: true,
        });
        return this.postLogin(result);
    }
    getOauthPopUpSizing(authProvider) {
        switch (authProvider) {
            case auth_js_1.AuthProvider.FACEBOOK:
                return "width=715, height=555";
            default:
                return "width=350, height=500";
        }
    }
    /**
     * @internal
     */
    async loginWithOauth(args) {
        let win = args?.openedWindow;
        let isWindowOpenedByFn = false;
        if (!win) {
            win = window.open("", "Login", this.getOauthPopUpSizing(args.oauthProvider));
            isWindowOpenedByFn = true;
        }
        if (!win) {
            throw new Error("Something went wrong opening pop-up");
        }
        // logout the user
        // fetch the url to open the login window from iframe
        const [{ loginLink }] = await Promise.all([
            this.getOauthLoginUrl(args.oauthProvider),
            this.preLogin(),
        ]);
        win.location.href = loginLink;
        // listen to result from the login window
        const result = await new Promise((resolve, reject) => {
            // detect when the user closes the login window
            const pollTimer = window.setInterval(async () => {
                if (!win) {
                    return;
                }
                if (win.closed) {
                    clearInterval(pollTimer);
                    window.removeEventListener("message", messageListener);
                    reject(new Error("User closed login window"));
                }
            }, 1000);
            const messageListener = async (event) => {
                if (event.origin !== this.baseUrl) {
                    return;
                }
                if (typeof event.data !== "object") {
                    reject(new Error("Invalid event data"));
                    return;
                }
                switch (event.data.eventType) {
                    case "userLoginSuccess": {
                        window.removeEventListener("message", messageListener);
                        clearInterval(pollTimer);
                        this.closeWindow({
                            isWindowOpenedByFn,
                            win,
                            closeOpenedWindow: args?.closeOpenedWindow,
                        });
                        if (event.data.authResult) {
                            resolve(event.data.authResult);
                        }
                        break;
                    }
                    case "userLoginFailed": {
                        window.removeEventListener("message", messageListener);
                        clearInterval(pollTimer);
                        this.closeWindow({
                            isWindowOpenedByFn,
                            win,
                            closeOpenedWindow: args?.closeOpenedWindow,
                        });
                        reject(new Error(event.data.error));
                        break;
                    }
                    case "injectDeveloperClientId": {
                        win?.postMessage({
                            eventType: "injectDeveloperClientIdResult",
                            developerClientId: this.client.clientId,
                            authOption: args.oauthProvider,
                        }, this.baseUrl);
                        break;
                    }
                }
            };
            window.addEventListener("message", messageListener);
        });
        return this.postLogin({
            storedToken: { ...result.storedToken, shouldStoreCookieString: true },
            walletDetails: { ...result.walletDetails, isIframeStorageEnabled: false },
        });
    }
    /**
     * @internal
     */
    async loginWithCustomJwt({ encryptionKey, jwt, }) {
        await this.preLogin();
        const result = await this.LoginQuerier.call({
            procedureName: "loginWithCustomJwt",
            params: { encryptionKey, jwt },
        });
        return this.postLogin(result);
    }
    /**
     * @internal
     */
    async loginWithCustomAuthEndpoint({ encryptionKey, payload, }) {
        await this.preLogin();
        const result = await this.LoginQuerier.call({
            procedureName: "loginWithCustomAuthEndpoint",
            params: { encryptionKey, payload },
        });
        return this.postLogin(result);
    }
    /**
     * @internal
     */
    async verifyEmailLoginOtp({ email, otp, recoveryCode, }) {
        const result = await this.LoginQuerier.call({
            procedureName: "verifyThirdwebEmailLoginOtp",
            params: { email, otp, recoveryCode },
        });
        return this.postLogin(result);
    }
    /**
     * @internal
     */
    async verifySmsLoginOtp({ phoneNumber, otp, recoveryCode, }) {
        const result = await this.LoginQuerier.call({
            procedureName: "verifyThirdwebSmsLoginOtp",
            params: { phoneNumber, otp, recoveryCode },
        });
        return this.postLogin(result);
    }
}
exports.BaseLogin = BaseLogin;
//# sourceMappingURL=base-login.js.map