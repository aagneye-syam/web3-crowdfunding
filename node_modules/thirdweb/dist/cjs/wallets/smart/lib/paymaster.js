"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPaymasterAndData = void 0;
const hex_js_1 = require("../../../utils/encoding/hex.js");
const fetch_js_1 = require("../../../utils/fetch.js");
const constants_js_1 = require("./constants.js");
const utils_js_1 = require("./utils.js");
/**
 * TODO Docs
 * @internal
 */
async function getPaymasterAndData(args) {
    const { userOp, options } = args;
    if (options.overrides?.paymaster) {
        return options.overrides?.paymaster(userOp);
    }
    const headers = {
        "Content-Type": "application/json",
    };
    const client = options.client;
    const paymasterUrl = (0, constants_js_1.getDefaultPaymasterUrl)(options.chain);
    const entrypoint = options.overrides?.entrypointAddress ?? constants_js_1.ENTRYPOINT_ADDRESS_v0_6;
    // Ask the paymaster to sign the transaction and return a valid paymasterAndData value.
    const fetchWithHeaders = (0, fetch_js_1.getClientFetch)(client);
    const response = await fetchWithHeaders(paymasterUrl, {
        method: "POST",
        headers,
        body: JSON.stringify({
            jsonrpc: "2.0",
            id: 1,
            method: "pm_sponsorUserOperation",
            params: [(0, utils_js_1.hexlifyUserOp)(userOp), entrypoint],
        }),
    });
    const res = await response.json();
    if (!response.ok) {
        const error = res.error || response.statusText;
        const code = res.code || "UNKNOWN";
        throw new Error(`Paymaster error: ${error}
Status: ${response.status}
Code: ${code}`);
    }
    if (constants_js_1.DEBUG) {
        console.debug("Paymaster result:", res);
    }
    if (res.result) {
        // some paymasters return a string, some return an object with more data
        if (typeof res.result === "string") {
            return {
                paymasterAndData: res.result,
            };
        }
        return {
            paymasterAndData: res.result.paymasterAndData,
            verificationGasLimit: res.result.verificationGasLimit
                ? (0, hex_js_1.hexToBigInt)(res.result.verificationGasLimit)
                : undefined,
            preVerificationGas: res.result.preVerificationGas
                ? (0, hex_js_1.hexToBigInt)(res.result.preVerificationGas)
                : undefined,
            callGasLimit: res.result.callGasLimit
                ? (0, hex_js_1.hexToBigInt)(res.result.callGasLimit)
                : undefined,
        };
    }
    const error = res.error?.message || res.error || response.statusText || "unknown error";
    throw new Error(`Paymaster error from ${paymasterUrl}: ${error}`);
}
exports.getPaymasterAndData = getPaymasterAndData;
//# sourceMappingURL=paymaster.js.map