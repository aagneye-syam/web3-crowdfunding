"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchProofsERC1155 = void 0;
const getContractMetadata_js_1 = require("../../../extensions/common/read/getContractMetadata.js");
const MerkleTree_js_1 = require("../../../merkletree/MerkleTree.js");
const download_js_1 = require("../../../storage/download.js");
const hash_entry_erc1155_js_1 = require("./hash-entry-erc1155.js");
async function fetchProofsERC1155(options) {
    const { contract, merkleRoot, recipient } = options;
    // 1. fetch merkle data from contract URI
    const metadata = await (0, getContractMetadata_js_1.getContractMetadata)({
        contract,
    });
    const merkleData = metadata.merkle || {};
    const snapshotUri = merkleData[merkleRoot];
    if (!snapshotUri) {
        console.log("no snapshot uri");
        return null;
    }
    // 2. download snapshot data
    const response = await (0, download_js_1.download)({
        client: contract.client,
        uri: snapshotUri,
    });
    const merkleInfo = await response.json();
    // 3. download shard data based off the user address
    const shardId = recipient.slice(2, 2 + merkleInfo.shardNybbles).toLowerCase();
    const uri = merkleInfo.baseUri.endsWith("/")
        ? merkleInfo.baseUri
        : `${merkleInfo.baseUri}/`;
    let shardData;
    try {
        const constructedShardUri = `${uri}${shardId}.json`;
        const shard = await (0, download_js_1.download)({
            client: contract.client,
            uri: constructedShardUri,
        });
        shardData = await shard.json();
    }
    catch (e) {
        // if the file can't be fetched it means claimer not in merkle tree
        return null;
    }
    // 4. hash all the entries in that shard and construct the sub merkle tree
    const hashedEntries = await Promise.all(shardData.entries.map(async (entry) => {
        return (0, hash_entry_erc1155_js_1.hashEntryERC1155)({
            entry,
        });
    }));
    const tree = new MerkleTree_js_1.MerkleTree(hashedEntries);
    // 5. get the proof for the claimer + the sub merkle tree root
    const entry = shardData.entries.find((i) => i.recipient.toLowerCase() === recipient.toLowerCase());
    if (!entry) {
        return null;
    }
    const proof = tree
        .getHexProof(await (0, hash_entry_erc1155_js_1.hashEntryERC1155)({
        entry,
    }))
        .concat(shardData.proofs);
    return {
        proof,
        recipient: recipient,
        tokenId: BigInt(entry.tokenId),
        quantity: BigInt(entry.amount),
    };
}
exports.fetchProofsERC1155 = fetchProofsERC1155;
//# sourceMappingURL=fetch-proofs-erc1155.js.map