"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectMethod = void 0;
const viem_1 = require("viem");
const get_bytecode_js_1 = require("../../contract/actions/get-bytecode.js");
/**
 * Detects if the specified method is present in the contract bytecode.
 * @param options - The options for detecting the extension.
 * @returns A promise that resolves to a boolean indicating if the extension is detected.
 * @example
 * ```ts
 * import { detectMethod } from "thirdweb/utils/extensions/detect.js";
 * const hasDecimals = await detectMethod({
 *  contract,
 *  method: "function decimals() view returns (uint8)",
 * });
 * ```
 * @contract
 */
async function detectMethod(options) {
    const bytecode = await (0, get_bytecode_js_1.getBytecode)(options.contract);
    return detectMethodInBytecode({ bytecode, method: options.method });
}
exports.detectMethod = detectMethod;
/**
 * Detects if a specific method is present in the bytecode of a contract.
 * @param options - The options for detecting the method in the bytecode.
 * @returns A boolean indicating whether the method is present in the bytecode.
 * @internal
 */
function detectMethodInBytecode(options) {
    // if we can't get the bytecode we know the contract is not deployed
    if (options.bytecode === "0x") {
        return false;
    }
    // we strip the leading `0x` from the function selector
    const fnSelector = Array.isArray(options.method)
        ? options.method[0]
        : (0, viem_1.toFunctionSelector)(options.method);
    // indexOf is slightly faster than includes
    return options.bytecode.indexOf(fnSelector.slice(2)) > -1;
}
//# sourceMappingURL=detectExtension.js.map