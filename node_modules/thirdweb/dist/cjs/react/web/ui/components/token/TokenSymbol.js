"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenSymbol = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const useChainQuery_js_1 = require("../../../../core/hooks/others/useChainQuery.js");
const nativeToken_js_1 = require("../../ConnectWallet/screens/nativeToken.js");
const index_js_1 = require("../../design-system/index.js");
const Skeleton_js_1 = require("../Skeleton.js");
const text_js_1 = require("../text.js");
/**
 * @internal
 */
function TokenSymbol(props) {
    if (!(0, nativeToken_js_1.isNativeToken)(props.token)) {
        return ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: props.size, color: props.color || "primaryText", inline: props.inline, children: props.token.symbol }));
    }
    return ((0, jsx_runtime_1.jsx)(NativeTokenSymbol, { chain: props.chain, size: props.size, color: props.color, inline: props.inline }));
}
exports.TokenSymbol = TokenSymbol;
function NativeTokenSymbol(props) {
    const chainQuery = (0, useChainQuery_js_1.useChainQuery)(props.chain);
    if (!chainQuery.isFetched) {
        return (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "70px", height: index_js_1.fontSize[props.size] });
    }
    return ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: props.size, color: props.color || "primaryText", inline: props.inline, children: chainQuery.data?.nativeCurrency.symbol ?? "ETH" }));
}
//# sourceMappingURL=TokenSymbol.js.map