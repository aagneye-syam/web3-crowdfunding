"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletImage = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const mipdStore_js_1 = require("../../../../wallets/injected/mipdStore.js");
const index_js_1 = require("../../../../wallets/manager/index.js");
const wallet_hooks_js_1 = require("../../../core/hooks/wallets/wallet-hooks.js");
const storage_js_1 = require("../../../core/storage.js");
const storage_js_2 = require("../../wallets/in-app/storage.js");
const dataUris_js_1 = require("../ConnectWallet/icons/dataUris.js");
const socialLogins_js_1 = require("../ConnectWallet/icons/socialLogins.js");
const index_js_2 = require("../design-system/index.js");
const useWalletInfo_js_1 = require("../hooks/useWalletInfo.js");
const Img_js_1 = require("./Img.js");
// Note: Must not use useConnectUI here
/**
 * @internal
 */
function WalletImage(props) {
    const [image, setImage] = (0, react_1.useState)(undefined);
    const activeWallet = (0, wallet_hooks_js_1.useActiveWallet)();
    (0, react_1.useEffect)(() => {
        async function fetchImage() {
            // show EOA icon for external wallets
            // show auth provider icon for in-app wallets
            // show the admin EOA icon for smart
            const storage = (0, storage_js_1.getStorage)();
            let activeEOAId = props.id;
            if (props.id === "smart") {
                const storedId = await (0, index_js_1.getStoredActiveWalletId)(storage);
                if (storedId) {
                    activeEOAId = storedId;
                }
            }
            let mipdImage = (0, mipdStore_js_1.getInstalledWalletProviders)().find((provider) => provider.info.rdns === activeEOAId)?.info.icon;
            if (activeEOAId === "inApp" &&
                activeWallet &&
                (activeWallet.id === "inApp" || activeWallet.id === "smart")) {
                // when showing an active wallet icon - check last auth provider and override the IAW icon
                const lastAuthProvider = await (0, storage_js_2.getLastAuthProvider)(storage);
                switch (lastAuthProvider) {
                    case "google":
                        mipdImage = socialLogins_js_1.googleIconUri;
                        break;
                    case "apple":
                        mipdImage = socialLogins_js_1.appleIconUri;
                        break;
                    case "facebook":
                        mipdImage = socialLogins_js_1.facebookIconUri;
                        break;
                    case "phone":
                        mipdImage = dataUris_js_1.phoneIcon;
                        break;
                    case "email":
                        mipdImage = dataUris_js_1.emailIcon;
                        break;
                    case "passkey":
                        mipdImage = dataUris_js_1.passkeyIcon;
                        break;
                }
            }
            setImage(mipdImage);
        }
        fetchImage();
    }, [props.id, activeWallet]);
    if (image) {
        return ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { src: image, width: props.size, height: props.size, loading: "eager", client: props.client, style: {
                borderRadius: index_js_2.radius.md,
            } }));
    }
    return ((0, jsx_runtime_1.jsx)(WalletImageQuery, { id: props.id, size: props.size, client: props.client }));
}
exports.WalletImage = WalletImage;
function WalletImageQuery(props) {
    const walletImage = (0, useWalletInfo_js_1.useWalletImage)(props.id);
    return ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { client: props.client, src: walletImage.isLoading ? undefined : walletImage.data || "", fallbackImage: dataUris_js_1.genericWalletIcon, width: props.size, height: props.size, loading: "eager", style: {
            borderRadius: index_js_2.radius.md,
        } }));
}
//# sourceMappingURL=WalletImage.js.map