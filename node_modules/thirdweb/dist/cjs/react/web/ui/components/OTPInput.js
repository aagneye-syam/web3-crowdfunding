"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OTPInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_1 = require("react");
const CustomThemeProvider_js_1 = require("../design-system/CustomThemeProvider.js");
const index_js_1 = require("../design-system/index.js");
const basic_js_1 = require("./basic.js");
const formElements_js_1 = require("./formElements.js");
/**
 * @internal
 */
function OTPInput(props) {
    const otp = props.value.split("");
    const setOTP = (newOTP) => {
        props.setValue(newOTP.join(""));
    };
    const inputToFocusIndex = otp.length;
    const boxEls = (0, react_1.useRef)([]);
    (0, react_1.useEffect)(() => {
        if (boxEls.current[inputToFocusIndex]) {
            requestAnimationFrame(() => {
                boxEls.current[inputToFocusIndex]?.focus();
            });
        }
    }, [inputToFocusIndex]);
    return ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { center: "x", gap: "sm", flex: "row", children: new Array(props.digits).fill(null).map((_, i) => {
            return ((0, jsx_runtime_1.jsx)(OTPInputBox, { "data-error": props.isInvalid, ref: (e) => {
                    boxEls.current[i] = e;
                }, value: otp[i] ?? "", type: "text", pattern: "[a-zA-Z0-9]*", variant: "outline", inputMode: "text", onPaste: (e) => {
                    const pastedData = e.clipboardData.getData("text/plain");
                    const newOTP = pastedData.slice(0, props.digits).split("");
                    setOTP(newOTP);
                    e.preventDefault();
                }, onKeyDown: (e) => {
                    if (e.key === "Enter") {
                        if (props.onEnter) {
                            props.onEnter();
                            return;
                        }
                    }
                    if (e.key === "ArrowLeft") {
                        if (i === 0) {
                            return;
                        }
                        boxEls.current[i - 1]?.focus();
                        return;
                    }
                    if (e.key === "ArrowRight") {
                        if (i === props.digits - 1) {
                            return;
                        }
                        boxEls.current[i + 1]?.focus();
                        return;
                    }
                    if (e.key === "e" || e.key === ".") {
                        e.preventDefault();
                        return;
                    }
                    if (e.key === "Backspace") {
                        if (i === 0) {
                            return;
                        }
                        const newOTP = otp.slice(0, -1);
                        setOTP(newOTP);
                    }
                }, onChange: (e) => {
                    const value = e.target.value;
                    if (value.length > 1) {
                        setOTP(value.split(""));
                        return;
                    }
                    if (!/\d/.test(value) && value !== "") {
                        e.preventDefault();
                        return;
                    }
                    const newOTP = [...otp];
                    const index = i > inputToFocusIndex - 1 ? inputToFocusIndex : i;
                    newOTP[index] = value;
                    setOTP(newOTP);
                } }, i));
        }) }));
}
exports.OTPInput = OTPInput;
const OTPInputBox = /* @__PURE__ */ (0, styled_1.default)(formElements_js_1.Input)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        appearance: "none",
        WebkitAppearance: "none",
        width: "40px",
        height: "40px",
        textAlign: "center",
        fontSize: index_js_1.fontSize.md,
        padding: index_js_1.spacing.xs,
        [index_js_1.media.mobile]: {
            width: "35px",
            height: "35px",
        },
        "&[data-verify-status='invalid']": {
            color: theme.colors.danger,
            borderColor: theme.colors.danger,
        },
    };
});
//# sourceMappingURL=OTPInput.js.map