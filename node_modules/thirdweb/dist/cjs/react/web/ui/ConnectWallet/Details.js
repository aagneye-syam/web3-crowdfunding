"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectedWalletDetails = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_icons_1 = require("@radix-ui/react-icons");
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const ethereum_js_1 = require("../../../../chains/chain-definitions/ethereum.js");
const contract_js_1 = require("../../../../contract/contract.js");
const resolve_avatar_js_1 = require("../../../../extensions/ens/resolve-avatar.js");
const resolve_name_js_1 = require("../../../../extensions/ens/resolve-name.js");
const is_contract_deployed_js_1 = require("../../../../utils/bytecode/is-contract-deployed.js");
const useChainQuery_js_1 = require("../../../core/hooks/others/useChainQuery.js");
const useWalletBalance_js_1 = require("../../../core/hooks/others/useWalletBalance.js");
const useWalletConnectionCtx_js_1 = require("../../../core/hooks/others/useWalletConnectionCtx.js");
const wallet_hooks_js_1 = require("../../../core/hooks/wallets/wallet-hooks.js");
const addresses_js_1 = require("../../../core/utils/addresses.js");
const isSmartWallet_js_1 = require("../../utils/isSmartWallet.js");
const ChainIcon_js_1 = require("../components/ChainIcon.js");
const CopyIcon_js_1 = require("../components/CopyIcon.js");
const Img_js_1 = require("../components/Img.js");
const Modal_js_1 = require("../components/Modal.js");
const Skeleton_js_1 = require("../components/Skeleton.js");
const Spacer_js_1 = require("../components/Spacer.js");
const Spinner_js_1 = require("../components/Spinner.js");
const WalletImage_js_1 = require("../components/WalletImage.js");
const basic_js_1 = require("../components/basic.js");
const buttons_js_1 = require("../components/buttons.js");
const text_js_1 = require("../components/text.js");
const CustomThemeProvider_js_1 = require("../design-system/CustomThemeProvider.js");
const animations_js_1 = require("../design-system/animations.js");
const elements_js_1 = require("../design-system/elements.js");
const index_js_1 = require("../design-system/index.js");
const NetworkSelector_js_1 = require("./NetworkSelector.js");
const constants_js_1 = require("./constants.js");
const FundsIcon_js_1 = require("./icons/FundsIcon.js");
const SmartAccountBadgeIcon_js_1 = require("./icons/SmartAccountBadgeIcon.js");
const WalletIcon_js_1 = require("./icons/WalletIcon.js");
const dataUris_js_1 = require("./icons/dataUris.js");
const LazyBuyScreen_js_1 = require("./screens/Buy/LazyBuyScreen.js");
const BuyTxHistory_js_1 = require("./screens/Buy/tx-history/BuyTxHistory.js");
const ReceiveFunds_js_1 = require("./screens/ReceiveFunds.js");
const SendFunds_js_1 = require("./screens/SendFunds.js");
const ViewFunds_js_1 = require("./screens/ViewFunds.js");
const TW_CONNECTED_WALLET = "tw-connected-wallet";
const LocalhostChainId = 1337;
/**
 * @internal
 */
const ConnectedWalletDetails = (props) => {
    const { connectLocale: locale, client } = (0, useWalletConnectionCtx_js_1.useConnectUI)();
    const activeWallet = (0, wallet_hooks_js_1.useActiveWallet)();
    const activeAccount = (0, wallet_hooks_js_1.useActiveAccount)();
    const walletChain = (0, wallet_hooks_js_1.useActiveWalletChain)();
    const chainQuery = (0, useChainQuery_js_1.useChainQuery)(walletChain);
    const { disconnect } = (0, wallet_hooks_js_1.useDisconnect)();
    // prefetch chains metadata with low concurrency
    (0, useChainQuery_js_1.useChainsQuery)(props.chains, 5);
    const tokenAddress = walletChain && props.detailsButton?.displayBalanceToken
        ? props.detailsButton.displayBalanceToken[Number(walletChain.id)]
        : undefined;
    const balanceQuery = (0, useWalletBalance_js_1.useWalletBalance)({
        chain: walletChain ? walletChain : undefined,
        tokenAddress,
        address: activeAccount?.address,
        client,
    });
    const [screen, setScreen] = (0, react_1.useState)("main");
    const [isOpen, setIsOpen] = (0, react_1.useState)(false);
    const ensNameQuery = (0, react_query_1.useQuery)({
        queryKey: ["ens-name", activeAccount?.address],
        enabled: !!activeAccount?.address,
        queryFn: () => (0, resolve_name_js_1.resolveName)({
            client,
            address: activeAccount?.address || "",
            resolverChain: ethereum_js_1.ethereum,
        }),
    });
    const ensAvatarQuery = (0, react_query_1.useQuery)({
        queryKey: ["ens-avatar", ensNameQuery.data],
        enabled: !!ensNameQuery.data,
        queryFn: async () => (0, resolve_avatar_js_1.resolveAvatar)({
            client,
            name: ensNameQuery.data || "",
        }),
    });
    // const personalAccount = (activeWallet as WalletWithPersonalAccount)
    //   ?.personalAccount;
    // const smartWallet = activeWallet
    //   ? personalAccountToSmartAccountMap.get(activeWallet.getAccount())
    //   : undefined;
    const disableSwitchChain = !activeWallet?.switchChain;
    // const isActuallyMetaMask =
    //   activeWallet && activeWallet instanceof MetaMaskWallet;
    const shortAddress = activeAccount?.address
        ? (0, addresses_js_1.shortenString)(activeAccount.address, false)
        : "";
    const addressOrENS = ensNameQuery.data || shortAddress;
    (0, react_1.useEffect)(() => {
        if (!isOpen) {
            (0, constants_js_1.onModalUnmount)(() => {
                setScreen("main");
            });
        }
    }, [isOpen]);
    // if (activeWallet && "isSmartWallet" in activeWallet) {
    //   avatarOrWalletIconUrl = smartWalletMetadata.iconUrl;
    // }
    const isNetworkMismatch = props.chain && walletChain && walletChain.id !== props.chain.id;
    // Note: Must wrap the `SwitchNetworkButton` in a fragment to avoid warning from radix-ui
    // Note: Must wrap the `detailsButton.render` in an container element
    const trigger = props.detailsButton?.render ? ((0, jsx_runtime_1.jsx)("div", { children: (0, jsx_runtime_1.jsx)(props.detailsButton.render, {}) })) : props.chain && isNetworkMismatch ? ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(SwitchNetworkButton, { style: props.switchButton?.style, className: props.switchButton?.className, switchNetworkBtnTitle: props.switchButton?.label, targetChain: props.chain }) })) : ((0, jsx_runtime_1.jsxs)(WalletInfoButton, { type: "button", className: `${TW_CONNECTED_WALLET} ${props.detailsButton?.className || ""}`, style: props.detailsButton?.style, "data-test": "connected-wallet-details", children: [ensAvatarQuery.data ? ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { src: ensAvatarQuery.data, width: index_js_1.iconSize.lg, height: index_js_1.iconSize.lg, style: {
                    borderRadius: index_js_1.radius.sm,
                }, client: client })) : activeWallet?.id ? ((0, jsx_runtime_1.jsx)(WalletImage_js_1.WalletImage, { size: index_js_1.iconSize.lg, id: activeWallet.id, client: client })) : ((0, jsx_runtime_1.jsx)(WalletIcon_js_1.WalletIcon, { size: index_js_1.iconSize.lg })), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "xxs", children: [addressOrENS ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "primaryText", weight: 500, className: `${TW_CONNECTED_WALLET}__address`, children: addressOrENS })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.fontSize.sm, width: "88px" })), balanceQuery.data ? ((0, jsx_runtime_1.jsxs)(text_js_1.Text, { className: `${TW_CONNECTED_WALLET}__balance`, size: "xs", weight: 500, children: [Number(balanceQuery.data.displayValue).toFixed(3), " ", balanceQuery.data.symbol] })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.fontSize.xs, width: "82px" }))] })] }));
    const networkSwitcherButton = ((0, jsx_runtime_1.jsxs)(MenuButton, { type: "button", disabled: disableSwitchChain, onClick: () => {
            setScreen("network-switcher");
        }, "data-variant": "primary", children: [(0, jsx_runtime_1.jsx)("div", { style: {
                    display: "flex",
                    alignItems: "center",
                    position: "relative",
                }, children: chainQuery.data ? ((0, jsx_runtime_1.jsx)(ChainIcon_js_1.ChainIcon, { chainIcon: chainQuery.data?.icon, size: index_js_1.iconSize.md, active: true, client: client })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: index_js_1.iconSize.md, width: index_js_1.iconSize.md })) }), chainQuery.isLoading ? ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "16px", width: "200px" })) : ((0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", multiline: true, children: chainQuery.data?.name || `Unknown chain #${walletChain?.id}` })), (0, jsx_runtime_1.jsx)(StyledChevronRightIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm, style: {
                    flexShrink: 0,
                    marginLeft: "auto",
                } })] }));
    let content = ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "lg", flex: "column", center: "x", children: [ensAvatarQuery.data ? ((0, jsx_runtime_1.jsx)(Img_js_1.Img, { src: ensAvatarQuery.data, width: index_js_1.iconSize.xxl, height: index_js_1.iconSize.xxl, style: {
                            borderRadius: index_js_1.radius.lg,
                        }, client: client })) : activeWallet?.id ? ((0, jsx_runtime_1.jsx)(WalletImage_js_1.WalletImage, { size: index_js_1.iconSize.xxl, id: activeWallet.id, client: client })) : ((0, jsx_runtime_1.jsx)(WalletIcon_js_1.WalletIcon, { size: index_js_1.iconSize.xxl })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(ConnectedToSmartWallet, {}), (activeWallet?.id === "embedded" || activeWallet?.id === "inApp") && ((0, jsx_runtime_1.jsx)(InAppWalletUserInfo, {})), (0, jsx_runtime_1.jsxs)("div", { style: {
                            display: "flex",
                            gap: index_js_1.spacing.xxs,
                            alignItems: "center",
                            transform: "translateX(10px)",
                        }, "data-test": "connected-wallet-address", "data-address": activeAccount?.address, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", weight: 500, size: "md", children: addressOrENS }), (0, jsx_runtime_1.jsx)(buttons_js_1.IconButton, { style: {
                                    padding: "3px",
                                }, "data-test": "copy-address", children: (0, jsx_runtime_1.jsx)(CopyIcon_js_1.CopyIcon, { text: activeAccount?.address || "", tip: locale.copyAddress, side: "top" }) })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxs" }), (0, jsx_runtime_1.jsxs)(text_js_1.Text, { weight: 500, size: "sm", children: [balanceQuery.data ? (Number(balanceQuery.data.displayValue).toFixed(3)) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { height: "1em", width: "100px" })), " ", balanceQuery.data?.symbol, " "] })] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: "lg", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { style: {
                        display: "grid",
                        gridTemplateColumns: "1fr 1fr 1fr",
                        gap: index_js_1.spacing.xs,
                    }, children: [(0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "outline", style: {
                                fontSize: index_js_1.fontSize.sm,
                                display: "flex",
                                gap: index_js_1.spacing.xs,
                                alignItems: "center",
                                padding: index_js_1.spacing.sm,
                            }, onClick: () => {
                                setScreen("send");
                            }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { color: "secondaryText", flex: "row", center: "both", children: (0, jsx_runtime_1.jsx)(react_icons_1.PaperPlaneIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm, style: {
                                            transform: "translateY(-10%) rotate(-45deg) ",
                                        } }) }), locale.send] }), (0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "outline", style: {
                                fontSize: index_js_1.fontSize.sm,
                                display: "flex",
                                gap: index_js_1.spacing.xs,
                                alignItems: "center",
                                padding: index_js_1.spacing.sm,
                            }, onClick: () => {
                                setScreen("receive");
                            }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { color: "secondaryText", flex: "row", center: "both", children: [(0, jsx_runtime_1.jsx)(react_icons_1.PinBottomIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }), " "] }), locale.receive, " "] }), (0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "outline", style: {
                                fontSize: index_js_1.fontSize.sm,
                                display: "flex",
                                gap: index_js_1.spacing.xs,
                                alignItems: "center",
                                padding: index_js_1.spacing.sm,
                            }, onClick: () => {
                                setScreen("buy");
                            }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { color: "secondaryText", flex: "row", center: "both", children: (0, jsx_runtime_1.jsx)(react_icons_1.PlusIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm }) }), locale.buy] })] }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { px: "md", children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", style: {
                            gap: "1px",
                        }, children: [networkSwitcherButton, (0, jsx_runtime_1.jsxs)(MenuButton, { onClick: () => {
                                    setScreen("pending-tx");
                                }, style: {
                                    fontSize: index_js_1.fontSize.sm,
                                }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.TextAlignJustifyIcon, { width: index_js_1.iconSize.md, height: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", gap: "xs", center: "y", children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: locale.transactions }) })] }), (0, jsx_runtime_1.jsxs)(MenuButton, { onClick: () => {
                                    setScreen("view-funds");
                                }, style: {
                                    fontSize: index_js_1.fontSize.sm,
                                }, children: [(0, jsx_runtime_1.jsx)(Img_js_1.Img, { width: index_js_1.iconSize.md, height: index_js_1.iconSize.md, src: dataUris_js_1.genericTokenIcon, client: client }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: "View Funds" })] }), (props.detailsModal?.showTestnetFaucet ?? false) &&
                                ((chainQuery.data?.faucets && chainQuery.data.faucets.length > 0) ||
                                    chainQuery.data?.chainId === LocalhostChainId) && ((0, jsx_runtime_1.jsxs)(MenuLink, { href: chainQuery.data?.faucets ? chainQuery.data.faucets[0] : "#", target: "_blank", as: "a", style: {
                                    textDecoration: "none",
                                    color: "inherit",
                                }, children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "both", color: "secondaryText", children: (0, jsx_runtime_1.jsx)(FundsIcon_js_1.FundsIcon, { size: index_js_1.iconSize.md }) }), locale.requestTestnetFunds] })), props.detailsModal?.footer && ((0, jsx_runtime_1.jsx)(props.detailsModal.footer, { close: () => setIsOpen(false) }))] }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" })] }), props.detailsModal?.hideDisconnect !== true && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: "md", children: (0, jsx_runtime_1.jsxs)(MenuButton, { "data-variant": "danger", type: "button", onClick: () => {
                                if (activeWallet) {
                                    disconnect(activeWallet);
                                    props.onDisconnect();
                                }
                            }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.ExitIcon, { width: index_js_1.iconSize.md, height: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: locale.disconnectWallet })] }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" })] }))] }));
    if (screen === "pending-tx") {
        content = ((0, jsx_runtime_1.jsx)(BuyTxHistory_js_1.BuyTxHistory, { isBuyForTx: false, isEmbed: false, onBack: () => setScreen("main"), client: client, onDone: () => {
                setIsOpen(false);
            } }));
    }
    if (screen === "network-switcher") {
        content = ((0, jsx_runtime_1.jsx)(NetworkSelector_js_1.NetworkSelectorContent
        // add currently connected chain to the list of chains if it's not already in the list
        , { 
            // add currently connected chain to the list of chains if it's not already in the list
            chains: walletChain &&
                props.chains.find((c) => c.id === walletChain.id) === undefined
                ? [walletChain, ...props.chains]
                : props.chains, closeModal: () => {
                setIsOpen(false);
            }, networkSelector: props.detailsModal?.networkSelector, onBack: () => {
                setScreen("main");
            }, connectLocale: locale, client: client }));
    }
    // export local wallet
    // else if (screen === "export") {
    //   content = (
    //     <ExportLocalWallet
    //       onExport={() => {
    //         setIsOpen(false);
    //       }}
    //       onBack={() => {
    //         setScreen("main");
    //       }}
    //     />
    //   );
    // }
    // send funds
    else if (screen === "view-funds") {
        content = ((0, jsx_runtime_1.jsx)(ViewFunds_js_1.ViewFunds, { supportedTokens: props.supportedTokens, onBack: () => {
                setScreen("main");
            }, client: client }));
    }
    // send funds
    else if (screen === "send") {
        content = ((0, jsx_runtime_1.jsx)(SendFunds_js_1.SendFunds, { supportedTokens: props.supportedTokens, onBack: () => {
                setScreen("main");
            } }));
    }
    // receive funds
    else if (screen === "receive") {
        content = ((0, jsx_runtime_1.jsx)(ReceiveFunds_js_1.ReceiveFunds, { walletId: activeWallet?.id, onBack: () => {
                setScreen("main");
            } }));
    }
    // thirdweb pay
    else if (screen === "buy") {
        content = ((0, jsx_runtime_1.jsx)(LazyBuyScreen_js_1.LazyBuyScreen, { isEmbed: false, client: client, onBack: () => setScreen("main"), supportedTokens: props.supportedTokens, onViewPendingTx: () => setScreen("pending-tx"), connectLocale: locale, payOptions: props.detailsModal?.payOptions || {}, theme: typeof props.theme === "string" ? props.theme : props.theme.type, onDone: () => {
                setIsOpen(false);
            } }));
    }
    return ((0, jsx_runtime_1.jsx)(Modal_js_1.Modal, { size: "compact", trigger: trigger, open: isOpen, setOpen: setIsOpen, children: content }));
};
exports.ConnectedWalletDetails = ConnectedWalletDetails;
const WalletInfoButton = /* @__PURE__ */ (0, elements_js_1.StyledButton)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        all: "unset",
        background: theme.colors.connectedButtonBg,
        border: `1px solid ${theme.colors.borderColor}`,
        padding: `${index_js_1.spacing.sm} ${index_js_1.spacing.sm}`,
        borderRadius: index_js_1.radius.lg,
        cursor: "pointer",
        display: "inline-flex",
        alignItems: "center",
        minWidth: "180px",
        gap: index_js_1.spacing.sm,
        boxSizing: "border-box",
        WebkitTapHighlightColor: "transparent",
        lineHeight: "normal",
        animation: `${animations_js_1.fadeInAnimation} 300ms ease`,
        [index_js_1.media.mobile]: {
            gap: index_js_1.spacing.sm,
            padding: `${index_js_1.spacing.xs} ${index_js_1.spacing.sm}`,
            img: {
                width: `${index_js_1.iconSize.md}px`,
                height: `${index_js_1.iconSize.md}px`,
            },
        },
        "&:hover": {
            transition: "background 250ms ease",
            background: theme.colors.connectedButtonBgHover,
        },
    };
});
const MenuButton = /* @__PURE__ */ (0, elements_js_1.StyledButton)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        all: "unset",
        padding: `${index_js_1.spacing.sm} ${index_js_1.spacing.sm}`,
        borderRadius: index_js_1.radius.md,
        backgroundColor: "transparent",
        // border: `1px solid ${theme.colors.borderColor}`,
        boxSizing: "border-box",
        display: "flex",
        alignItems: "center",
        width: "100%",
        cursor: "pointer",
        fontSize: index_js_1.fontSize.md,
        fontWeight: 500,
        color: theme.colors.secondaryText,
        gap: index_js_1.spacing.sm,
        WebkitTapHighlightColor: "transparent",
        lineHeight: 1.3,
        transition: "background-color 200ms ease, transform 200ms ease",
        "&:hover": {
            backgroundColor: theme.colors.tertiaryBg,
            transform: "scale(1.01)",
            svg: {
                color: theme.colors.accentText,
            },
        },
        "&[disabled]": {
            cursor: "not-allowed",
            svg: {
                display: "none",
            },
        },
        svg: {
            color: theme.colors.secondaryText,
            transition: "color 200ms ease",
        },
        "&[data-variant='danger']:hover svg": {
            color: `${theme.colors.danger}!important`,
        },
        "&[data-variant='primary']:hover svg": {
            color: `${theme.colors.primaryText}!important`,
        },
    };
});
const MenuLink = /* @__PURE__ */ (() => MenuButton.withComponent("a"))();
const StyledChevronRightIcon = /* @__PURE__ */ (0, styled_1.default)(
/* @__PURE__ */ react_icons_1.ChevronRightIcon)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        color: theme.colors.secondaryText,
    };
});
// function AccountSwitcher(props: { wallet: Wallet; name: string }) {
//   const { connect } = useConnect();
//   const locale = useTWLocale().connectWallet;
//   const activeWallet = useActiveWallet();
//   return (
//     <MenuButton
//       type="button"
//       onClick={() => {
//         // remove the current active account as "connected"
//         if (activeWallet) {
//           connectionManager.removeConnectedWallet(activeWallet);
//         }
//         // set as connected and active
//         connect(props.wallet);
//       }}
//       style={{
//         fontSize: fontSize.sm,
//       }}
//     >
//       <EnterIcon width={iconSize.md} height={iconSize.md} />
//       <Text color="primaryText">
//         {locale.switchTo} {props.name}
//       </Text>
//     </MenuButton>
//   );
// }
function ConnectedToSmartWallet() {
    const activeAccount = (0, wallet_hooks_js_1.useActiveAccount)();
    const activeWallet = (0, wallet_hooks_js_1.useActiveWallet)();
    const isSmartWallet = (0, isSmartWallet_js_1.hasSmartAccount)(activeWallet);
    const chain = (0, wallet_hooks_js_1.useActiveWalletChain)();
    const { client, connectLocale: locale } = (0, useWalletConnectionCtx_js_1.useConnectUI)();
    const [isSmartWalletDeployed, setIsSmartWalletDeployed] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        if (activeAccount && isSmartWallet && activeAccount.address && chain) {
            const contract = (0, contract_js_1.getContract)({
                address: activeAccount.address,
                chain,
                client,
            });
            (0, is_contract_deployed_js_1.isContractDeployed)(contract).then((isDeployed) => {
                setIsSmartWalletDeployed(isDeployed);
            });
        }
        else {
            setIsSmartWalletDeployed(false);
        }
    }, [activeAccount, chain, client, isSmartWallet]);
    const content = ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", bg: "secondaryButtonBg", gap: "xxs", style: {
            borderRadius: index_js_1.radius.md,
            padding: `${index_js_1.spacing.xxs} ${index_js_1.spacing.sm} ${index_js_1.spacing.xxs} ${index_js_1.spacing.xs}`,
        }, center: "y", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", color: "accentText", center: "both", children: (0, jsx_runtime_1.jsx)(SmartAccountBadgeIcon_js_1.SmartWalletBadgeIcon, { size: index_js_1.iconSize.xs }) }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryButtonText", children: locale.connectedToSmartWallet })] }));
    if (chain && activeAccount && isSmartWallet) {
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [isSmartWalletDeployed ? ((0, jsx_runtime_1.jsx)(text_js_1.Link, { color: "secondaryText", hoverColor: "primaryText", href: `https://thirdweb.com/${chain.id}/${activeAccount.address}/account`, target: "_blank", size: "sm", children: content })) : ((0, jsx_runtime_1.jsxs)(text_js_1.Text, { size: "sm", children: [" ", content] })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xs" })] }));
    }
    return null;
}
function InAppWalletUserInfo() {
    const { client } = (0, useWalletConnectionCtx_js_1.useConnectUI)();
    const account = (0, wallet_hooks_js_1.useActiveAccount)();
    const userInfoQuery = (0, react_query_1.useQuery)({
        queryKey: ["in-app-wallet-user", client, account?.address],
        queryFn: async () => {
            const { getUserEmail, getUserPhoneNumber } = await Promise.resolve().then(() => require("../../../../wallets/in-app/core/authentication/index.js"));
            const [email, phone] = await Promise.all([
                getUserEmail({
                    client: client,
                }),
                getUserPhoneNumber({
                    client: client,
                }),
            ]);
            return email || phone || null;
        },
    });
    if (userInfoQuery.data) {
        return ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", style: {
                paddingBottom: index_js_1.spacing.xs,
            }, children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: userInfoQuery.data }) }));
    }
    return null;
}
/**
 * @internal
 */
function SwitchNetworkButton(props) {
    const switchChain = (0, wallet_hooks_js_1.useSwitchActiveWalletChain)();
    const [switching, setSwitching] = (0, react_1.useState)(false);
    const locale = (0, useWalletConnectionCtx_js_1.useConnectUI)().connectLocale;
    const switchNetworkBtnTitle = props.switchNetworkBtnTitle ?? locale.switchNetwork;
    return ((0, jsx_runtime_1.jsx)(buttons_js_1.Button, { className: `tw-connect-wallet--switch-network ${props.className || ""}`, variant: "primary", type: "button", "data-is-loading": switching, "data-test": "switch-network-button", disabled: switching, onClick: async () => {
            setSwitching(true);
            try {
                await switchChain(props.targetChain);
            }
            catch (e) {
                console.error(e);
            }
            setSwitching(false);
        }, style: {
            minWidth: "140px",
            ...props.style,
        }, "aria-label": switching ? locale.switchingNetwork : undefined, children: switching ? ((0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "sm", color: "primaryButtonText" })) : (switchNetworkBtnTitle) }));
}
//# sourceMappingURL=Details.js.map