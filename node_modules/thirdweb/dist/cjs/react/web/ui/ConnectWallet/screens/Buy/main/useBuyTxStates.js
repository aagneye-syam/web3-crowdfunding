"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBuyTxStates = void 0;
const react_1 = require("react");
const formatNumber_js_1 = require("../../../../../../../utils/formatNumber.js");
const units_js_1 = require("../../../../../../../utils/units.js");
const useSendTransaction_js_1 = require("../../../../../../core/hooks/contract/useSendTransaction.js");
const wait_js_1 = require("../../../../../../core/utils/wait.js");
function useBuyTxStates(options) {
    const { buyForTx, hasEditedAmount, isMainScreen, setTokenAmount, account } = options;
    const shouldRefreshTokenAmount = !hasEditedAmount && isMainScreen;
    const stopUpdatingAll = !isMainScreen;
    const [amountNeeded, setAmountNeeded] = (0, react_1.useState)(buyForTx?.cost);
    // update amount needed every 30 seconds
    // also update the token amount if allowed
    // ( Can't use useQuery because tx can't be added to queryKey )
    (0, react_1.useEffect)(() => {
        if (!buyForTx || stopUpdatingAll) {
            return;
        }
        let mounted = true;
        async function pollTxCost() {
            if (!buyForTx || !mounted) {
                return;
            }
            try {
                const totalCost = await (0, useSendTransaction_js_1.getTotalTxCostForBuy)(buyForTx.tx, account);
                if (!mounted) {
                    return;
                }
                setAmountNeeded(totalCost);
                if (shouldRefreshTokenAmount) {
                    if (totalCost > buyForTx.balance) {
                        const _tokenAmount = String((0, formatNumber_js_1.formatNumber)(Number((0, units_js_1.toEther)(totalCost - buyForTx.balance)), 4));
                        setTokenAmount(_tokenAmount);
                    }
                }
            }
            catch {
                // no op
            }
            await (0, wait_js_1.wait)(30000);
            pollTxCost();
        }
        pollTxCost();
        return () => {
            mounted = false;
        };
    }, [
        buyForTx,
        shouldRefreshTokenAmount,
        setTokenAmount,
        stopUpdatingAll,
        account,
    ]);
    return {
        amountNeeded,
    };
}
exports.useBuyTxStates = useBuyTxStates;
//# sourceMappingURL=useBuyTxStates.js.map