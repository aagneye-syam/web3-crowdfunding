"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useEnabledPaymentMethods = void 0;
const react_1 = require("react");
const addresses_js_1 = require("../../../../../../../constants/addresses.js");
const nativeToken_js_1 = require("../../nativeToken.js");
// Based on what toToken, toChain, and supportedDestinations are, determine which payment methods should be enabled
// change the current method if it should be disabled
// return whether the payment selection should be shown or not ( if only one payment method is enabled, don't show the selection )
function useEnabledPaymentMethods(options) {
    const { payOptions, supportedDestinations, toChain, toToken, method, setMethod, } = options;
    function getEnabledPayMethodsForSelectedToken() {
        const chain = supportedDestinations.find((c) => c.chain.id === toChain.id);
        if (!chain) {
            return {
                fiat: true,
                swap: true,
            };
        }
        const toTokenAddress = (0, nativeToken_js_1.isNativeToken)(toToken)
            ? addresses_js_1.NATIVE_TOKEN_ADDRESS
            : toToken.address;
        const tokenInfo = chain.tokens.find((t) => t.address.toLowerCase() === toTokenAddress.toLowerCase());
        if (!tokenInfo) {
            return {
                fiat: true,
                swap: true,
            };
        }
        return {
            fiat: tokenInfo.buyWithFiatEnabled,
            swap: tokenInfo.buyWithCryptoEnabled,
        };
    }
    const { fiat, swap } = getEnabledPayMethodsForSelectedToken();
    const buyWithFiatEnabled = payOptions.buyWithFiat !== false && fiat;
    const buyWithCryptoEnabled = payOptions.buyWithCrypto !== false && swap;
    (0, react_1.useEffect)(() => {
        // both payment methods are disabled - do nothing
        if (!buyWithFiatEnabled && !buyWithCryptoEnabled) {
            return;
        }
        // if credit card tab is enabled but should be disabled, switch to crypto
        if (method === "creditCard" && !buyWithFiatEnabled) {
            setMethod("crypto");
        }
        // if crypto tab is enabled but should be disabled, switch to credit card
        if (method === "crypto" && !buyWithCryptoEnabled) {
            setMethod("creditCard");
        }
    }, [buyWithFiatEnabled, buyWithCryptoEnabled, method, setMethod]);
    const showPaymentSelection = buyWithFiatEnabled && buyWithCryptoEnabled;
    return {
        showPaymentSelection,
    };
}
exports.useEnabledPaymentMethods = useEnabledPaymentMethods;
//# sourceMappingURL=useEnabledPaymentMethods.js.map