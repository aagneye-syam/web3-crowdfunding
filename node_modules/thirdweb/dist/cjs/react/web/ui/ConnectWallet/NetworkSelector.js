"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainButton = exports.NetworkSelectorContent = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_icons_1 = require("@radix-ui/react-icons");
const fuse_js_1 = require("fuse.js");
const react_1 = require("react");
const utils_js_1 = require("../../../../chains/utils.js");
const useChainQuery_js_1 = require("../../../core/hooks/others/useChainQuery.js");
const wallet_hooks_js_1 = require("../../../core/hooks/wallets/wallet-hooks.js");
const ChainIcon_js_1 = require("../components/ChainIcon.js");
const Skeleton_js_1 = require("../components/Skeleton.js");
const Spacer_js_1 = require("../components/Spacer.js");
const Spinner_js_1 = require("../components/Spinner.js");
const basic_js_1 = require("../components/basic.js");
const buttons_js_1 = require("../components/buttons.js");
const formElements_js_1 = require("../components/formElements.js");
const modalElements_js_1 = require("../components/modalElements.js");
const text_js_1 = require("../components/text.js");
const CustomThemeProvider_js_1 = require("../design-system/CustomThemeProvider.js");
const elements_js_1 = require("../design-system/elements.js");
const index_js_1 = require("../design-system/index.js");
const useDebouncedValue_js_1 = require("../hooks/useDebouncedValue.js");
const useShowMore_js_1 = require("../hooks/useShowMore.js");
let fuseInstances = undefined;
let fuseInitializationStarted = false;
// initialize fuse instances if not already initialized
function initializeFuseInstances() {
    if (fuseInitializationStarted) {
        return;
    }
    fuseInitializationStarted = true;
    const fuseConfig = {
        threshold: 0.4,
        keys: [
            {
                name: "name",
                weight: 1,
            },
            {
                name: "chainId",
                weight: 1,
            },
        ],
    };
    fuseInstances = {
        all: new fuse_js_1.default([], fuseConfig),
        popular: new fuse_js_1.default([], fuseConfig),
        recent: new fuse_js_1.default([], fuseConfig),
    };
}
function useLoadChains(allChainsInput, popularChainIds, recentChainIds) {
    // load all chains with react query
    const chainsQueries = (0, useChainQuery_js_1.useChainsQuery)(allChainsInput, 50);
    const isLoading = chainsQueries.some((q) => q.isLoading);
    const { allChains, chainsMap } = (0, react_1.useMemo)(() => {
        const _chains = [];
        const _chainsMap = new Map();
        if (isLoading) {
            return { allChains: [], chainsMap: _chainsMap };
        }
        for (const chainQuery of chainsQueries) {
            if (chainQuery.data) {
                _chains.push({
                    ...chainQuery.data,
                });
            }
        }
        for (const chain of _chains) {
            _chainsMap.set(chain.chainId, chain);
        }
        return { allChains: _chains, chainsMap: _chainsMap, isLoading: false };
    }, [chainsQueries, isLoading]);
    const recentChains = (0, react_1.useMemo)(() => {
        if (!recentChainIds) {
            return [];
        }
        const _recentChains = [];
        for (const chainId of recentChainIds) {
            const _chain = chainsMap.get(chainId);
            if (_chain) {
                _recentChains.push(_chain);
            }
        }
        return _recentChains;
    }, [recentChainIds, chainsMap]);
    const popularChains = (0, react_1.useMemo)(() => {
        if (!popularChainIds) {
            return [];
        }
        const _popularChains = [];
        for (const chainId of popularChainIds) {
            const _chain = chainsMap.get(chainId);
            if (_chain) {
                _popularChains.push(_chain);
            }
        }
        return _popularChains;
    }, [popularChainIds, chainsMap]);
    return {
        allChains,
        popularChains,
        recentChains,
        isLoading,
    };
}
/**
 * @internal
 */
function NetworkSelectorContent(props) {
    const chainsData = useLoadChains(props.chains, props.networkSelector?.popularChainIds || [], props.networkSelector?.recentChainIds || []);
    initializeFuseInstances();
    return (0, jsx_runtime_1.jsx)(NetworkSelectorContentInner, { ...props, chainsData: chainsData });
}
exports.NetworkSelectorContent = NetworkSelectorContent;
function NetworkSelectorContentInner(props) {
    const { chainsData, connectLocale } = props;
    const chainMap = (0, react_1.useMemo)(() => {
        const _chainMap = new Map();
        for (const chain of props.chains) {
            _chainMap.set(chain.id, chain);
        }
        return _chainMap;
    }, [props.chains]);
    const locale = connectLocale.networkSelector;
    const [searchTerm, setSearchTerm] = (0, react_1.useState)("");
    const [selectedTab, setSelectedTab] = (0, react_1.useState)("all");
    const deferredSearchTerm = (0, useDebouncedValue_js_1.useDebouncedValue)(searchTerm, 300);
    const { onSwitch, onCustomClick } = props.networkSelector || {};
    const allChainsTab = (0, react_1.useMemo)(() => {
        return filterChainByType(chainsData.allChains, selectedTab);
    }, [chainsData.allChains, selectedTab]);
    const popularChainsTab = (0, react_1.useMemo)(() => {
        return filterChainByType(chainsData.popularChains, selectedTab);
    }, [chainsData.popularChains, selectedTab]);
    const recentChainsTab = (0, react_1.useMemo)(() => {
        return filterChainByType(chainsData.recentChains, selectedTab);
    }, [chainsData.recentChains, selectedTab]);
    // chains filtered by search term + type
    const allChainsFiltered = (0, react_1.useMemo)(() => {
        if (!fuseInstances) {
            return allChainsTab;
        }
        if (deferredSearchTerm === "") {
            return allChainsTab;
        }
        fuseInstances.all.setCollection(allChainsTab);
        return fuseInstances.all.search(deferredSearchTerm).map((r) => r.item);
    }, [allChainsTab, deferredSearchTerm]);
    const popularChainsFiltered = (0, react_1.useMemo)(() => {
        if (!fuseInstances) {
            return popularChainsTab;
        }
        if (deferredSearchTerm === "") {
            return popularChainsTab;
        }
        fuseInstances.popular.setCollection(popularChainsTab);
        return fuseInstances.popular.search(deferredSearchTerm).map((r) => r.item);
    }, [deferredSearchTerm, popularChainsTab]);
    const recentChainsFiltered = (0, react_1.useMemo)(() => {
        if (!fuseInstances) {
            return recentChainsTab;
        }
        if (deferredSearchTerm === "") {
            return recentChainsTab;
        }
        fuseInstances.recent.setCollection(recentChainsTab);
        return fuseInstances.recent.search(deferredSearchTerm).map((r) => r.item);
    }, [deferredSearchTerm, recentChainsTab]);
    const handleSwitch = (0, react_1.useCallback)((chain) => {
        if (onSwitch) {
            onSwitch(chain);
        }
        props.closeModal();
    }, [onSwitch, props]);
    const allChainsToShow = (0, react_1.useMemo)(() => {
        if (chainsData.isLoading) {
            return props.chains;
        }
        return allChainsFiltered.map(utils_js_1.convertApiChainToChain);
    }, [allChainsFiltered, chainsData.isLoading, props.chains]);
    const popularChainsToShow = (0, react_1.useMemo)(() => {
        if (chainsData.isLoading) {
            return (props.networkSelector?.popularChainIds?.map((id) => chainMap.get(id)) || []);
        }
        return popularChainsFiltered.map(utils_js_1.convertApiChainToChain);
    }, [
        chainMap,
        chainsData.isLoading,
        popularChainsFiltered,
        props.networkSelector?.popularChainIds,
    ]);
    const recentChainsToShow = (0, react_1.useMemo)(() => {
        if (chainsData.isLoading) {
            return (props.networkSelector?.recentChainIds?.map((id) => chainMap.get(id)) || []);
        }
        return recentChainsFiltered.map(utils_js_1.convertApiChainToChain);
    }, [
        chainMap,
        chainsData.isLoading,
        props.networkSelector?.recentChainIds,
        recentChainsFiltered,
    ]);
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: props.onBack ? ((0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: locale.title, onBack: props.onBack })) : ((0, jsx_runtime_1.jsx)(modalElements_js_1.ModalTitle, { children: locale.title })) }), props.showTabs !== false && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: "lg", children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", gap: "xxs", children: [(0, jsx_runtime_1.jsx)(TabButton, { onClick: () => setSelectedTab("all"), "data-active": selectedTab === "all", children: locale.allNetworks }), (0, jsx_runtime_1.jsx)(TabButton, { onClick: () => setSelectedTab("mainnet"), "data-active": selectedTab === "mainnet", children: locale.mainnets }), (0, jsx_runtime_1.jsx)(TabButton, { onClick: () => setSelectedTab("testnet"), "data-active": selectedTab === "testnet", children: locale.testnets })] }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] })), props.showTabs === false && (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xxs" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: "lg", children: (0, jsx_runtime_1.jsxs)("div", { style: {
                        display: "flex",
                        alignItems: "center",
                        position: "relative",
                    }, children: [(0, jsx_runtime_1.jsx)(StyledMagnifyingGlassIcon, { width: index_js_1.iconSize.md, height: index_js_1.iconSize.md }), (0, jsx_runtime_1.jsx)(formElements_js_1.Input, { style: {
                                padding: `${index_js_1.spacing.sm} ${index_js_1.spacing.md} ${index_js_1.spacing.sm} ${index_js_1.spacing.xxl}`,
                            }, tabIndex: -1, variant: "outline", disabled: chainsData.isLoading, placeholder: chainsData.isLoading
                                ? "Loading chains..."
                                : locale.inputPlaceholder, value: searchTerm, onChange: (e) => {
                                setSearchTerm(e.target.value);
                            } }), (deferredSearchTerm !== searchTerm || chainsData.isLoading) && ((0, jsx_runtime_1.jsx)("div", { style: {
                                position: "absolute",
                                right: index_js_1.spacing.md,
                            }, children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "md", color: "accentText" }) }))] }) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: "md", children: (0, jsx_runtime_1.jsx)(NetworkTabContent, { allChainIds: allChainsToShow, popularChainIds: popularChainsToShow, recentChainIds: recentChainsToShow, onSwitch: handleSwitch, renderChain: props.networkSelector?.renderChain, connectLocale: connectLocale, client: props.client }) }), onCustomClick && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { fullWidth: true, variant: "link", onClick: () => {
                                onCustomClick();
                            }, style: {
                                display: "flex",
                                fontSize: index_js_1.fontSize.sm,
                                boxShadow: "none",
                            }, children: locale.addCustomNetwork }) })] }))] }));
}
/**
 *
 * @internal
 */
const filterChainByType = (chains, type) => {
    if (type === "all") {
        return chains;
    }
    if (type === "testnet") {
        return chains.filter((c) => c.testnet);
    }
    return chains.filter((c) => !c.testnet);
};
/**
 *
 * @internal
 */
const NetworkTabContent = (props) => {
    const locale = props.connectLocale.networkSelector.categoryLabel;
    const { recentChainIds, popularChainIds, allChainIds } = props;
    const noChainsToShow = recentChainIds?.length === 0 &&
        popularChainIds?.length === 0 &&
        allChainIds.length === 0;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { scrollY: true, animate: "fadein", style: {
            height: "330px",
            paddingBottom: index_js_1.spacing.lg,
        }, children: [recentChainIds && recentChainIds.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(SectionLabel, { children: locale.recentlyUsed }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(NetworkList, { chains: recentChainIds, onSwitch: props.onSwitch, renderChain: props.renderChain, close: props.close, client: props.client, connectLocale: props.connectLocale }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] })), popularChainIds && popularChainIds.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { children: [(0, jsx_runtime_1.jsx)(SectionLabel, { children: locale.popular }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(NetworkList, { chains: popularChainIds, onSwitch: props.onSwitch, renderChain: props.renderChain, close: props.close, client: props.client, connectLocale: props.connectLocale }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "lg" })] })), ((popularChainIds && popularChainIds.length > 0) ||
                (recentChainIds && recentChainIds.length > 0)) && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(SectionLabel, { children: locale.others }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" })] })), (0, jsx_runtime_1.jsx)(NetworkList, { chains: allChainIds, onSwitch: props.onSwitch, renderChain: props.renderChain, close: props.close, client: props.client, connectLocale: props.connectLocale }), noChainsToShow && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "md", center: "both", color: "secondaryText", children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(react_icons_1.CrossCircledIcon, { width: index_js_1.iconSize.xl, height: index_js_1.iconSize.xl }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { children: " No Results " })] }))] }));
};
const NetworkList = /* @__PURE__ */ (0, react_1.memo)(function NetworkList(props) {
    // show 10 items first, when reaching the last item, show 10 more
    const { itemsToShow, lastItemRef } = (0, useShowMore_js_1.useShowMore)(10, 10);
    const switchChain = (0, wallet_hooks_js_1.useSwitchActiveWalletChain)();
    const activeChain = (0, wallet_hooks_js_1.useActiveWalletChain)();
    const [switchingChainId, setSwitchingChainId] = (0, react_1.useState)(-1);
    const [errorSwitchingChainId, setErrorSwitchingChainId] = (0, react_1.useState)(-1);
    const close = props.close;
    (0, react_1.useEffect)(() => {
        // if switching and switched successfully - close modal
        if (switchingChainId !== -1 && activeChain?.id === switchingChainId) {
            if (close) {
                close();
            }
        }
    }, [switchingChainId, close, activeChain?.id]);
    const handleSwitch = async (chain) => {
        setErrorSwitchingChainId(-1);
        setSwitchingChainId(chain.id);
        try {
            await switchChain(chain);
            props.onSwitch(chain);
        }
        catch (e) {
            setErrorSwitchingChainId(chain.id);
            console.error(e);
        }
        finally {
            setSwitchingChainId(-1);
        }
    };
    const RenderChain = props.renderChain;
    const chainsToShow = props.chains.slice(0, itemsToShow);
    return ((0, jsx_runtime_1.jsx)(NetworkListUl, { children: chainsToShow.map((chain, i) => {
            if (!chain) {
                return null;
            }
            const confirming = switchingChainId === chain.id;
            const switchingFailed = errorSwitchingChainId === chain.id;
            const isLast = i === chainsToShow.length - 1;
            return ((0, jsx_runtime_1.jsx)("li", { ref: isLast ? lastItemRef : undefined, children: RenderChain ? ((0, jsx_runtime_1.jsx)(RenderChain, { switchChain: () => {
                        handleSwitch(chain);
                    }, chain: chain, switching: switchingChainId === chain.id, switchFailed: errorSwitchingChainId === chain.id, close: props.close })) : ((0, jsx_runtime_1.jsx)(exports.ChainButton, { chain: chain, confirming: confirming, onClick: () => handleSwitch(chain), switchingFailed: switchingFailed, client: props.client, connectLocale: props.connectLocale })) }, chain.id));
        }) }));
});
exports.ChainButton = (0, react_1.memo)(function ChainButton(props) {
    const locale = props.connectLocale;
    const { chain, confirming, switchingFailed } = props;
    const activeChain = (0, wallet_hooks_js_1.useActiveWalletChain)();
    const { data: fetchedChain } = (0, useChainQuery_js_1.useChainQuery)(chain);
    let chainName;
    if (fetchedChain) {
        chainName = (0, jsx_runtime_1.jsxs)("span", { children: [fetchedChain.name, " "] });
    }
    else {
        chainName = (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "150px", height: "20px" });
    }
    return ((0, jsx_runtime_1.jsxs)(NetworkButton, { "data-active": activeChain?.id === chain.id, onClick: props.onClick, children: [fetchedChain ? ((0, jsx_runtime_1.jsx)(ChainIcon_js_1.ChainIcon, { chainIcon: fetchedChain.icon, size: index_js_1.iconSize.lg, active: activeChain?.id === chain.id, loading: "lazy", client: props.client })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: `${index_js_1.iconSize.lg}px`, height: `${index_js_1.iconSize.lg}px` })), confirming || switchingFailed ? ((0, jsx_runtime_1.jsxs)("div", { style: {
                    display: "flex",
                    flexDirection: "column",
                    gap: index_js_1.spacing.xs,
                }, children: [chainName, (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", flex: "row", gap: "xs", children: [confirming && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "accentText", children: locale.confirmInWallet }), (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "xs", color: "accentText" })] })), switchingFailed && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { animate: "fadein", children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "danger", children: locale.networkSelector.failedToSwitch }) }))] })] })) : (chainName)] }));
});
const TabButton = /* @__PURE__ */ (() => styled_1.default.button(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        all: "unset",
        fontSize: index_js_1.fontSize.sm,
        fontWeight: 500,
        color: theme.colors.secondaryText,
        cursor: "pointer",
        padding: `${index_js_1.spacing.sm} ${index_js_1.spacing.sm}`,
        WebkitTapHighlightColor: "transparent",
        borderRadius: index_js_1.radius.lg,
        transition: "background 0.2s ease, color 0.2s ease",
        "&[data-active='true']": {
            background: theme.colors.secondaryButtonBg,
            color: theme.colors.primaryText,
        },
    };
}))();
const SectionLabel = /* @__PURE__ */ (0, elements_js_1.StyledP)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        fontSize: index_js_1.fontSize.sm,
        color: theme.colors.secondaryText,
        margin: 0,
        display: "block",
        padding: `0 ${index_js_1.spacing.xs}`,
    };
});
const NetworkListUl = /* @__PURE__ */ (0, elements_js_1.StyledUl)({
    padding: 0,
    margin: 0,
    listStyle: "none",
    display: "flex",
    flexDirection: "column",
    gap: index_js_1.spacing.xs,
    boxSizing: "border-box",
});
const NetworkButton = /* @__PURE__ */ (0, elements_js_1.StyledButton)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        all: "unset",
        display: "flex",
        width: "100%",
        boxSizing: "border-box",
        alignItems: "center",
        gap: index_js_1.spacing.md,
        padding: `${index_js_1.spacing.xs} ${index_js_1.spacing.sm}`,
        borderRadius: index_js_1.radius.md,
        cursor: "pointer",
        transition: "background 0.2s ease",
        color: theme.colors.primaryText,
        fontWeight: 500,
        fontSize: index_js_1.fontSize.md,
        "&:hover": {
            background: theme.colors.secondaryButtonBg,
        },
        [index_js_1.media.mobile]: {
            fontSize: index_js_1.fontSize.sm,
        },
    };
});
const StyledMagnifyingGlassIcon = /* @__PURE__ */ (0, styled_1.default)(react_icons_1.MagnifyingGlassIcon)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        color: theme.colors.secondaryText,
        position: "absolute",
        left: index_js_1.spacing.sm,
    };
});
//# sourceMappingURL=NetworkSelector.js.map