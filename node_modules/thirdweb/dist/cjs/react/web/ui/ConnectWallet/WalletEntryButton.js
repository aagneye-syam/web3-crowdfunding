"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletButton = exports.WalletEntryButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const mipdStore_js_1 = require("../../../../wallets/injected/mipdStore.js");
// import { localWalletMetadata } from "../../../../wallets/local/index._ts";
const useWalletConnectionCtx_js_1 = require("../../../core/hooks/others/useWalletConnectionCtx.js");
const Skeleton_js_1 = require("../components/Skeleton.js");
const WalletImage_js_1 = require("../components/WalletImage.js");
const basic_js_1 = require("../components/basic.js");
const text_js_1 = require("../components/text.js");
const CustomThemeProvider_js_1 = require("../design-system/CustomThemeProvider.js");
const elements_js_1 = require("../design-system/elements.js");
const index_js_1 = require("../design-system/index.js");
const useWalletInfo_js_1 = require("../hooks/useWalletInfo.js");
const screen_js_1 = require("./Modal/screen.js");
/**
 * @internal
 */
function WalletEntryButton(props) {
    const { walletId, selectWallet } = props;
    const { connectLocale, recommendedWallets, client } = (0, useWalletConnectionCtx_js_1.useConnectUI)();
    const isRecommended = recommendedWallets?.find((w) => w.id === walletId);
    const { screen } = (0, screen_js_1.useScreenContext)();
    const walletInfo = (0, useWalletInfo_js_1.useWalletInfo)(walletId);
    const walletName = (0, mipdStore_js_1.getInstalledWalletProviders)().find((p) => p.info.rdns === walletId)?.info
        .name || walletInfo.data?.name;
    const isInstalled = (0, mipdStore_js_1.getInstalledWalletProviders)().find((p) => p.info.rdns === walletId);
    return ((0, jsx_runtime_1.jsxs)(exports.WalletButton, { type: "button", onClick: selectWallet, "data-active": screen && typeof screen === "object" && screen.id === walletId, children: [(0, jsx_runtime_1.jsx)(WalletImage_js_1.WalletImage, { id: walletId, size: index_js_1.iconSize.xl, client: client }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "xxs", expand: true, children: [walletName ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", weight: 600, children: walletName })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "100px", height: index_js_1.fontSize.md })), isRecommended && (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: connectLocale.recommended }), !isRecommended && isInstalled && ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: connectLocale.installed }))] })] }));
}
exports.WalletEntryButton = WalletEntryButton;
exports.WalletButton = (0, elements_js_1.StyledButton)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        all: "unset",
        display: "flex",
        alignItems: "center",
        gap: index_js_1.spacing.sm,
        cursor: "pointer",
        boxSizing: "border-box",
        width: "100%",
        color: theme.colors.secondaryText,
        position: "relative",
        borderRadius: index_js_1.radius.md,
        padding: `${index_js_1.spacing.xs} ${index_js_1.spacing.xs}`,
        "&:hover": {
            backgroundColor: theme.colors.tertiaryBg,
            transform: "scale(1.01)",
        },
        '&[data-active="true"]': {
            backgroundColor: theme.colors.tertiaryBg,
        },
        transition: "background-color 200ms ease, transform 200ms ease",
    };
});
//# sourceMappingURL=WalletEntryButton.js.map