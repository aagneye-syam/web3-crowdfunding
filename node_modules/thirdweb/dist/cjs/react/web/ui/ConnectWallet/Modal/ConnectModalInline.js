"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectModalInline = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const useWalletConnectionCtx_js_1 = require("../../../../core/hooks/others/useWalletConnectionCtx.js");
const wallet_ui_states_provider_js_1 = require("../../../providers/wallet-ui-states-provider.js");
const canFitWideModal_js_1 = require("../../../utils/canFitWideModal.js");
const DynamicHeight_js_1 = require("../../components/DynamicHeight.js");
const Modal_js_1 = require("../../components/Modal.js");
const buttons_js_1 = require("../../components/buttons.js");
const CustomThemeProvider_js_1 = require("../../design-system/CustomThemeProvider.js");
const elements_js_1 = require("../../design-system/elements.js");
const index_js_1 = require("../../design-system/index.js");
const constants_js_1 = require("../constants.js");
const ConnectModalContent_js_1 = require("./ConnectModalContent.js");
const screen_js_1 = require("./screen.js");
/**
 * @internal
 */
const ConnectModalInline = (props) => {
    const walletConfigs = (0, useWalletConnectionCtx_js_1.useConnectUI)().wallets;
    const modalSize = !(0, canFitWideModal_js_1.canFitWideModal)() || walletConfigs.length === 1
        ? "compact"
        : props.modalSize;
    return ((0, jsx_runtime_1.jsx)(wallet_ui_states_provider_js_1.WalletUIStatesProvider, { theme: props.theme, children: (0, jsx_runtime_1.jsx)(ConnectModalInlineContent, { className: props.className, modalSize: modalSize }) }));
};
exports.ConnectModalInline = ConnectModalInline;
function ConnectModalInlineContent(props) {
    const screenSetup = (0, screen_js_1.useSetupScreen)();
    const content = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(ConnectModalContent_js_1.ConnectModalContent, { screenSetup: screenSetup, setModalVisibility: () => {
                    // noop
                }, isOpen: true, onClose: () => {
                    // no op
                } }), (0, jsx_runtime_1.jsx)(Modal_js_1.CrossContainer, { children: (0, jsx_runtime_1.jsx)(buttons_js_1.IconButton, { type: "button", "aria-label": "Close", children: (0, jsx_runtime_1.jsx)(react_icons_1.Cross2Icon, { width: index_js_1.iconSize.md, height: index_js_1.iconSize.md, style: {
                            color: "inherit",
                        } }) }) })] }));
    return ((0, jsx_runtime_1.jsx)(ConnectModalInlineContainer, { className: props.className, style: {
            height: props.modalSize === "compact" ? "auto" : constants_js_1.wideModalMaxHeight,
            maxWidth: props.modalSize === "compact"
                ? constants_js_1.modalMaxWidthCompact
                : constants_js_1.modalMaxWidthWide,
            ...props.style,
        }, children: props.modalSize === "compact" ? ((0, jsx_runtime_1.jsxs)(DynamicHeight_js_1.DynamicHeight, { children: [" ", content, " "] })) : (content) }));
}
const ConnectModalInlineContainer = /* @__PURE__ */ (0, elements_js_1.StyledDiv)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        background: theme.colors.modalBg,
        color: theme.colors.primaryText,
        transition: "background 0.2s ease",
        borderRadius: index_js_1.radius.xl,
        width: "100%",
        boxSizing: "border-box",
        boxShadow: index_js_1.shadow.lg,
        position: "relative",
        border: `1px solid ${theme.colors.borderColor}`,
        lineHeight: "normal",
        overflow: "hidden",
        fontFamily: theme.fontFamily,
        "& *::selection": {
            backgroundColor: theme.colors.primaryText,
            color: theme.colors.modalBg,
        },
    };
});
//# sourceMappingURL=ConnectModalInline.js.map