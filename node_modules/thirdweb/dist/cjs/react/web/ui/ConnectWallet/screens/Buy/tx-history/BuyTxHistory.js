"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuyTxHistoryList = exports.BuyTxHistory = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_icons_1 = require("@radix-ui/react-icons");
const react_1 = require("react");
const useChainQuery_js_1 = require("../../../../../../core/hooks/others/useChainQuery.js");
const wallet_hooks_js_1 = require("../../../../../../core/hooks/wallets/wallet-hooks.js");
const Skeleton_js_1 = require("../../../../components/Skeleton.js");
const Spinner_js_1 = require("../../../../components/Spinner.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const text_js_1 = require("../../../../components/text.js");
const index_js_1 = require("../../../../design-system/index.js");
const BuyTxHistoryButton_js_1 = require("./BuyTxHistoryButton.js");
const TxDetailsScreen_js_1 = require("./TxDetailsScreen.js");
const useBuyTransactionsToShow_js_1 = require("./useBuyTransactionsToShow.js");
/**
 * @internal
 */
function BuyTxHistory(props) {
    const [selectedTx, setSelectedTx] = (0, react_1.useState)(null);
    if (selectedTx) {
        return ((0, jsx_runtime_1.jsx)(TxDetailsScreen_js_1.TxDetailsScreen, { client: props.client, statusInfo: selectedTx, onBack: () => setSelectedTx(null), onDone: props.onDone, isBuyForTx: props.isBuyForTx, isEmbed: props.isEmbed }));
    }
    return (0, jsx_runtime_1.jsx)(BuyTxHistoryList, { ...props, onSelectTx: setSelectedTx });
}
exports.BuyTxHistory = BuyTxHistory;
/**
 * @internal
 */
function BuyTxHistoryList(props) {
    const { pageIndex, setPageIndex, txInfosToShow, hidePagination, isLoading, pagination, } = (0, useBuyTransactionsToShow_js_1.useBuyTransactionsToShow)(props.client);
    const activeChain = (0, wallet_hooks_js_1.useActiveWalletChain)();
    const chainQuery = (0, useChainQuery_js_1.useChainQuery)(activeChain);
    const activeAccount = (0, wallet_hooks_js_1.useActiveAccount)();
    const noTransactions = txInfosToShow.length === 0;
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { animate: "fadein", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: "Transactions", onBack: props.onBack }) }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { scrollY: true, flex: "column", fullHeight: true, style: {
                    minHeight: "250px",
                    maxHeight: "370px",
                }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "xs", px: "lg", expand: true, children: [noTransactions && !isLoading && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", gap: "md", center: "both", color: "secondaryText", style: {
                                    minHeight: "250px",
                                }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.CrossCircledIcon, { width: index_js_1.iconSize.xl, height: index_js_1.iconSize.xl }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { children: " No Transactions " })] })), noTransactions && isLoading && ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "both", style: {
                                    minHeight: "250px",
                                }, children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "xl", color: "accentText" }) })), txInfosToShow.map((txInfo) => {
                                return ((0, jsx_runtime_1.jsx)(BuyTxHistoryButton_js_1.BuyTxHistoryButton, { txInfo: txInfo, client: props.client, onClick: () => {
                                        props.onSelectTx(txInfo);
                                    } }, txInfo.type === "swap"
                                    ? txInfo.status.source?.transactionHash
                                    : txInfo.status.intentId));
                            }), isLoading && txInfosToShow.length > 0 && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "100%", height: BuyTxHistoryButton_js_1.BuyTxHistoryButtonHeight }), (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "100%", height: BuyTxHistoryButton_js_1.BuyTxHistoryButtonHeight }), (0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "100%", height: BuyTxHistoryButton_js_1.BuyTxHistoryButtonHeight })] }))] }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: pagination && !hidePagination && ((0, jsx_runtime_1.jsxs)("div", { style: {
                                display: "grid",
                                gridTemplateColumns: "1fr 1fr",
                                gap: index_js_1.spacing.sm,
                            }, children: [(0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "outline", gap: "xs", disabled: pageIndex === 0, "data-disabled": pageIndex === 0, style: {
                                        fontSize: index_js_1.fontSize.sm,
                                        paddingBlock: index_js_1.spacing.sm,
                                    }, onClick: () => {
                                        setPageIndex((prev) => prev - 1);
                                    }, children: [(0, jsx_runtime_1.jsx)(react_icons_1.ArrowRightIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm, style: {
                                                transform: "rotate(180deg)",
                                            } }), "Prev"] }), (0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { variant: "outline", gap: "xs", disabled: !pagination.hasNextPage, "data-disabled": !pagination.hasNextPage, style: {
                                        fontSize: index_js_1.fontSize.sm,
                                        paddingBlock: index_js_1.spacing.sm,
                                    }, onClick: () => {
                                        setPageIndex((prev) => prev + 1);
                                    }, children: ["Next", (0, jsx_runtime_1.jsx)(react_icons_1.ArrowRightIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm })] })] })) })] }), (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsxs)(buttons_js_1.ButtonLink, { fullWidth: true, variant: "outline", href: `${chainQuery.data?.explorers?.[0]?.url}/address/${activeAccount?.address}`, target: "_blank", as: "a", gap: "xs", style: {
                        textDecoration: "none",
                        color: "inherit",
                    }, children: ["View on Explorer", " ", (0, jsx_runtime_1.jsx)(react_icons_1.ExternalLinkIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm })] }) })] }));
}
exports.BuyTxHistoryList = BuyTxHistoryList;
//# sourceMappingURL=BuyTxHistory.js.map