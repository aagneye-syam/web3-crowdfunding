"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuyTokenInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const styled_1 = require("@emotion/styled");
const react_icons_1 = require("@radix-ui/react-icons");
const useChainQuery_js_1 = require("../../../../../../core/hooks/others/useChainQuery.js");
const Skeleton_js_1 = require("../../../../components/Skeleton.js");
const Spacer_js_1 = require("../../../../components/Spacer.js");
const TokenIcon_js_1 = require("../../../../components/TokenIcon.js");
const basic_js_1 = require("../../../../components/basic.js");
const buttons_js_1 = require("../../../../components/buttons.js");
const formElements_js_1 = require("../../../../components/formElements.js");
const text_js_1 = require("../../../../components/text.js");
const TokenSymbol_js_1 = require("../../../../components/token/TokenSymbol.js");
const CustomThemeProvider_js_1 = require("../../../../design-system/CustomThemeProvider.js");
const index_js_1 = require("../../../../design-system/index.js");
/**
 * @internal
 */
function BuyTokenInput(props) {
    const chainQuery = (0, useChainQuery_js_1.useChainQuery)(props.chain);
    const getWidth = () => {
        let chars = props.value.replace(".", "").length;
        const hasDot = props.value.includes(".");
        if (hasDot) {
            chars += 0.3;
        }
        return `calc(${`${Math.max(1, chars)}ch`} + 6px)`;
    };
    return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { children: [(0, jsx_runtime_1.jsx)("div", { onClick: (e) => {
                    e.currentTarget.querySelector("input")?.focus();
                }, children: (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "both", gap: "xs", style: {
                        flexWrap: "nowrap",
                    }, children: [(0, jsx_runtime_1.jsx)(formElements_js_1.Input, { variant: "outline", pattern: "^[0-9]*[.,]?[0-9]*$", inputMode: "decimal", placeholder: "0", type: "text", "data-placeholder": props.value === "", value: props.value || "0", disabled: props.freezeAmount, onClick: (e) => {
                                // put cursor at the end of the input
                                if (props.value === "") {
                                    e.currentTarget.setSelectionRange(e.currentTarget.value.length, e.currentTarget.value.length);
                                }
                            }, onChange: (e) => {
                                let value = e.target.value;
                                if (value.startsWith(".")) {
                                    value = `0${value}`;
                                }
                                const numValue = Number(value);
                                if (Number.isNaN(numValue)) {
                                    return;
                                }
                                if (value.startsWith("0") && !value.startsWith("0.")) {
                                    props.onChange(value.slice(1));
                                }
                                else {
                                    props.onChange(value);
                                }
                            }, style: {
                                border: "none",
                                fontSize: props.value.length > 10
                                    ? "26px"
                                    : props.value.length > 6
                                        ? "34px"
                                        : "50px",
                                boxShadow: "none",
                                padding: "0",
                                paddingBlock: "2px",
                                fontWeight: 600,
                                textAlign: "right",
                                width: getWidth(),
                                maxWidth: "calc(100% - 100px)",
                            } }), (0, jsx_runtime_1.jsx)(TokenSymbol_js_1.TokenSymbol, { token: props.token, chain: props.chain, size: "lg", color: "secondaryText" })] }) }), !props.hideTokenSelector && ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", children: (0, jsx_runtime_1.jsxs)(TokenButton, { variant: "secondary", fullWidth: true, style: {
                                fontSize: index_js_1.fontSize.sm,
                            }, gap: "xxs", onClick: props.onSelectToken, disabled: props.freezeChainAndToken, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "y", gap: "sm", children: [(0, jsx_runtime_1.jsx)(TokenIcon_js_1.TokenIcon, { token: props.token, chain: props.chain, size: "md", client: props.client }), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", style: {
                                                gap: "4px",
                                            }, children: [(0, jsx_runtime_1.jsx)(TokenSymbol_js_1.TokenSymbol, { token: props.token, chain: props.chain, size: "sm" }), chainQuery.data?.name ? ((0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "xs", color: "secondaryText", children: chainQuery.data.name })) : ((0, jsx_runtime_1.jsx)(Skeleton_js_1.Skeleton, { width: "90px", height: index_js_1.fontSize.xs }))] })] }), (0, jsx_runtime_1.jsx)(react_icons_1.ChevronDownIcon, { width: index_js_1.iconSize.sm, height: index_js_1.iconSize.sm, style: {
                                        marginLeft: "auto",
                                    } })] }) })] }))] }));
}
exports.BuyTokenInput = BuyTokenInput;
const TokenButton = /* @__PURE__ */ (0, styled_1.default)(buttons_js_1.Button)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        background: theme.colors.tertiaryBg,
        border: `1px solid ${theme.colors.borderColor}`,
        justifyContent: "flex-start",
        transition: "background 0.3s",
        padding: index_js_1.spacing.sm,
    };
});
//# sourceMappingURL=BuyTokenInput.js.map