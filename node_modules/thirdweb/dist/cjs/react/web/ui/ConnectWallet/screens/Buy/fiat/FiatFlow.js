"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FiatFlow = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const isSwapRequiredPostOnramp_js_1 = require("../../../../../../../pay/buyWithFiat/isSwapRequiredPostOnramp.js");
const openOnRamppopup_js_1 = require("../openOnRamppopup.js");
const pendingSwapTx_js_1 = require("../swap/pendingSwapTx.js");
const FiatStatusScreen_js_1 = require("./FiatStatusScreen.js");
const FiatSteps_js_1 = require("./FiatSteps.js");
const PostOnRampSwapFlow_js_1 = require("./PostOnRampSwapFlow.js");
function FiatFlow(props) {
    const hasTwoSteps = (0, isSwapRequiredPostOnramp_js_1.isSwapRequiredPostOnramp)(props.quote);
    const [screen, setScreen] = (0, react_1.useState)(hasTwoSteps
        ? {
            id: "step-1",
        }
        : {
            id: "onramp-status",
        });
    const [popupWindow, setPopupWindow] = (0, react_1.useState)(props.openedWindow);
    if (screen.id === "step-1") {
        return ((0, jsx_runtime_1.jsx)(FiatSteps_js_1.FiatSteps, { client: props.client, onBack: props.onBack, partialQuote: (0, FiatSteps_js_1.fiatQuoteToPartialQuote)(props.quote), step: 1, onContinue: () => {
                const popup = (0, openOnRamppopup_js_1.openOnrampPopup)(props.quote.onRampLink, props.theme);
                (0, pendingSwapTx_js_1.addPendingTx)({
                    type: "fiat",
                    intentId: props.quote.intentId,
                });
                setPopupWindow(popup);
                setScreen({ id: "onramp-status" });
            } }));
    }
    if (screen.id === "onramp-status") {
        return ((0, jsx_runtime_1.jsx)(FiatStatusScreen_js_1.OnrampStatusScreen, { client: props.client, intentId: props.quote.intentId, onBack: props.onBack, onViewPendingTx: props.onViewPendingTx, hasTwoSteps: hasTwoSteps, openedWindow: popupWindow, quote: props.quote, onDone: props.onDone, onShowSwapFlow: (_status) => {
                setScreen({ id: "postonramp-swap", data: _status });
            }, isBuyForTx: props.isBuyForTx, isEmbed: props.isEmbed }));
    }
    if (screen.id === "postonramp-swap") {
        return ((0, jsx_runtime_1.jsx)(PostOnRampSwapFlow_js_1.PostOnRampSwapFlow, { status: screen.data, quote: (0, FiatSteps_js_1.fiatQuoteToPartialQuote)(props.quote), client: props.client, onBack: props.onBack, onViewPendingTx: props.onViewPendingTx, onDone: props.onDone, onSwapFlowStarted: () => {
                // no op
            }, isBuyForTx: props.isBuyForTx, isEmbed: props.isEmbed }));
    }
    // never
    return null;
}
exports.FiatFlow = FiatFlow;
//# sourceMappingURL=FiatFlow.js.map