"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectedConnectUI = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const useWalletConnectionCtx_js_1 = require("../../../../core/hooks/others/useWalletConnectionCtx.js");
const wait_js_1 = require("../../../../core/utils/wait.js");
const ConnectingScreen_js_1 = require("../../../wallets/shared/ConnectingScreen.js");
/**
 * @internal
 */
const InjectedConnectUI = (props) => {
    const { wallet, done } = props;
    const { client, chain } = (0, useWalletConnectionCtx_js_1.useConnectUI)();
    const [errorConnecting, setErrorConnecting] = (0, react_1.useState)(false);
    const locale = props.locale;
    const connectToExtension = (0, react_1.useCallback)(async () => {
        try {
            connectPrompted.current = true;
            setErrorConnecting(false);
            await (0, wait_js_1.wait)(1000);
            await wallet.connect({
                client,
                chain: chain,
            });
            done();
        }
        catch (e) {
            setErrorConnecting(true);
            console.error(e);
        }
    }, [client, chain, done, wallet]);
    const connectPrompted = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (connectPrompted.current) {
            return;
        }
        connectToExtension();
    }, [connectToExtension]);
    return ((0, jsx_runtime_1.jsx)(ConnectingScreen_js_1.ConnectingScreen, { locale: {
            getStartedLink: locale.getStartedLink,
            instruction: locale.connectionScreen.instruction,
            tryAgain: locale.connectionScreen.retry,
            inProgress: locale.connectionScreen.inProgress,
            failed: locale.connectionScreen.failed,
        }, onBack: props.onBack, walletName: props.walletInfo.name, onGetStarted: props.onGetStarted, walletId: props.wallet.id, onRetry: () => {
            connectToExtension();
        }, errorConnecting: errorConnecting }));
};
exports.InjectedConnectUI = InjectedConnectUI;
//# sourceMappingURL=InjectedConnectUI.js.map