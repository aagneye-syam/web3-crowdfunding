"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useUISelectionStates = void 0;
const react_1 = require("react");
const polygon_js_1 = require("../../../../../../../chains/chain-definitions/polygon.js");
const formatNumber_js_1 = require("../../../../../../../utils/formatNumber.js");
const units_js_1 = require("../../../../../../../utils/units.js");
const wallet_hooks_js_1 = require("../../../../../../core/hooks/wallets/wallet-hooks.js");
const useDebouncedValue_js_1 = require("../../../../hooks/useDebouncedValue.js");
const nativeToken_js_1 = require("../../nativeToken.js");
const currencies_js_1 = require("../fiat/currencies.js");
// handle states for token and chain selection
function useUISelectionStates(options) {
    const activeChain = (0, wallet_hooks_js_1.useActiveWalletChain)();
    const { payOptions, buyForTx, supportedDestinations } = options;
    // buy token amount ---------------------------------------------------------
    const initialTokenAmount = payOptions.prefillBuy?.amount ||
        (buyForTx
            ? String((0, formatNumber_js_1.formatNumber)(Number((0, units_js_1.toEther)(buyForTx.cost - buyForTx.balance)), 4))
            : "");
    const [hasEditedAmount, setHasEditedAmount] = (0, react_1.useState)(false);
    const [tokenAmount, setTokenAmount] = (0, react_1.useState)(initialTokenAmount);
    const deferredTokenAmount = (0, useDebouncedValue_js_1.useDebouncedValue)(tokenAmount, 300);
    // --------------------------------------------------------------------------
    // Destination chain and token selection -----------------------------------
    const [toChain, setToChain] = (0, react_1.useState)(
    // use prefill chain if available
    payOptions.prefillBuy?.chain ||
        // use buyForTx chain if available
        buyForTx?.tx.chain ||
        // use active chain if its supported as destination
        supportedDestinations.find((x) => x.chain.id === activeChain?.id)
            ?.chain ||
        // default to polygon
        polygon_js_1.polygon);
    const [toToken, setToToken] = (0, react_1.useState)(payOptions.prefillBuy?.token || nativeToken_js_1.NATIVE_TOKEN);
    // --------------------------------------------------------------------------
    // Source token and chain selection ---------------------------------------------------
    const [fromChain, setFromChain] = (0, react_1.useState)(
    // use prefill chain if available
    (payOptions.buyWithCrypto !== false &&
        payOptions.buyWithCrypto?.prefillSource?.chain) ||
        // default to polygon
        polygon_js_1.polygon);
    const [fromToken, setFromToken] = (0, react_1.useState)(
    // use prefill token if available
    (payOptions.buyWithCrypto !== false &&
        payOptions.buyWithCrypto?.prefillSource?.token) ||
        // default to native token
        nativeToken_js_1.NATIVE_TOKEN);
    // --------------------------------------------------------------------------
    // stripe only supports USD, so not using a state right now
    const selectedCurrency = currencies_js_1.defaultSelectedCurrency;
    return {
        tokenAmount,
        setTokenAmount,
        hasEditedAmount,
        toChain,
        setToChain,
        deferredTokenAmount,
        fromChain,
        setFromChain,
        toToken,
        setToToken,
        fromToken,
        setFromToken,
        selectedCurrency,
        setHasEditedAmount,
    };
}
exports.useUISelectionStates = useUISelectionStates;
//# sourceMappingURL=useUISelectionStates.js.map