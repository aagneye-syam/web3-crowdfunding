"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionButton = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const wait_for_tx_receipt_js_1 = require("../../../../transaction/actions/wait-for-tx-receipt.js");
const json_js_1 = require("../../../../utils/json.js");
const wallet_hooks_js_1 = require("../../../core/hooks/wallets/wallet-hooks.js");
const useSendTransaction_js_1 = require("../../hooks/useSendTransaction.js");
const Spinner_js_1 = require("../components/Spinner.js");
const buttons_js_1 = require("../components/buttons.js");
/**
 * TransactionButton component is used to render a button that triggers a transaction.
 * - It shows a "Switch Network" button if the connected wallet is on a different chain than the transaction.
 * @param props - The props for this component.
 * Refer to [TransactionButtonProps](https://portal.thirdweb.com/references/typescript/v5/TransactionButtonProps) for details.
 * @example
 * ```tsx
 * <TransactionButton
 *   transaction={() => {}}
 *   onSuccess={handleSuccess}
 *   onError={handleError}
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 * @component
 */
function TransactionButton(props) {
    const { children, transaction, onTransactionSent, onTransactionConfirmed, onError, onClick, gasless, payModal, disabled, ...buttonProps } = props;
    const account = (0, wallet_hooks_js_1.useActiveAccount)();
    const [isPending, setIsPending] = (0, react_1.useState)(false);
    const sendTransaction = (0, useSendTransaction_js_1.useSendTransaction)({
        gasless,
        payModal,
    });
    return ((0, jsx_runtime_1.jsxs)(buttons_js_1.Button, { gap: "xs", disabled: !account || disabled || isPending, variant: "primary", "data-is-loading": isPending, onClick: async (e) => {
            if (onClick) {
                onClick(e);
            }
            try {
                setIsPending(true);
                const resolvedTx = await transaction();
                const result = await sendTransaction.mutateAsync(resolvedTx);
                if (onTransactionSent) {
                    onTransactionSent(result);
                }
                if (onTransactionConfirmed) {
                    const receipt = await (0, wait_for_tx_receipt_js_1.waitForReceipt)(result);
                    if (receipt.status === "reverted")
                        throw new Error(`Execution reverted: ${(0, json_js_1.stringify)(receipt, null, 2)}`);
                    onTransactionConfirmed(receipt);
                }
            }
            catch (error) {
                if (onError) {
                    onError(error);
                }
            }
            finally {
                setIsPending(false);
            }
        }, style: {
            opacity: !account || disabled ? 0.5 : 1,
            minWidth: "150px",
            position: "relative",
            ...buttonProps.style,
        }, ...buttonProps, children: [(0, jsx_runtime_1.jsx)("span", { style: { visibility: isPending ? "hidden" : "visible" }, children: children }), isPending && ((0, jsx_runtime_1.jsx)("div", { style: {
                    position: "absolute",
                    display: "flex",
                    alignItems: "center",
                    height: "100%",
                    top: 0,
                    bottom: 0,
                    margin: "auto",
                }, children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "md", color: "primaryButtonText" }) }))] }));
}
exports.TransactionButton = TransactionButton;
//# sourceMappingURL=index.js.map