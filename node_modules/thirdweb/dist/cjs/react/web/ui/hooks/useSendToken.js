"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSendToken = void 0;
const react_query_1 = require("@tanstack/react-query");
const contract_js_1 = require("../../../../contract/contract.js");
const transfer_js_1 = require("../../../../extensions/erc20/write/transfer.js");
const wait_for_tx_receipt_js_1 = require("../../../../transaction/actions/wait-for-tx-receipt.js");
const prepare_transaction_js_1 = require("../../../../transaction/prepare-transaction.js");
const units_js_1 = require("../../../../utils/units.js");
const useSendTransaction_js_1 = require("../../../core/hooks/contract/useSendTransaction.js");
const useWalletConnectionCtx_js_1 = require("../../../core/hooks/others/useWalletConnectionCtx.js");
const wallet_hooks_js_1 = require("../../../core/hooks/wallets/wallet-hooks.js");
// Q: Should we expose this hook?
/**
 * Send Native or ERC20 tokens from active wallet to given address.
 * @internal
 */
function useSendToken() {
    const sendTransaction = (0, useSendTransaction_js_1.useSendTransactionCore)();
    const activeChain = (0, wallet_hooks_js_1.useActiveWalletChain)();
    const { client } = (0, useWalletConnectionCtx_js_1.useConnectUI)();
    return (0, react_query_1.useMutation)({
        async mutationFn(option) {
            const { tokenAddress, receiverAddress, amount } = option;
            if (!activeChain) {
                throw new Error("No active chain");
            }
            // native token transfer
            if (!tokenAddress) {
                const sendNativeTokenTx = (0, prepare_transaction_js_1.prepareTransaction)({
                    chain: activeChain,
                    client,
                    to: receiverAddress,
                    value: (0, units_js_1.toWei)(amount),
                });
                const txHash = await sendTransaction.mutateAsync(sendNativeTokenTx);
                await (0, wait_for_tx_receipt_js_1.waitForReceipt)(txHash);
            }
            // erc20 token transfer
            else {
                const contract = (0, contract_js_1.getContract)({
                    address: tokenAddress,
                    client,
                    chain: activeChain,
                });
                const tx = (0, transfer_js_1.transfer)({
                    amount,
                    contract,
                    to: receiverAddress,
                });
                const txHash = await sendTransaction.mutateAsync(tx);
                await (0, wait_for_tx_receipt_js_1.waitForReceipt)(txHash);
            }
        },
    });
}
exports.useSendToken = useSendToken;
//# sourceMappingURL=useSendToken.js.map