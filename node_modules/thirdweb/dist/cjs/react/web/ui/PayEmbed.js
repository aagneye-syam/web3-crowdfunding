"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayEmbed = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const ConnectButton_js_1 = require("./ConnectWallet/ConnectButton.js");
const getConnectLocale_js_1 = require("./ConnectWallet/locale/getConnectLocale.js");
const BuyScreen_js_1 = require("./ConnectWallet/screens/Buy/BuyScreen.js");
const BuyTxHistory_js_1 = require("./ConnectWallet/screens/Buy/tx-history/BuyTxHistory.js");
const DynamicHeight_js_1 = require("./components/DynamicHeight.js");
const Spinner_js_1 = require("./components/Spinner.js");
const basic_js_1 = require("./components/basic.js");
const CustomThemeProvider_js_1 = require("./design-system/CustomThemeProvider.js");
const index_js_1 = require("./design-system/index.js");
/**
 * Embed thirdweb Pay UI for Buy tokens using Crypto or Credit Card.
 *
 * PayEmbed also renders a "Connect" button if the user is not connected to a wallet. You can customize the options for "Connect" button using the `connectOptions` prop.
 *
 * @param props - Props of type [`PayEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/PayEmbedProps) to configure the PayEmbed component.
 *
 * @example
 * ```tsx
 * <PayEmbed
 *   client={client}
 *   connectOptions={{
 *     connectModal: {
 *       size: 'compact',
 *     }
 *   }}
 *   payOptions={{
 *     buyWithCrypto: false,
 *   }}
 *  />
 * ```
 */
function PayEmbed(props) {
    const localeQuery = (0, getConnectLocale_js_1.useConnectLocale)(props.locale || "en_US");
    const [screen, setScreen] = (0, react_1.useState)("buy");
    let content = null;
    if (!localeQuery.data) {
        content = ((0, jsx_runtime_1.jsx)("div", { style: {
                minHeight: "350px",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
            }, children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "xl", color: "secondaryText" }) }));
    }
    else {
        // show and hide screens with CSS to not lose state when switching between them
        content = ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("div", { style: { display: screen === "tx-history" ? "none" : "inherit" }, children: (0, jsx_runtime_1.jsx)(BuyScreen_js_1.default, { isEmbed: true, supportedTokens: props.supportedTokens, theme: props.theme || "dark", client: props.client, connectLocale: localeQuery.data, onViewPendingTx: () => {
                            setScreen("tx-history");
                        }, payOptions: props.payOptions || {}, onDone: () => {
                            // noop
                        }, connectButton: (0, jsx_runtime_1.jsx)(ConnectButton_js_1.ConnectButton, { ...props.connectOptions, client: props.client, connectButton: {
                                style: {
                                    width: "100%",
                                },
                            } }) }) }), screen === "tx-history" && ((0, jsx_runtime_1.jsx)(BuyTxHistory_js_1.BuyTxHistory, { client: props.client, onBack: () => {
                        setScreen("buy");
                    }, onDone: () => {
                        // noop
                    }, isBuyForTx: false, isEmbed: true }))] }));
    }
    return ((0, jsx_runtime_1.jsx)(CustomThemeProvider_js_1.CustomThemeProvider, { theme: props.theme || "dark", children: (0, jsx_runtime_1.jsx)(basic_js_1.Container, { bg: "modalBg", style: {
                borderRadius: index_js_1.radius.lg,
                minWidth: "360px",
                borderWidth: "1px",
                borderStyle: "solid",
                position: "relative",
                overflow: "hidden",
            }, borderColor: "borderColor", children: (0, jsx_runtime_1.jsx)(DynamicHeight_js_1.DynamicHeight, { children: content }) }) }));
}
exports.PayEmbed = PayEmbed;
//# sourceMappingURL=PayEmbed.js.map