"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InAppWalletOTPLoginUI = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const index_js_1 = require("../../../../wallets/in-app/core/authentication/index.js");
const useWalletConnectionCtx_js_1 = require("../../../core/hooks/others/useWalletConnectionCtx.js");
const FadeIn_js_1 = require("../../ui/components/FadeIn.js");
const OTPInput_js_1 = require("../../ui/components/OTPInput.js");
const Spacer_js_1 = require("../../ui/components/Spacer.js");
const Spinner_js_1 = require("../../ui/components/Spinner.js");
const basic_js_1 = require("../../ui/components/basic.js");
const buttons_js_1 = require("../../ui/components/buttons.js");
const text_js_1 = require("../../ui/components/text.js");
const CustomThemeProvider_js_1 = require("../../ui/design-system/CustomThemeProvider.js");
const elements_js_1 = require("../../ui/design-system/elements.js");
const index_js_2 = require("../../ui/design-system/index.js");
const storage_js_1 = require("./storage.js");
/**
 * @internal
 */
function InAppWalletOTPLoginUI(props) {
    const { wallet, done, goBack, userInfo } = props;
    const { client, chain, connectModal } = (0, useWalletConnectionCtx_js_1.useConnectUI)();
    const isWideModal = connectModal.size === "wide";
    const locale = props.locale;
    const [otpInput, setOtpInput] = (0, react_1.useState)("");
    const [verifyStatus, setVerifyStatus] = (0, react_1.useState)("idle");
    const [accountStatus, setAccountStatus] = (0, react_1.useState)("sending");
    const [screen] = (0, react_1.useState)("base");
    const sendEmailOrSms = (0, react_1.useCallback)(async () => {
        setOtpInput("");
        setVerifyStatus("idle");
        setAccountStatus("sending");
        try {
            if ("email" in userInfo) {
                const status = await (0, index_js_1.preAuthenticate)({
                    email: userInfo.email,
                    strategy: "email",
                    client,
                });
                setAccountStatus(status);
            }
            else if ("phone" in userInfo) {
                const status = await (0, index_js_1.preAuthenticate)({
                    phoneNumber: userInfo.phone,
                    strategy: "phone",
                    client,
                });
                setAccountStatus(status);
            }
            else {
                throw new Error("Invalid userInfo");
            }
        }
        catch (e) {
            console.error(e);
            setVerifyStatus("idle");
            setAccountStatus("error");
        }
    }, [client, userInfo]);
    async function connect(otp) {
        if ("email" in userInfo) {
            await wallet.connect({
                chain,
                strategy: "email",
                email: userInfo.email,
                verificationCode: otp,
                client,
            });
            await (0, storage_js_1.setLastAuthProvider)("email");
        }
        else if ("phone" in userInfo) {
            await wallet.connect({
                chain,
                strategy: "phone",
                phoneNumber: userInfo.phone,
                verificationCode: otp,
                client,
            });
            await (0, storage_js_1.setLastAuthProvider)("phone");
        }
        else {
            throw new Error("Invalid userInfo");
        }
    }
    const verify = async (otp) => {
        if (typeof accountStatus !== "object" || otp.length !== 6) {
            return;
        }
        setVerifyStatus("idle");
        if (typeof accountStatus !== "object") {
            return;
        }
        if (!wallet) {
            return;
        }
        try {
            setVerifyStatus("verifying");
            const needsRecoveryCode = accountStatus.recoveryShareManagement === "USER_MANAGED" &&
                (accountStatus.isNewUser || accountStatus.isNewDevice);
            // USER_MANAGED
            if (needsRecoveryCode) {
                if (accountStatus.isNewUser) {
                    try {
                        await connect(otp);
                    }
                    catch (e) {
                        if (e instanceof Error && e.message.includes("encryption key")) {
                            // setScreen("create-password");
                        }
                        else {
                            throw e;
                        }
                    }
                }
                else {
                    try {
                        // verifies otp for UI feedback
                        await connect(otp);
                    }
                    catch (e) {
                        if (e instanceof Error && e.message.includes("encryption key")) {
                            // TODO: do we need this?
                            // setScreen("enter-password-or-recovery-code");
                        }
                        else {
                            throw e;
                        }
                    }
                }
            }
            // AWS_MANAGED
            else {
                // verifies otp for UI feedback
                await connect(otp);
                done();
            }
            setVerifyStatus("valid");
        }
        catch (e) {
            if (e instanceof Error &&
                e?.message?.includes("PAYMENT_METHOD_REQUIRED")) {
                setVerifyStatus("payment_required");
            }
            else {
                setVerifyStatus("invalid");
            }
            console.error("Authentication Error", e);
        }
    };
    // send email on mount
    const emailSentOnMount = (0, react_1.useRef)(false);
    (0, react_1.useEffect)(() => {
        if (!emailSentOnMount.current) {
            emailSentOnMount.current = true;
            sendEmailOrSms();
        }
    }, [sendEmailOrSms]);
    if (screen === "base") {
        return ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { fullHeight: true, flex: "column", animate: "fadein", children: [(0, jsx_runtime_1.jsx)(basic_js_1.Container, { p: "lg", children: (0, jsx_runtime_1.jsx)(basic_js_1.ModalHeader, { title: locale.signIn, onBack: goBack }) }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { expand: true, flex: "column", center: "y", children: (0, jsx_runtime_1.jsxs)("form", { onSubmit: (e) => {
                            e.preventDefault();
                        }, children: [(0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "column", center: "x", px: "lg", children: [!isWideModal && (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { children: locale.emailLoginScreen.enterCodeSendTo }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "sm" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { color: "primaryText", children: "email" in userInfo ? userInfo.email : userInfo.phone }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" })] }), (0, jsx_runtime_1.jsx)(OTPInput_js_1.OTPInput, { isInvalid: verifyStatus === "invalid", digits: 6, value: otpInput, setValue: (value) => {
                                    setOtpInput(value);
                                    setVerifyStatus("idle"); // reset error
                                    verify(value);
                                }, onEnter: () => {
                                    verify(otpInput);
                                } }), verifyStatus === "invalid" && ((0, jsx_runtime_1.jsxs)(FadeIn_js_1.FadeIn, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "danger", center: true, children: locale.emailLoginScreen.invalidCode })] })), verifyStatus === "payment_required" && ((0, jsx_runtime_1.jsxs)(FadeIn_js_1.FadeIn, { children: [(0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "md" }), (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", color: "danger", center: true, children: locale.maxAccountsExceeded })] })), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), (0, jsx_runtime_1.jsx)(basic_js_1.Container, { px: isWideModal ? "xxl" : "lg", children: verifyStatus === "verifying" ? ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(basic_js_1.Container, { flex: "row", center: "x", animate: "fadein", children: (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "lg", color: "accentText" }) }) })) : ((0, jsx_runtime_1.jsx)(basic_js_1.Container, { animate: "fadein", children: (0, jsx_runtime_1.jsx)(buttons_js_1.Button, { onClick: () => verify(otpInput), variant: "accent", type: "submit", style: {
                                            width: "100%",
                                        }, children: locale.emailLoginScreen.verify }) }, "btn-container")) }), (0, jsx_runtime_1.jsx)(Spacer_js_1.Spacer, { y: "xl" }), !isWideModal && (0, jsx_runtime_1.jsx)(basic_js_1.Line, {}), (0, jsx_runtime_1.jsxs)(basic_js_1.Container, { p: isWideModal ? undefined : "lg", children: [accountStatus === "error" && ((0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, { children: (0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", center: true, color: "danger", children: locale.emailLoginScreen.failedToSendCode }) })), accountStatus === "sending" && ((0, jsx_runtime_1.jsxs)(basic_js_1.Container, { flex: "row", center: "both", gap: "xs", style: {
                                            textAlign: "center",
                                        }, children: [(0, jsx_runtime_1.jsx)(text_js_1.Text, { size: "sm", children: locale.emailLoginScreen.sendingCode }), (0, jsx_runtime_1.jsx)(Spinner_js_1.Spinner, { size: "xs", color: "secondaryText" })] })), typeof accountStatus === "object" && ((0, jsx_runtime_1.jsx)(LinkButton, { onClick: sendEmailOrSms, type: "button", children: locale.emailLoginScreen.resendCode }))] })] }) })] }));
    }
    return null;
}
exports.InAppWalletOTPLoginUI = InAppWalletOTPLoginUI;
const LinkButton = /* @__PURE__ */ (0, elements_js_1.StyledButton)(() => {
    const theme = (0, CustomThemeProvider_js_1.useCustomTheme)();
    return {
        all: "unset",
        color: theme.colors.accentText,
        fontSize: index_js_2.fontSize.sm,
        cursor: "pointer",
        textAlign: "center",
        fontWeight: 500,
        width: "100%",
        "&:hover": {
            color: theme.colors.primaryText,
        },
    };
});
//# sourceMappingURL=InAppWalletOTPLoginUI.js.map