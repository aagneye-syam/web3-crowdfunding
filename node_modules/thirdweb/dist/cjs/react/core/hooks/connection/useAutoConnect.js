"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoAutoConnect = exports.AutoConnect = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const index_js_1 = require("../../../../wallets/manager/index.js");
const asyncLocalStorage_js_1 = require("../../../../wallets/storage/asyncLocalStorage.js");
const connectionManager_js_1 = require("../../connectionManager.js");
const timeoutPromise_js_1 = require("../../utils/timeoutPromise.js");
const wallet_hooks_js_1 = require("../wallets/wallet-hooks.js");
let autoConnectAttempted = false;
/**
 * AutoConnect last connected wallet on page reload or revisit.
 * Note: If you are using `ConnectButton` or `ConnectEmbed` components, You don't need to use this component as it is already included.
 *
 * This is useful if you are manually connecting the wallets using the [`useConnect`](https://portal.thirdweb.com/references/typescript/v5/useConnect) hook and want to auto connect the last connected wallets on page reload or revisit.
 * @param props - Object of type `AutoConnectProps`. Refer to [`AutoConnectProps`](https://portal.thirdweb.com/references/typescript/v5/AutoConnectProps)
 * @example
 * ```tsx
 * import { AutoConnect } from "thirdweb/react";
 * import { createWallet, inAppWallet } from "thirdweb/wallets";
 *
 *
 * // list of wallets that your app uses
 * const wallets = [
 *  inAppWallet(),
 *  createWallet('io.metamask'),
 *  createWallet("me.rainbow"),
 * ]
 *
 * function Example() {
 *  return (
 *    <AutoConnect
 *      wallets={wallets}
 *      client={client}
 *      appMetadata={appMetadata}
 *    />
 *  );
 * }
 * ```
 * @component
 */
function AutoConnect(props) {
    const setConnectionStatus = (0, wallet_hooks_js_1.useSetActiveWalletConnectionStatus)();
    const { connect } = (0, wallet_hooks_js_1.useConnect)({
        client: props.client,
        accountAbstraction: props.accountAbstraction,
    });
    const { isAutoConnecting } = connectionManager_js_1.connectionManager;
    const { wallets, onConnect } = props;
    const timeout = props.timeout ?? 15000;
    // get the supported wallets from thirdweb provider
    // check the storage for last connected wallets and connect them all
    // check the storage for last active wallet and set it as active
    (0, react_1.useEffect)(() => {
        if (autoConnectAttempted) {
            return;
        }
        autoConnectAttempted = true;
        const startAutoConnect = async () => {
            const [lastConnectedWalletIds, lastActiveWalletId] = await Promise.all([
                (0, index_js_1.getStoredConnectedWalletIds)(asyncLocalStorage_js_1.asyncLocalStorage),
                (0, index_js_1.getStoredActiveWalletId)(asyncLocalStorage_js_1.asyncLocalStorage),
            ]);
            // if no wallets were last connected
            if (!lastConnectedWalletIds) {
                return;
            }
            const lastConnectedChain = await (0, index_js_1.getLastConnectedChain)(asyncLocalStorage_js_1.asyncLocalStorage);
            async function handleWalletConnection(wallet) {
                return wallet.autoConnect({
                    client: props.client,
                    chain: lastConnectedChain ?? undefined,
                });
            }
            const activeWallet = lastActiveWalletId && wallets.find((w) => w.id === lastActiveWalletId);
            if (activeWallet) {
                try {
                    setConnectionStatus("connecting"); // only set connecting status if we are connecting the last active EOA
                    await (0, timeoutPromise_js_1.timeoutPromise)(handleWalletConnection(activeWallet), {
                        ms: timeout,
                        message: `AutoConnect timeout : ${timeout}ms limit exceeded.`,
                    });
                    // connected wallet could be activeWallet or smart wallet
                    const connectedWallet = await connect(activeWallet);
                    if (connectedWallet) {
                        if (onConnect) {
                            try {
                                onConnect(connectedWallet);
                            }
                            catch {
                                // ignore
                            }
                        }
                    }
                    else {
                        setConnectionStatus("disconnected");
                    }
                }
                catch (e) {
                    console.error("Failed to auto connect last active wallet");
                    console.error(e);
                    setConnectionStatus("disconnected");
                }
            }
            else {
                setConnectionStatus("disconnected");
            }
            // then connect wallets that were last connected but were not set as active
            const otherWallets = wallets.filter((w) => w.id !== lastActiveWalletId && lastConnectedWalletIds.includes(w.id));
            for (const wallet of otherWallets) {
                try {
                    await handleWalletConnection(wallet);
                    connectionManager_js_1.connectionManager.addConnectedWallet(wallet);
                }
                catch (e) {
                    console.error("Failed to auto connect a non-active connected wallet");
                    console.error(e);
                }
            }
        };
        (async () => {
            isAutoConnecting.setValue(true);
            await startAutoConnect();
            isAutoConnecting.setValue(false);
        })();
    });
    return (0, jsx_runtime_1.jsx)("div", { children: " " });
}
exports.AutoConnect = AutoConnect;
let noAutoConnectDone = false;
/**
 * @internal
 */
function NoAutoConnect() {
    const setConnectionStatus = (0, wallet_hooks_js_1.useSetActiveWalletConnectionStatus)();
    (0, react_1.useEffect)(() => {
        if (noAutoConnectDone) {
            return;
        }
        noAutoConnectDone = true;
        setConnectionStatus("disconnected");
    });
    return null;
}
exports.NoAutoConnect = NoAutoConnect;
//# sourceMappingURL=useAutoConnect.js.map