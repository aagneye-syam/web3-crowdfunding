"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useChainsQuery = exports.useChainQuery = void 0;
const react_query_1 = require("@tanstack/react-query");
const react_1 = require("react");
const utils_js_1 = require("../../../../chains/utils.js");
const p_limit_js_1 = require("../../../../utils/promise/p-limit.js");
function getQueryOptions(chain) {
    return {
        queryKey: ["chain", chain],
        enabled: !!chain,
        staleTime: 1000 * 60 * 60, // 1 hour
    };
}
/**
 * @internal
 */
function useChainQuery(chain) {
    return (0, react_query_1.useQuery)({
        ...getQueryOptions(chain),
        queryFn: async () => {
            if (!chain) {
                throw new Error("chainId is required");
            }
            return (0, utils_js_1.getChainMetadata)(chain);
        },
    });
}
exports.useChainQuery = useChainQuery;
/**
 * @param chains - array of `Chains`
 * @param maxConcurrency - maximum number of concurrent requests to make
 * @internal
 */
function useChainsQuery(chains, maxConcurrency) {
    const queryList = (0, react_1.useMemo)(() => {
        const limit = (0, p_limit_js_1.pLimit)(maxConcurrency);
        return chains.map((chain) => {
            return {
                ...getQueryOptions(chain),
                queryFn: () => limit(() => (0, utils_js_1.getChainMetadata)(chain)),
            };
        });
    }, [chains, maxConcurrency]);
    return (0, react_query_1.useQueries)({
        queries: queryList,
    });
}
exports.useChainsQuery = useChainsQuery;
//# sourceMappingURL=useChainQuery.js.map