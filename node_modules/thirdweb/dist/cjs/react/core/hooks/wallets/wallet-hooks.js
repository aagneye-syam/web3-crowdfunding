"use strict";
"use client";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useIsAutoConnecting = exports.useSetActiveWalletConnectionStatus = exports.useActiveWalletConnectionStatus = exports.useDisconnect = exports.useConnect = exports.useSetActiveWallet = exports.useConnectedWallets = exports.useActiveWalletChain = exports.useSwitchActiveWalletChain = exports.useActiveWallet = exports.useActiveAccount = void 0;
const react_1 = require("react");
const connectionManager_js_1 = require("../../connectionManager.js");
/**
 * A hook that returns the active account
 * @returns The active `Account` or `undefined` if no active account is set.
 * @example
 * ```jsx
 * import { useActiveAccount } from "thirdweb/react";
 *
 * const activeAccount = useActiveAccount();
 * ```
 * @walletConnection
 */
function useActiveAccount() {
    const store = connectionManager_js_1.connectionManager.activeAccountStore;
    return (0, react_1.useSyncExternalStore)(store.subscribe, store.getValue, store.getValue);
}
exports.useActiveAccount = useActiveAccount;
/**
 * A hook that returns the active wallet
 * @returns The active `Wallet` or `undefined` if no active wallet is set.
 * @example
 * ```jsx
 * import { useActiveWallet } from "thirdweb/react";
 *
 * const wallet = useActiveWallet();
 * ```
 * @walletConnection
 */
function useActiveWallet() {
    const store = connectionManager_js_1.connectionManager.activeWalletStore;
    return (0, react_1.useSyncExternalStore)(store.subscribe, store.getValue, store.getValue);
}
exports.useActiveWallet = useActiveWallet;
/**
 * Switch to blockchain with given chain id in the active wallet.
 * @returns A function to switch to blockchain with given chain id in the active wallet.
 * @example
 * ```jsx
 * import { useSwitchActiveWalletChain } from "thirdweb/react";
 * import { sepolia } from "thirdweb/chains";
 *
 * const switchChain = useSwitchActiveWalletChain();
 *
 * // later in your code
 * <button onClick={() => switchChain(sepolia)}>Switch Chain</button>
 * ```
 * @walletConnection
 */
function useSwitchActiveWalletChain() {
    return connectionManager_js_1.connectionManager.switchActiveWalletChain;
}
exports.useSwitchActiveWalletChain = useSwitchActiveWalletChain;
/**
 * A hook that returns the chain the active wallet is connected to
 * @returns The chain the active wallet is connected to or null if no active wallet.
 * @example
 * ```jsx
 * import { useActiveWalletChain } from "thirdweb/react";
 *
 * const chainId = useActiveWalletChain();
 * ```
 * @walletConnection
 */
function useActiveWalletChain() {
    const store = connectionManager_js_1.connectionManager.activeWalletChainStore;
    return (0, react_1.useSyncExternalStore)(store.subscribe, store.getValue, store.getValue);
}
exports.useActiveWalletChain = useActiveWalletChain;
/**
 * A hook that returns all connected wallets
 * @returns An array of all connected wallets
 * @example
 * ```jsx
 * import { useConnectedWallets } from "thirdweb/react";
 *
 * const wallets = useConnectedWallets();
 * ```
 * @walletConnection
 */
function useConnectedWallets() {
    const store = connectionManager_js_1.connectionManager.connectedWallets;
    return (0, react_1.useSyncExternalStore)(store.subscribe, store.getValue, store.getValue);
}
exports.useConnectedWallets = useConnectedWallets;
/**
 * A hook that lets you set the active wallet.
 * @returns A function that lets you set the active wallet.
 * @example
 * ```jsx
 * import { useSetActiveWallet } from "thirdweb/react";
 *
 * const setActiveAccount = useSetActiveWallet();
 *
 * // later in your code
 * await setActiveAccount(account);
 * ```
 * @walletConnection
 */
function useSetActiveWallet() {
    return connectionManager_js_1.connectionManager.setActiveWallet;
}
exports.useSetActiveWallet = useSetActiveWallet;
/**
 * A hook to set a wallet as active wallet
 * @returns A function that lets you connect a wallet.
 * @example
 * ```jsx
 * import { useConnect } from "thirdweb/react";
 * import { createWallet } from "thirdweb/wallets";
 *
 * function Example() {
 *   const { connect, isConnecting, error } = useConnect();
 *   return (
 *     <button
 *       onClick={() =>
 *         connect(async () => {
 *           // instantiate wallet
 *           const wallet = createWallet("io.metamask");
 *           // connect wallet
 *           await wallet.connect();
 *           // return the wallet
 *           return wallet;
 *         })
 *       }
 *     >
 *       Connect
 *     </button>
 *   );
 * }
 * ```
 * @walletConnection
 */
function useConnect(options) {
    const { connect } = connectionManager_js_1.connectionManager;
    const [isConnecting, setIsConnecting] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)(null);
    const handleConnection = (0, react_1.useCallback)(async (walletOrFn) => {
        // reset error state
        setError(null);
        if (typeof walletOrFn !== "function") {
            return connect(walletOrFn, options);
        }
        setIsConnecting(true);
        try {
            const w = await walletOrFn();
            return connect(w, options);
        }
        catch (e) {
            console.error(e);
            setError(e);
        }
        finally {
            setIsConnecting(false);
        }
        return null;
    }, [connect, options]);
    return { connect: handleConnection, isConnecting, error };
}
exports.useConnect = useConnect;
/**
 * Disconnect from given account
 * @example
 * ```jsx
 * import { useDisconnect, useActiveWallet } from "thirdweb/react";
 *
 * function Example() {
 *   const { disconnect } = useDisconnect();
 *   const wallet = useActiveWallet();
 *
 *   return (
 *     <button onClick={() => disconnect(wallet)}>
 *       Disconnect
 *     </button>
 *   );
 * }
 * ```
 * @walletConnection
 * @returns An object with a function to disconnect an account
 */
function useDisconnect() {
    const disconnect = connectionManager_js_1.connectionManager.disconnectWallet;
    return { disconnect };
}
exports.useDisconnect = useDisconnect;
/**
 * A hook that returns the active account's connection status.
 * @example
 * ```jsx
 * import { useActiveWalletConnectionStatus } from "thirdweb/react";
 *
 * function Example() {
 *   const status = useActiveWalletConnectionStatus();
 *   console.log(status);
 *   return <div> ... </div>;
 * }
 * ```
 * @returns The active wallet's connection status.
 * @walletConnection
 */
function useActiveWalletConnectionStatus() {
    const store = connectionManager_js_1.connectionManager.activeWalletConnectionStatusStore;
    return (0, react_1.useSyncExternalStore)(store.subscribe, store.getValue, store.getValue);
}
exports.useActiveWalletConnectionStatus = useActiveWalletConnectionStatus;
/**
 * A hook that returns the active wallet's connection status.
 * @example
 * ```jsx
 * function Example() {
 *   const setActive = useSetActiveWalletConnectionStatus();
 *
 *   // when you want to set an account as active
 *   setActive(account)
 * }
 * ```
 * @returns The active wallet's connection status.
 * @internal
 */
function useSetActiveWalletConnectionStatus() {
    return connectionManager_js_1.connectionManager.activeWalletConnectionStatusStore.setValue;
}
exports.useSetActiveWalletConnectionStatus = useSetActiveWalletConnectionStatus;
/**
 * A hook to check if the auto connect is in progress.
 * @example
 * ```jsx
 * function Example() {
 *   const isAutoConnecting = useIsAutoConnecting();
 *
 *   return <div> ... </div>;
 * }
 * ```
 * @returns A boolean indicating if the auto connect is in progress.
 * @walletConnection
 */
function useIsAutoConnecting() {
    const store = connectionManager_js_1.connectionManager.isAutoConnecting;
    return (0, react_1.useSyncExternalStore)(store.subscribe, store.getValue, store.getValue);
}
exports.useIsAutoConnecting = useIsAutoConnecting;
//# sourceMappingURL=wallet-hooks.js.map