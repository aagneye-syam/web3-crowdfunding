"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getOrDeployInfraContract = exports.deployImplementation = exports.deployCloneFactory = exports.getOrDeployInfraForPublishedContract = void 0;
const send_and_confirm_transaction_js_1 = require("../../../transaction/actions/send-and-confirm-transaction.js");
const clone_factory_js_1 = require("./clone-factory.js");
const create_2_factory_js_1 = require("./create-2-factory.js");
const infra_js_1 = require("./infra.js");
/**
 * @internal
 */
async function getOrDeployInfraForPublishedContract(args) {
    const { chain, client, account, contractId, constructorParams, publisher } = args;
    let [cloneFactoryContract, implementationContract] = await Promise.all([
        (0, clone_factory_js_1.getDeployedCloneFactoryContract)({
            chain,
            client,
        }),
        (0, infra_js_1.getDeployedInfraContract)({
            chain,
            client,
            contractId,
            constructorParams,
            publisher,
        }),
    ]);
    if (!implementationContract || !cloneFactoryContract) {
        // deploy the infra and implementation contracts if not found
        cloneFactoryContract = await deployCloneFactory({
            client,
            chain,
            account,
        });
        implementationContract = await deployImplementation({
            client,
            chain,
            account,
            contractId,
            constructorParams,
            publisher,
        });
    }
    return { cloneFactoryContract, implementationContract };
}
exports.getOrDeployInfraForPublishedContract = getOrDeployInfraForPublishedContract;
/**
 * @internal
 * @returns the deployed clone factory contract
 */
async function deployCloneFactory(options) {
    // create2 factory
    const create2Factory = await (0, create_2_factory_js_1.getDeployedCreate2Factory)(options);
    if (!create2Factory) {
        await (0, create_2_factory_js_1.deployCreate2Factory)(options);
    }
    // Forwarder
    const forwarder = await getOrDeployInfraContract({
        ...options,
        contractId: "Forwarder",
        constructorParams: [],
    });
    // clone factory
    return getOrDeployInfraContract({
        ...options,
        contractId: "TWCloneFactory",
        constructorParams: [forwarder.address],
    });
}
exports.deployCloneFactory = deployCloneFactory;
/**
 * @internal
 * @returns the deployed infra contract
 */
async function deployImplementation(options) {
    return getOrDeployInfraContract({
        ...options,
        contractId: options.contractId,
        constructorParams: options.constructorParams || [],
        publisher: options.publisher,
        version: options.version,
    });
}
exports.deployImplementation = deployImplementation;
/**
 * Convenience function to get or deploy an infra contract
 * @internal
 */
async function getOrDeployInfraContract(options) {
    const infraContract = await (0, infra_js_1.getDeployedInfraContract)(options);
    if (infraContract) {
        return infraContract;
    }
    const transaction = (0, infra_js_1.prepareInfraContractDeployTransaction)(options);
    await (0, send_and_confirm_transaction_js_1.sendAndConfirmTransaction)({
        transaction,
        account: options.account,
    });
    const deployedInfraContract = await (0, infra_js_1.getDeployedInfraContract)(options);
    if (!deployedInfraContract) {
        throw new Error(`Failed to deploy ${options.contractId}`);
    }
    return deployedInfraContract;
}
exports.getOrDeployInfraContract = getOrDeployInfraContract;
//# sourceMappingURL=bootstrap.js.map