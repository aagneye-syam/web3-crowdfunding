"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.download = void 0;
const fetch_js_1 = require("../utils/fetch.js");
const ipfs_js_1 = require("../utils/ipfs.js");
/**
 * Downloads a file from the specified URI.
 * @param options - The download options.
 * @returns A Promise that resolves to the downloaded file.
 * @throws An error if the URI scheme is invalid.
 * @example
 * ```ts
 * import { download } from "thirdweb/storage";
 * const file = await download({
 *  client,
 *  uri: "ipfs://Qm...",
 * });
 * ```
 * @storage
 */
async function download(options) {
    let url;
    if (options.uri.startsWith("ar://")) {
        const { resolveArweaveScheme } = await Promise.resolve().then(() => require("../utils/arweave.js"));
        url = resolveArweaveScheme(options);
    }
    else {
        url = (0, ipfs_js_1.resolveScheme)(options);
    }
    const res = await (0, fetch_js_1.getClientFetch)(options.client)(url, {
        keepalive: options.client.config?.storage?.fetch?.keepalive,
        headers: options.client.config?.storage?.fetch?.headers,
        requestTimeoutMs: options.client.config?.storage?.fetch?.requestTimeoutMs,
    });
    if (!res.ok) {
        res.body?.cancel();
        throw new Error(`Failed to download file: ${res.statusText}`);
    }
    return res;
}
exports.download = download;
//# sourceMappingURL=download.js.map