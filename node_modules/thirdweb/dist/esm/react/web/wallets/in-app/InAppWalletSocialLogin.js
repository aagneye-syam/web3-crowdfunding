"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useRef, useState } from "react";
import { useConnectUI } from "../../../core/hooks/others/useWalletConnectionCtx.js";
import { Spacer } from "../../ui/components/Spacer.js";
import { Spinner } from "../../ui/components/Spinner.js";
import { Container, ModalHeader } from "../../ui/components/basic.js";
import { Button } from "../../ui/components/buttons.js";
import { Text } from "../../ui/components/text.js";
import { useCustomTheme } from "../../ui/design-system/CustomThemeProvider.js";
import { openOauthSignInWindow } from "./openOauthSignInWindow.js";
import { setLastAuthProvider } from "./storage.js";
/**
 * @internal
 */
export function InAppWalletSocialLogin(props) {
    const ewLocale = props.locale;
    const locale = ewLocale.socialLoginScreen;
    const themeObj = useCustomTheme();
    const { connectModal } = useConnectUI();
    const [authError, setAuthError] = useState(undefined);
    const { done, wallet } = props;
    const [status, setStatus] = useState("connecting");
    const { client, chain } = useConnectUI();
    const handleSocialLogin = async () => {
        try {
            const socialWindow = openOauthSignInWindow(props.socialAuth, themeObj);
            if (!socialWindow) {
                throw new Error(`Failed to open ${props.socialAuth} login window`);
            }
            setStatus("connecting");
            await wallet.connect({
                chain,
                strategy: props.socialAuth,
                openedWindow: socialWindow,
                closeOpenedWindow: (openedWindow) => {
                    openedWindow.close();
                },
                client,
            });
            await setLastAuthProvider(props.socialAuth);
            setStatus("connected");
            done();
        }
        catch (e) {
            setStatus("error");
            // TODO this only happens on 'retry' button click, not on initial login
            // should pass auth error message to this component
            if (e instanceof Error &&
                e?.message?.includes("PAYMENT_METHOD_REQUIRED")) {
                setAuthError(ewLocale.maxAccountsExceeded);
            }
            console.error(`Error sign in with ${props.socialAuth}`, e);
        }
    };
    // const { setModalVisibility } = props.connectUIProps.screenConfig;
    const socialLogin = props.state?.socialLogin;
    const socialLoginStarted = useRef(false);
    useEffect(() => {
        if (socialLoginStarted.current) {
            return;
        }
        if (socialLogin) {
            socialLoginStarted.current = true;
            setStatus("connecting");
            socialLogin.connectionPromise
                .then(() => {
                done();
                setStatus("connected");
            })
                .catch(() => {
                setStatus("error");
            });
        }
    }, [done, socialLogin]);
    return (_jsx(Container, { animate: "fadein", flex: "column", fullHeight: true, children: _jsxs(Container, { flex: "column", expand: true, p: "lg", style: {
                paddingBottom: 0,
            }, children: [props.goBack && (_jsx(ModalHeader, { title: locale.title, onBack: props.goBack })), connectModal.size === "compact" ? _jsx(Spacer, { y: "xl" }) : null, _jsxs(Container, { flex: "column", center: "both", expand: true, style: {
                        textAlign: "center",
                        minHeight: "250px",
                    }, children: [status !== "error" && (_jsxs(Container, { animate: "fadein", children: [_jsx(Text, { color: "primaryText", center: true, multiline: true, style: {
                                        maxWidth: "250px",
                                    }, children: locale.instruction }), _jsx(Spacer, { y: "xl" }), _jsx(Container, { center: "x", flex: "row", children: _jsx(Spinner, { size: "lg", color: "accentText" }) }), _jsx(Spacer, { y: "xxl" })] })), status === "error" && (_jsxs(Container, { animate: "fadein", children: [_jsx(Text, { color: "danger", children: locale.failed }), authError && _jsx(Text, { color: "danger", children: authError }), _jsx(Spacer, { y: "lg" }), _jsx(Button, { variant: "primary", onClick: handleSocialLogin, children: locale.retry }), _jsx(Spacer, { y: "xxl" })] }))] })] }) }));
}
//# sourceMappingURL=InAppWalletSocialLogin.js.map