import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useRef, useState } from "react";
import { hasStoredPasskey } from "../../../../wallets/in-app/implementations/lib/auth/passkeys.js";
import { useConnectUI } from "../../../core/hooks/others/useWalletConnectionCtx.js";
import { AccentFailIcon } from "../../ui/ConnectWallet/icons/AccentFailIcon.js";
import { FingerPrintIcon } from "../../ui/ConnectWallet/icons/FingerPrintIcon.js";
import { Spacer } from "../../ui/components/Spacer.js";
import { Spinner } from "../../ui/components/Spinner.js";
import { Container, ModalHeader } from "../../ui/components/basic.js";
import { Button } from "../../ui/components/buttons.js";
import { Text } from "../../ui/components/text.js";
import { iconSize } from "../../ui/design-system/index.js";
import { LoadingScreen } from "../shared/LoadingScreen.js";
import { setLastAuthProvider } from "./storage.js";
// is passkey stored?
// - login
// else
// - show login or signup options
export function InAppWalletPassKeyLogin(props) {
    const { client, connectModal, chain } = useConnectUI();
    const { wallet, done } = props;
    const [screen, setScreen] = useState("loading");
    const triggered = useRef(false);
    useEffect(() => {
        if (triggered.current) {
            return;
        }
        triggered.current = true;
        hasStoredPasskey(client)
            .then((isStored) => {
            if (isStored) {
                setScreen("login");
            }
            else {
                setScreen("select");
            }
        })
            .catch(() => {
            setScreen("select");
        });
    }, [client]);
    return (_jsxs(Container, { animate: "fadein", fullHeight: true, flex: "column", children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: "Passkey", onBack: props.onBack }) }), _jsx(Container, { px: connectModal.size === "wide" ? "xxl" : "lg", expand: true, flex: "column", center: "y", children: _jsxs("div", { children: [screen === "loading" && (_jsxs(_Fragment, { children: [_jsx(LoadingScreen, {}), _jsx(Spacer, { y: "xxl" })] })), screen === "select" && (_jsx(SelectLoginMethod, { onSignin: () => {
                                setScreen("login");
                            }, onSignup: () => {
                                setScreen("signup");
                            } })), screen === "login" && (_jsx(LoginScreen, { wallet: wallet, client: client, done: done, onCreate: () => {
                                setScreen("signup");
                            }, chain: chain })), screen === "signup" && (_jsx(SignupScreen, { wallet: wallet, client: client, done: done, chain: chain }))] }) })] }));
}
function LoginScreen(props) {
    const { wallet, done, client, chain } = props;
    const [status, setStatus] = useState("loading");
    async function login() {
        setStatus("loading");
        try {
            await wallet.connect({
                client: client,
                strategy: "passkey",
                type: "sign-in",
                chain,
            });
            await setLastAuthProvider("passkey");
            done();
        }
        catch {
            setStatus("error");
        }
    }
    const triggered = useRef(false);
    useEffect(() => {
        if (triggered.current) {
            return;
        }
        triggered.current = true;
        login();
    });
    if (status === "loading") {
        return (_jsx(LoadingState, { title: "Requesting Passkey", subtitle: "A pop-up prompt will appear to sign-in and verify your passkey" }));
    }
    if (status === "error") {
        return (_jsxs(_Fragment, { children: [_jsx(ErrorState, { onTryAgain: login, title: "Failed to Login" }), _jsx(Spacer, { y: "sm" }), _jsx(Button, { variant: "outline", fullWidth: true, onClick: props.onCreate, children: "Create a new Passkey" }), _jsx(Spacer, { y: "lg" })] }));
    }
    return null;
}
function SignupScreen(props) {
    const { wallet, done, client, chain } = props;
    const [status, setStatus] = useState("loading");
    async function signup() {
        setStatus("loading");
        try {
            await wallet.connect({
                client: client,
                strategy: "passkey",
                type: "sign-up",
                chain,
            });
            await setLastAuthProvider("passkey");
            done();
        }
        catch {
            setStatus("error");
        }
    }
    const triggered = useRef(false);
    useEffect(() => {
        if (triggered.current) {
            return;
        }
        triggered.current = true;
        signup();
    });
    if (status === "loading") {
        return (_jsx(LoadingState, { title: "Creating Passkey", subtitle: "A pop-up prompt will appear to sign-in and verify your passkey" }));
    }
    if (status === "error") {
        return (_jsxs(_Fragment, { children: [_jsx(ErrorState, { onTryAgain: signup, title: "Failed to create passkey" }), _jsx(Spacer, { y: "lg" })] }));
    }
    return null;
}
function SelectLoginMethod(props) {
    return (_jsxs(Container, { children: [_jsx(Spacer, { y: "xxl" }), _jsx(Container, { flex: "row", center: "x", color: "accentText", children: _jsx(FingerPrintIcon, { size: iconSize["4xl"] }) }), _jsx(Spacer, { y: "xl" }), _jsx(Spacer, { y: "xxl" }), _jsx(Button, { variant: "accent", onClick: props.onSignup, fullWidth: true, children: "Create a Passkey" }), _jsx(Spacer, { y: "sm" }), _jsx(Button, { variant: "outline", onClick: props.onSignin, fullWidth: true, children: "I have a Passkey" }), _jsx(Spacer, { y: "lg" })] }));
}
function ErrorState(props) {
    return (_jsxs(Container, { animate: "fadein", children: [_jsx(Spacer, { y: "xxl" }), _jsx(Container, { flex: "row", center: "x", children: _jsx(AccentFailIcon, { size: iconSize["3xl"] }) }), _jsx(Spacer, { y: "lg" }), _jsx(Text, { center: true, color: "primaryText", size: "lg", children: props.title }), _jsx(Spacer, { y: "xl" }), _jsx(Spacer, { y: "xxl" }), _jsx(Button, { variant: "accent", fullWidth: true, onClick: props.onTryAgain, children: "Try Again" })] }));
}
function LoadingState(props) {
    return (_jsxs(Container, { animate: "fadein", children: [_jsx(Spacer, { y: "xxl" }), _jsxs(Container, { flex: "row", center: "x", style: {
                    position: "relative",
                }, children: [_jsx(Spinner, { size: "4xl", color: "accentText" }), _jsx(Container, { color: "accentText", style: {
                            position: "absolute",
                            top: "50%",
                            left: "50%",
                            transform: "translate(-50%, -50%)",
                        }, children: _jsx(FingerPrintIcon, { size: iconSize.xxl }) })] }), _jsx(Spacer, { y: "xl" }), _jsx(Text, { center: true, color: "primaryText", size: "lg", children: props.title }), _jsx(Spacer, { y: "md" }), _jsx(Text, { multiline: true, center: true, children: props.subtitle }), _jsx(Spacer, { y: "xxl" }), _jsx(Spacer, { y: "xxl" })] }));
}
//# sourceMappingURL=InAppWalletPassKeyLogin.js.map