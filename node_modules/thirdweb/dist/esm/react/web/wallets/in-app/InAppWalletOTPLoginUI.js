"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useCallback, useEffect, useRef, useState } from "react";
import { preAuthenticate } from "../../../../wallets/in-app/core/authentication/index.js";
import { useConnectUI } from "../../../core/hooks/others/useWalletConnectionCtx.js";
import { FadeIn } from "../../ui/components/FadeIn.js";
import { OTPInput } from "../../ui/components/OTPInput.js";
import { Spacer } from "../../ui/components/Spacer.js";
import { Spinner } from "../../ui/components/Spinner.js";
import { Container, Line, ModalHeader } from "../../ui/components/basic.js";
import { Button } from "../../ui/components/buttons.js";
import { Text } from "../../ui/components/text.js";
import { useCustomTheme } from "../../ui/design-system/CustomThemeProvider.js";
import { StyledButton } from "../../ui/design-system/elements.js";
import { fontSize } from "../../ui/design-system/index.js";
import { setLastAuthProvider } from "./storage.js";
/**
 * @internal
 */
export function InAppWalletOTPLoginUI(props) {
    const { wallet, done, goBack, userInfo } = props;
    const { client, chain, connectModal } = useConnectUI();
    const isWideModal = connectModal.size === "wide";
    const locale = props.locale;
    const [otpInput, setOtpInput] = useState("");
    const [verifyStatus, setVerifyStatus] = useState("idle");
    const [accountStatus, setAccountStatus] = useState("sending");
    const [screen] = useState("base");
    const sendEmailOrSms = useCallback(async () => {
        setOtpInput("");
        setVerifyStatus("idle");
        setAccountStatus("sending");
        try {
            if ("email" in userInfo) {
                const status = await preAuthenticate({
                    email: userInfo.email,
                    strategy: "email",
                    client,
                });
                setAccountStatus(status);
            }
            else if ("phone" in userInfo) {
                const status = await preAuthenticate({
                    phoneNumber: userInfo.phone,
                    strategy: "phone",
                    client,
                });
                setAccountStatus(status);
            }
            else {
                throw new Error("Invalid userInfo");
            }
        }
        catch (e) {
            console.error(e);
            setVerifyStatus("idle");
            setAccountStatus("error");
        }
    }, [client, userInfo]);
    async function connect(otp) {
        if ("email" in userInfo) {
            await wallet.connect({
                chain,
                strategy: "email",
                email: userInfo.email,
                verificationCode: otp,
                client,
            });
            await setLastAuthProvider("email");
        }
        else if ("phone" in userInfo) {
            await wallet.connect({
                chain,
                strategy: "phone",
                phoneNumber: userInfo.phone,
                verificationCode: otp,
                client,
            });
            await setLastAuthProvider("phone");
        }
        else {
            throw new Error("Invalid userInfo");
        }
    }
    const verify = async (otp) => {
        if (typeof accountStatus !== "object" || otp.length !== 6) {
            return;
        }
        setVerifyStatus("idle");
        if (typeof accountStatus !== "object") {
            return;
        }
        if (!wallet) {
            return;
        }
        try {
            setVerifyStatus("verifying");
            const needsRecoveryCode = accountStatus.recoveryShareManagement === "USER_MANAGED" &&
                (accountStatus.isNewUser || accountStatus.isNewDevice);
            // USER_MANAGED
            if (needsRecoveryCode) {
                if (accountStatus.isNewUser) {
                    try {
                        await connect(otp);
                    }
                    catch (e) {
                        if (e instanceof Error && e.message.includes("encryption key")) {
                            // setScreen("create-password");
                        }
                        else {
                            throw e;
                        }
                    }
                }
                else {
                    try {
                        // verifies otp for UI feedback
                        await connect(otp);
                    }
                    catch (e) {
                        if (e instanceof Error && e.message.includes("encryption key")) {
                            // TODO: do we need this?
                            // setScreen("enter-password-or-recovery-code");
                        }
                        else {
                            throw e;
                        }
                    }
                }
            }
            // AWS_MANAGED
            else {
                // verifies otp for UI feedback
                await connect(otp);
                done();
            }
            setVerifyStatus("valid");
        }
        catch (e) {
            if (e instanceof Error &&
                e?.message?.includes("PAYMENT_METHOD_REQUIRED")) {
                setVerifyStatus("payment_required");
            }
            else {
                setVerifyStatus("invalid");
            }
            console.error("Authentication Error", e);
        }
    };
    // send email on mount
    const emailSentOnMount = useRef(false);
    useEffect(() => {
        if (!emailSentOnMount.current) {
            emailSentOnMount.current = true;
            sendEmailOrSms();
        }
    }, [sendEmailOrSms]);
    if (screen === "base") {
        return (_jsxs(Container, { fullHeight: true, flex: "column", animate: "fadein", children: [_jsx(Container, { p: "lg", children: _jsx(ModalHeader, { title: locale.signIn, onBack: goBack }) }), _jsx(Container, { expand: true, flex: "column", center: "y", children: _jsxs("form", { onSubmit: (e) => {
                            e.preventDefault();
                        }, children: [_jsxs(Container, { flex: "column", center: "x", px: "lg", children: [!isWideModal && _jsx(Spacer, { y: "xl" }), _jsx(Text, { children: locale.emailLoginScreen.enterCodeSendTo }), _jsx(Spacer, { y: "sm" }), _jsx(Text, { color: "primaryText", children: "email" in userInfo ? userInfo.email : userInfo.phone }), _jsx(Spacer, { y: "xl" })] }), _jsx(OTPInput, { isInvalid: verifyStatus === "invalid", digits: 6, value: otpInput, setValue: (value) => {
                                    setOtpInput(value);
                                    setVerifyStatus("idle"); // reset error
                                    verify(value);
                                }, onEnter: () => {
                                    verify(otpInput);
                                } }), verifyStatus === "invalid" && (_jsxs(FadeIn, { children: [_jsx(Spacer, { y: "md" }), _jsx(Text, { size: "sm", color: "danger", center: true, children: locale.emailLoginScreen.invalidCode })] })), verifyStatus === "payment_required" && (_jsxs(FadeIn, { children: [_jsx(Spacer, { y: "md" }), _jsx(Text, { size: "sm", color: "danger", center: true, children: locale.maxAccountsExceeded })] })), _jsx(Spacer, { y: "xl" }), _jsx(Container, { px: isWideModal ? "xxl" : "lg", children: verifyStatus === "verifying" ? (_jsx(_Fragment, { children: _jsx(Container, { flex: "row", center: "x", animate: "fadein", children: _jsx(Spinner, { size: "lg", color: "accentText" }) }) })) : (_jsx(Container, { animate: "fadein", children: _jsx(Button, { onClick: () => verify(otpInput), variant: "accent", type: "submit", style: {
                                            width: "100%",
                                        }, children: locale.emailLoginScreen.verify }) }, "btn-container")) }), _jsx(Spacer, { y: "xl" }), !isWideModal && _jsx(Line, {}), _jsxs(Container, { p: isWideModal ? undefined : "lg", children: [accountStatus === "error" && (_jsx(_Fragment, { children: _jsx(Text, { size: "sm", center: true, color: "danger", children: locale.emailLoginScreen.failedToSendCode }) })), accountStatus === "sending" && (_jsxs(Container, { flex: "row", center: "both", gap: "xs", style: {
                                            textAlign: "center",
                                        }, children: [_jsx(Text, { size: "sm", children: locale.emailLoginScreen.sendingCode }), _jsx(Spinner, { size: "xs", color: "secondaryText" })] })), typeof accountStatus === "object" && (_jsx(LinkButton, { onClick: sendEmailOrSms, type: "button", children: locale.emailLoginScreen.resendCode }))] })] }) })] }));
    }
    return null;
}
const LinkButton = /* @__PURE__ */ StyledButton(() => {
    const theme = useCustomTheme();
    return {
        all: "unset",
        color: theme.colors.accentText,
        fontSize: fontSize.sm,
        cursor: "pointer",
        textAlign: "center",
        fontWeight: 500,
        width: "100%",
        "&:hover": {
            color: theme.colors.primaryText,
        },
    };
});
//# sourceMappingURL=InAppWalletOTPLoginUI.js.map