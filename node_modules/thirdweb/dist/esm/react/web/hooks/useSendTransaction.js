import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { CheckCircledIcon } from "@radix-ui/react-icons";
import { useCallback, useContext, useEffect, useRef, useState } from "react";
import { useSendTransactionCore } from "../../core/hooks/contract/useSendTransaction.js";
import { useActiveWallet } from "../../core/hooks/wallets/wallet-hooks.js";
import { SetRootElementContext } from "../../core/providers/RootElementContext.js";
import { AccentFailIcon } from "../ui/ConnectWallet/icons/AccentFailIcon.js";
import { useConnectLocale } from "../ui/ConnectWallet/locale/getConnectLocale.js";
import { LazyBuyScreen } from "../ui/ConnectWallet/screens/Buy/LazyBuyScreen.js";
import { BuyTxHistory } from "../ui/ConnectWallet/screens/Buy/tx-history/BuyTxHistory.js";
import { Modal } from "../ui/components/Modal.js";
import { Spacer } from "../ui/components/Spacer.js";
import { Spinner } from "../ui/components/Spinner.js";
import { Container, ModalHeader } from "../ui/components/basic.js";
import { Button } from "../ui/components/buttons.js";
import { Text } from "../ui/components/text.js";
import { CustomThemeProvider } from "../ui/design-system/CustomThemeProvider.js";
import { iconSize } from "../ui/design-system/index.js";
import { LoadingScreen } from "../wallets/shared/LoadingScreen.js";
/**
 * A hook to send a transaction.
 * @returns A mutation object to send a transaction.
 * @param config Configuration for the `useSendTransaction` hook.
 * Refer to [`SendTransactionConfig`](https://portal.thirdweb.com/references/typescript/v5/SendTransactionConfig) for more details.
 * @example
 * ```tsx
 * import { useSendTransaction } from "thirdweb/react";
 * const { mutate: sendTx, data: transactionResult } = useSendTransaction();
 *
 * // later
 * sendTx(tx);
 * ```
 *
 * @transaction
 */
export function useSendTransaction(config = {}) {
    const activeWallet = useActiveWallet();
    const payModal = config.payModal;
    let payModalEnabled = true;
    if (payModal === false || config.gasless) {
        payModalEnabled = false;
    }
    // if active wallet is smart wallet with gasless enabled, don't show the pay modal
    if (activeWallet && activeWallet.id === "smart") {
        const options = activeWallet.getConfig();
        if ("sponsorGas" in options && options.sponsorGas === true) {
            payModalEnabled = false;
        }
        if ("gasless" in options && options.gasless === true) {
            payModalEnabled = false;
        }
    }
    const setRootEl = useContext(SetRootElementContext);
    return useSendTransactionCore(!payModalEnabled || payModal === false
        ? undefined
        : (data) => {
            setRootEl(_jsx(TxModal, { tx: data.tx, onComplete: data.sendTx, onClose: () => {
                    setRootEl(null);
                    data.rejectTx();
                }, client: data.tx.client, localeId: payModal?.locale || "en_US", supportedTokens: payModal?.supportedTokens, theme: payModal?.theme || "dark", txCostWei: data.totalCostWei, walletBalanceWei: data.walletBalance.value, nativeTokenSymbol: data.walletBalance.symbol, payOptions: {
                    buyWithCrypto: payModal?.buyWithCrypto,
                    buyWithFiat: payModal?.buyWithFiat,
                } }));
        }, config.gasless);
}
function TxModal(props) {
    return (_jsx(CustomThemeProvider, { theme: props.theme, children: _jsx(Modal, { open: true, size: "compact", setOpen: (_open) => {
                if (!_open) {
                    props.onClose();
                }
            }, children: _jsx(ModalContent, { ...props }) }) }));
}
function ModalContent(props) {
    const localeQuery = useConnectLocale(props.localeId);
    const [screen, setScreen] = useState("buy");
    if (!localeQuery.data) {
        return _jsx(LoadingScreen, {});
    }
    if (screen === "execute-tx") {
        return _jsx(ExecutingTxScreen, { tx: props.tx, closeModal: props.onClose });
    }
    if (screen === "tx-history") {
        return (_jsx(BuyTxHistory, { client: props.client, onBack: () => {
                setScreen("buy");
            }, onDone: () => {
                setScreen("execute-tx");
            }, isBuyForTx: true, isEmbed: false }));
    }
    return (_jsx(LazyBuyScreen, { isEmbed: false, client: props.client, onViewPendingTx: () => {
            setScreen("tx-history");
        }, supportedTokens: props.supportedTokens, connectLocale: localeQuery.data, buyForTx: {
            balance: props.walletBalanceWei,
            cost: props.txCostWei,
            tx: props.tx,
            tokenSymbol: props.nativeTokenSymbol,
        }, theme: typeof props.theme === "string" ? props.theme : props.theme.type, payOptions: props.payOptions, onDone: () => {
            setScreen("execute-tx");
        } }));
}
function ExecutingTxScreen(props) {
    const sendTxCore = useSendTransactionCore();
    const [status, setStatus] = useState("loading");
    const sendTx = useCallback(async () => {
        setStatus("loading");
        try {
            await sendTxCore.mutateAsync(props.tx);
            setStatus("sent");
        }
        catch (e) {
            console.error(e);
            setStatus("failed");
        }
    }, [sendTxCore, props.tx]);
    const done = useRef(false);
    useEffect(() => {
        if (done.current) {
            return;
        }
        done.current = true;
        sendTx();
    }, [sendTx]);
    return (_jsxs(Container, { p: "lg", children: [_jsx(ModalHeader, { title: "Transaction" }), _jsx(Spacer, { y: "xxl" }), _jsx(Spacer, { y: "xxl" }), _jsxs(Container, { flex: "row", center: "x", children: [status === "loading" && _jsx(Spinner, { size: "3xl", color: "accentText" }), status === "failed" && _jsx(AccentFailIcon, { size: iconSize["3xl"] }), status === "sent" && (_jsx(Container, { color: "success", flex: "row", center: "both", children: _jsx(CheckCircledIcon, { width: iconSize["3xl"], height: iconSize["3xl"] }) }))] }), _jsx(Spacer, { y: "lg" }), _jsxs(Text, { color: "primaryText", center: true, size: "lg", children: [status === "loading" && "Sending transaction", status === "failed" && "Transaction failed", status === "sent" && "Transaction sent"] }), _jsx(Spacer, { y: "xxl" }), _jsx(Spacer, { y: "xxl" }), status === "failed" && (_jsx(Button, { variant: "accent", fullWidth: true, onClick: sendTx, children: "Try Again" })), status === "sent" && (_jsx(Button, { variant: "accent", fullWidth: true, onClick: props.closeModal, children: "Done" }))] }));
}
//# sourceMappingURL=useSendTransaction.js.map