"use client";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { waitForReceipt as doWaitForReceipt, } from "../../../../transaction/actions/wait-for-tx-receipt.js";
import { stringify } from "../../../../utils/json.js";
import { useActiveAccount } from "../../../core/hooks/wallets/wallet-hooks.js";
import { useSendTransaction, } from "../../hooks/useSendTransaction.js";
import { Spinner } from "../components/Spinner.js";
import { Button } from "../components/buttons.js";
/**
 * TransactionButton component is used to render a button that triggers a transaction.
 * - It shows a "Switch Network" button if the connected wallet is on a different chain than the transaction.
 * @param props - The props for this component.
 * Refer to [TransactionButtonProps](https://portal.thirdweb.com/references/typescript/v5/TransactionButtonProps) for details.
 * @example
 * ```tsx
 * <TransactionButton
 *   transaction={() => {}}
 *   onSuccess={handleSuccess}
 *   onError={handleError}
 * >
 *   Confirm Transaction
 * </TransactionButton>
 * ```
 * @component
 */
export function TransactionButton(props) {
    const { children, transaction, onTransactionSent, onTransactionConfirmed, onError, onClick, gasless, payModal, disabled, ...buttonProps } = props;
    const account = useActiveAccount();
    const [isPending, setIsPending] = useState(false);
    const sendTransaction = useSendTransaction({
        gasless,
        payModal,
    });
    return (_jsxs(Button, { gap: "xs", disabled: !account || disabled || isPending, variant: "primary", "data-is-loading": isPending, onClick: async (e) => {
            if (onClick) {
                onClick(e);
            }
            try {
                setIsPending(true);
                const resolvedTx = await transaction();
                const result = await sendTransaction.mutateAsync(resolvedTx);
                if (onTransactionSent) {
                    onTransactionSent(result);
                }
                if (onTransactionConfirmed) {
                    const receipt = await doWaitForReceipt(result);
                    if (receipt.status === "reverted")
                        throw new Error(`Execution reverted: ${stringify(receipt, null, 2)}`);
                    onTransactionConfirmed(receipt);
                }
            }
            catch (error) {
                if (onError) {
                    onError(error);
                }
            }
            finally {
                setIsPending(false);
            }
        }, style: {
            opacity: !account || disabled ? 0.5 : 1,
            minWidth: "150px",
            position: "relative",
            ...buttonProps.style,
        }, ...buttonProps, children: [_jsx("span", { style: { visibility: isPending ? "hidden" : "visible" }, children: children }), isPending && (_jsx("div", { style: {
                    position: "absolute",
                    display: "flex",
                    alignItems: "center",
                    height: "100%",
                    top: 0,
                    bottom: 0,
                    margin: "auto",
                }, children: _jsx(Spinner, { size: "md", color: "primaryButtonText" }) }))] }));
}
//# sourceMappingURL=index.js.map