"use client";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { ChevronLeftIcon } from "@radix-ui/react-icons";
import { Suspense, lazy, useEffect, useRef, useState } from "react";
import { createWallet } from "../../../../wallets/create-wallet.js";
import { getInstalledWalletProviders } from "../../../../wallets/injected/mipdStore.js";
// import { localWalletMetadata } from "../../../../wallets/local/index._ts";
import { useConnectUI } from "../../../core/hooks/others/useWalletConnectionCtx.js";
import { sortWallets } from "../../utils/sortWallets.js";
import { LoadingScreen } from "../../wallets/shared/LoadingScreen.js";
import { Img } from "../components/Img.js";
import { Spacer } from "../components/Spacer.js";
import { TextDivider } from "../components/TextDivider.js";
import { Container, Line, ModalHeader, ScreenBottomContainer, noScrollBar, } from "../components/basic.js";
import { Button, IconButton } from "../components/buttons.js";
import { ModalTitle } from "../components/modalElements.js";
import { Link } from "../components/text.js";
import { Text } from "../components/text.js";
import { useCustomTheme } from "../design-system/CustomThemeProvider.js";
import { StyledDiv, StyledUl } from "../design-system/elements.js";
import { fontSize, iconSize, radius, spacing } from "../design-system/index.js";
import { SmartConnectUI } from "./Modal/SmartWalletConnectUI.js";
import { TOS } from "./Modal/TOS.js";
import { PoweredByThirdweb } from "./PoweredByTW.js";
import { WalletButton, WalletEntryButton } from "./WalletEntryButton.js";
import { WalletTypeRowButton } from "./WalletTypeRowButton.js";
import { compactModalMaxHeight } from "./constants.js";
import { genericWalletIcon } from "./icons/dataUris.js";
const InAppWalletSelectionUI = /* @__PURE__ */ lazy(() => import("../../wallets/in-app/InAppWalletSelectionUI.js"));
// const localWalletId = "local";
const inAppWalletId = "inApp";
/**
 * @internal
 */
export function WalletSelector(props) {
    const { accountAbstraction } = useConnectUI();
    const [personalWallet, setPersonalWallet] = useState(null);
    if (!accountAbstraction) {
        return _jsx(WalletSelectorInner, { ...props });
    }
    if (personalWallet) {
        return (_jsx(SmartConnectUI, { accountAbstraction: accountAbstraction, done: props.done, personalWallet: personalWallet, setModalVisibility: props.setModalVisibility, onBack: props.goBack }));
    }
    return (_jsx(WalletSelectorInner, { ...props, done: (w) => {
            setPersonalWallet(w);
        } }));
}
/**
 * @internal
 */
const WalletSelectorInner = (props) => {
    const { connectModal, isEmbed, client } = useConnectUI();
    const isCompact = connectModal.size === "compact";
    const [isWalletGroupExpanded, setIsWalletGroupExpanded] = useState(false);
    const installedWallets = getInstalledWallets();
    const propsWallets = props.wallets;
    const _wallets = [...propsWallets];
    for (const iW of installedWallets) {
        if (!propsWallets.find((w) => w.id === iW.id)) {
            _wallets.push(iW);
        }
    }
    const { connectLocale: locale, recommendedWallets } = useConnectUI();
    const localWalletConfig = false; // _wallets.find((w) => w.id === localWalletId);
    const nonLocalWalletConfigs = _wallets; // _wallets.filter((w) => w.id !== localWalletId);
    const socialWallets = nonLocalWalletConfigs.filter((w) => w.id === inAppWalletId);
    const eoaWallets = sortWallets(nonLocalWalletConfigs.filter((w) => w.id !== inAppWalletId), recommendedWallets);
    const continueAsGuest = localWalletConfig && (_jsx(Button, { fullWidth: true, variant: isCompact ? "outline" : "link", style: !isCompact
            ? {
                textAlign: "left",
                justifyContent: "flex-start",
            }
            : undefined, onClick: () => {
            props.selectWallet(localWalletConfig);
        }, "data-test": "continue-as-guest-button", children: locale.continueAsGuest }));
    // prevent accidental clicks on the TW icon when clicking on back icon from previous screen
    const enableTWIconLink = useRef(false);
    useEffect(() => {
        setTimeout(() => {
            enableTWIconLink.current = true;
        }, 1000);
    }, []);
    const twTitle = (_jsxs(Container, { gap: "xxs", center: "y", flex: "row", children: [!connectModal.titleIcon ? null : (_jsx(Img, { src: connectModal.titleIcon, width: iconSize.md, height: iconSize.md, client: client })), _jsxs(ModalTitle, { children: [" ", props.title, " "] })] }));
    const handleSelect = async (wallet) => {
        // if (connectionStatus !== "disconnected") {
        //   await disconnect();
        // }
        props.selectWallet(wallet);
    };
    const connectAWallet = (_jsx(WalletTypeRowButton, { client: client, icon: genericWalletIcon, onClick: () => {
            setIsWalletGroupExpanded(true);
        }, title: locale.connectAWallet }));
    const newToWallets = (_jsxs(Container, { flex: "row", style: {
            justifyContent: "space-between",
        }, children: [_jsx(Text, { color: "secondaryText", size: "sm", weight: 500, children: locale.newToWallets }), _jsx(Link, { weight: 500, size: "sm", target: "_blank", href: "https://blog.thirdweb.com/web3-wallet/", children: locale.getStarted })] }));
    const tos = connectModal.termsOfServiceUrl || connectModal.privacyPolicyUrl ? (_jsx(TOS, { termsOfServiceUrl: connectModal.termsOfServiceUrl, privacyPolicyUrl: connectModal.privacyPolicyUrl })) : undefined;
    let topSection;
    let bottomSection;
    // wide modal
    if (!isCompact) {
        topSection = (_jsx(WalletSelection, { wallets: nonLocalWalletConfigs, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll }));
        if (continueAsGuest) {
            bottomSection = (_jsx(ScreenBottomContainer, { children: continueAsGuest }));
        }
    }
    // compact
    else {
        // no social logins
        if (socialWallets.length === 0) {
            topSection = (_jsx(WalletSelection, { wallets: nonLocalWalletConfigs, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll }));
            bottomSection = (_jsxs(_Fragment, { children: [_jsx(Line, {}), _jsxs(Container, { flex: "column", p: "md", gap: "md", children: [newToWallets, continueAsGuest] }), !continueAsGuest && _jsx(Line, {}), tos && (_jsx(Container, { px: "md", style: {
                            paddingBottom: spacing.md,
                            paddingTop: continueAsGuest ? 0 : spacing.md,
                        }, children: tos }))] }));
        }
        // social logins
        else {
            // not expanded state
            if (!isWalletGroupExpanded) {
                topSection = (_jsxs(Container, { px: "xs", children: [_jsx(WalletSelection, { wallets: socialWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack }), eoaWallets.length > 0 && (_jsxs(_Fragment, { children: [_jsx(TextDivider, { text: locale.or }), _jsx(Spacer, { y: "lg" })] }))] }));
                // only social login - no eoa wallets
                if (eoaWallets.length === 0) {
                    bottomSection =
                        tos || continueAsGuest ? (_jsxs(_Fragment, { children: [_jsx(Spacer, { y: "md" }), _jsx(Line, {}), continueAsGuest && (_jsxs(Container, { p: "lg", children: [" ", continueAsGuest] })), tos && _jsxs(Container, { p: "md", children: [" ", tos, " "] })] })) : (_jsx(Spacer, { y: "sm" }));
                }
                // social login + eoa wallets
                else {
                    // social login + More than 1 eoa wallets
                    if (eoaWallets.length > 1) {
                        bottomSection = (_jsxs(Container, { flex: "column", style: { position: "relative" }, gap: "sm", children: [_jsx(GradientDiv, {}), _jsxs(Container, { px: "lg", flex: "column", gap: "md", children: [connectAWallet, continueAsGuest] }), tos ? (_jsxs(Container, { p: "md", children: [" ", tos, " "] })) : (_jsx(Spacer, { y: "md" }))] }));
                    }
                    // social login + single eoa wallet
                    else {
                        bottomSection = (_jsxs(_Fragment, { children: [_jsx(Container, { px: "lg", children: _jsx(WalletSelection, { wallets: eoaWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll }) }), continueAsGuest && (_jsx(Container, { flex: "column", px: "lg", gap: "lg", children: continueAsGuest })), tos ? (_jsxs(_Fragment, { children: [continueAsGuest ? _jsx(Spacer, { y: "md" }) : _jsx(Line, {}), _jsxs(Container, { p: "md", children: [" ", tos, " "] })] })) : (_jsx(_Fragment, { children: continueAsGuest && _jsx(Spacer, { y: "xl" }) }))] }));
                    }
                }
            }
            // expanded state
            else {
                topSection = (_jsx(WalletSelection, { wallets: eoaWallets, selectWallet: handleSelect, done: props.done, goBack: props.goBack, onShowAll: props.onShowAll }));
                bottomSection = (_jsx(ScreenBottomContainer, { children: newToWallets }));
            }
        }
    }
    return (_jsxs(Container, { scrollY: true, flex: "column", animate: "fadein", fullHeight: true, style: {
            maxHeight: connectModal.size === "compact" ? compactModalMaxHeight : undefined,
        }, children: [!isEmbed && (_jsx(Container, { p: "lg", children: isWalletGroupExpanded ? (_jsx(ModalHeader, { title: twTitle, onBack: () => {
                        setIsWalletGroupExpanded(false);
                    } })) : (twTitle) })), _jsxs(Container, { expand: true, scrollY: true, px: "md", style: isEmbed
                    ? {
                        paddingTop: spacing.lg,
                    }
                    : {
                        paddingTop: "2px",
                    }, children: [isEmbed && isWalletGroupExpanded && (_jsx(Container, { flex: "row", center: "y", style: {
                            padding: spacing.sm,
                            paddingTop: 0,
                        }, children: _jsxs(IconButton, { onClick: () => {
                                setIsWalletGroupExpanded(false);
                            }, style: {
                                gap: spacing.xxs,
                                transform: `translateX(-${spacing.xs})`,
                                paddingBlock: spacing.xxs,
                                paddingRight: spacing.xs,
                            }, children: [_jsx(ChevronLeftIcon, { width: iconSize.sm, height: iconSize.sm }), locale.goBackButton] }) })), topSection] }), bottomSection, isCompact && connectModal.showThirdwebBranding !== false && (_jsx(Container, { style: {
                    paddingBottom: spacing.md,
                }, children: _jsx(PoweredByThirdweb, {}) }))] }));
};
let _installedWallets = [];
function getInstalledWallets() {
    if (_installedWallets.length === 0) {
        const providers = getInstalledWalletProviders();
        const walletIds = providers.map((provider) => provider.info.rdns);
        _installedWallets = walletIds.map((w) => createWallet(w));
    }
    return _installedWallets;
}
/**
 * @internal
 */
const WalletSelection = (props) => {
    const { recommendedWallets, showAllWallets, connectModal } = useConnectUI();
    const wallets = sortWallets(props.wallets, recommendedWallets);
    return (_jsxs(WalletList, { style: {
            minHeight: "100%",
        }, children: [wallets.map((wallet) => {
                return (_jsx("li", { children: wallet.id === "inApp" && connectModal.size === "compact" ? (_jsx(Suspense, { fallback: _jsx(LoadingScreen, { height: "195px" }), children: _jsx(InAppWalletSelectionUI, { done: () => props.done(wallet), select: () => props.selectWallet(wallet), wallet: wallet, goBack: props.goBack }) })) : (_jsx(WalletEntryButton, { walletId: wallet.id, selectWallet: () => {
                            props.selectWallet(wallet);
                        } })) }, wallet.id));
            }), props.onShowAll && showAllWallets !== false && (_jsx(ButtonContainer, { children: _jsxs(WalletButton, { onClick: props.onShowAll, children: [_jsxs(ShowAllWalletsIcon, { children: [_jsx("div", { "data-dot": true }), _jsx("div", { "data-dot": true }), _jsx("div", { "data-dot": true }), _jsx("div", { "data-dot": true })] }), _jsxs(Container, { flex: "row", gap: "xs", children: [_jsx(Text, { color: "primaryText", children: "All Wallets" }), _jsx(BadgeText, { children: " 350+ " })] })] }) }))] }));
};
const BadgeText = /* @__PURE__ */ StyledDiv(() => {
    const theme = useCustomTheme();
    return {
        backgroundColor: theme.colors.secondaryButtonBg,
        paddingBlock: "3px",
        paddingInline: spacing.xxs,
        fontSize: fontSize.xs,
        borderRadius: radius.sm,
        color: theme.colors.secondaryText,
    };
});
const ButtonContainer = /* @__PURE__ */ StyledDiv(() => {
    const theme = useCustomTheme();
    return {
        "&:hover [data-dot]": {
            background: theme.colors.primaryText,
        },
    };
});
const ShowAllWalletsIcon = /* @__PURE__ */ StyledDiv(() => {
    const theme = useCustomTheme();
    return {
        width: `${iconSize.xl}px`,
        height: `${iconSize.xl}px`,
        backgroundColor: theme.colors.tertiaryBg,
        border: `2px solid ${theme.colors.borderColor}`,
        borderRadius: radius.md,
        display: "grid",
        gridTemplateColumns: "1fr 1fr",
        justifyItems: "center",
        alignItems: "center",
        padding: spacing.xs,
        "& div": {
            transition: "background 200ms ease",
            background: theme.colors.secondaryText,
            borderRadius: "50%",
            width: "10px",
            height: "10px",
        },
    };
});
const WalletList = /* @__PURE__ */ StyledUl({
    all: "unset",
    listStyleType: "none",
    display: "flex",
    flexDirection: "column",
    gap: "2px",
    boxSizing: "border-box",
    overflowY: "auto",
    flex: 1,
    ...noScrollBar,
    // to show the box-shadow of inputs that overflows
    padding: "2px",
    margin: "-2px",
    marginBottom: 0,
    paddingBottom: spacing.lg,
});
const GradientDiv = /* @__PURE__ */ StyledDiv(() => {
    const theme = useCustomTheme();
    theme.colors.modalBg;
    return {
        height: spacing.lg,
        position: "absolute",
        top: `-${spacing.lg}`,
        left: 0,
        width: "100%",
        background: `linear-gradient(to bottom, transparent 0%, ${theme.colors.modalBg} 80%)`,
        pointerEvents: "none",
    };
});
//# sourceMappingURL=WalletSelector.js.map