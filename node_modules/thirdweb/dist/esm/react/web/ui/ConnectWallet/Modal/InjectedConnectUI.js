"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { useCallback, useEffect, useRef, useState } from "react";
import { useConnectUI } from "../../../../core/hooks/others/useWalletConnectionCtx.js";
import { wait } from "../../../../core/utils/wait.js";
import { ConnectingScreen } from "../../../wallets/shared/ConnectingScreen.js";
/**
 * @internal
 */
export const InjectedConnectUI = (props) => {
    const { wallet, done } = props;
    const { client, chain } = useConnectUI();
    const [errorConnecting, setErrorConnecting] = useState(false);
    const locale = props.locale;
    const connectToExtension = useCallback(async () => {
        try {
            connectPrompted.current = true;
            setErrorConnecting(false);
            await wait(1000);
            await wallet.connect({
                client,
                chain: chain,
            });
            done();
        }
        catch (e) {
            setErrorConnecting(true);
            console.error(e);
        }
    }, [client, chain, done, wallet]);
    const connectPrompted = useRef(false);
    useEffect(() => {
        if (connectPrompted.current) {
            return;
        }
        connectToExtension();
    }, [connectToExtension]);
    return (_jsx(ConnectingScreen, { locale: {
            getStartedLink: locale.getStartedLink,
            instruction: locale.connectionScreen.instruction,
            tryAgain: locale.connectionScreen.retry,
            inProgress: locale.connectionScreen.inProgress,
            failed: locale.connectionScreen.failed,
        }, onBack: props.onBack, walletName: props.walletInfo.name, onGetStarted: props.onGetStarted, walletId: props.wallet.id, onRetry: () => {
            connectToExtension();
        }, errorConnecting: errorConnecting }));
};
//# sourceMappingURL=InjectedConnectUI.js.map