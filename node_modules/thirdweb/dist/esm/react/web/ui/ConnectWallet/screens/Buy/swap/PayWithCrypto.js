import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ChevronDownIcon } from "@radix-ui/react-icons";
import { formatNumber } from "../../../../../../../utils/formatNumber.js";
import { useChainQuery } from "../../../../../../core/hooks/others/useChainQuery.js";
import { useWalletBalance } from "../../../../../../core/hooks/others/useWalletBalance.js";
import { useActiveAccount } from "../../../../../../core/hooks/wallets/wallet-hooks.js";
import { Skeleton } from "../../../../components/Skeleton.js";
import { TokenIcon } from "../../../../components/TokenIcon.js";
import { Container } from "../../../../components/basic.js";
import { Button } from "../../../../components/buttons.js";
import { Text } from "../../../../components/text.js";
import { TokenSymbol } from "../../../../components/token/TokenSymbol.js";
import { fontSize, iconSize, radius, spacing, } from "../../../../design-system/index.js";
import { WalletIcon } from "../../../icons/WalletIcon.js";
import { formatTokenBalance } from "../../formatTokenBalance.js";
import { isNativeToken } from "../../nativeToken.js";
/**
 * Shows an amount "value" and renders the selected token and chain
 * It also renders the buttons to select the token and chain
 * It also renders the balance of active wallet for the selected token in selected chain
 * @internal
 */
export function PayWithCrypto(props) {
    const chainQuery = useChainQuery(props.chain);
    const activeAccount = useActiveAccount();
    const balanceQuery = useWalletBalance({
        address: activeAccount?.address,
        chain: props.chain,
        tokenAddress: isNativeToken(props.token) ? undefined : props.token.address,
        client: props.client,
    });
    return (_jsxs(Container, { bg: "tertiaryBg", borderColor: "borderColor", flex: "row", style: {
            borderRadius: radius.md,
            borderBottomRightRadius: 0,
            borderBottomLeftRadius: 0,
            borderWidth: "1px",
            borderStyle: "solid",
            borderBottom: "none",
            flexWrap: "nowrap",
            justifyContent: "space-between",
            minHeight: "64px",
            alignItems: "center",
        }, children: [_jsxs(Button, { variant: "ghost", onClick: props.onSelectToken, gap: "sm", style: {
                    paddingInline: spacing.sm,
                    paddingBlock: spacing.sm,
                    minWidth: "50%",
                    justifyContent: "flex-start",
                }, disabled: props.freezeChainAndTokenSelection, children: [_jsx(TokenIcon, { token: props.token, chain: props.chain, size: "md", client: props.client }), _jsxs(Container, { flex: "column", gap: "xxs", children: [_jsxs(Container, { flex: "row", gap: "xs", center: "y", color: "primaryText", children: [_jsx(TokenSymbol, { token: props.token, chain: props.chain, size: "sm" }), _jsx(ChevronDownIcon, { width: iconSize.sm, height: iconSize.sm })] }), chainQuery.data?.name ? (_jsxs(Text, { size: "xs", children: [" ", chainQuery.data.name] })) : (_jsx(Skeleton, { width: "90px", height: fontSize.xs }))] })] }), _jsxs("div", { style: {
                    flexGrow: 1,
                    flexShrink: 1,
                    display: "flex",
                    flexDirection: "column",
                    alignItems: "flex-end",
                    gap: spacing.xxs,
                    overflow: "hidden",
                    textOverflow: "ellipsis",
                    whiteSpace: "nowrap",
                    justifyContent: "center",
                    paddingRight: spacing.sm,
                }, children: [props.isLoading ? (_jsx(Skeleton, { width: "120px", height: fontSize.md, color: "borderColor" })) : (_jsx(Text, { size: "md", color: props.value ? "primaryText" : "secondaryText", style: {}, children: formatNumber(Number(props.value), 4) || "--" })), _jsxs(Container, { flex: "row", gap: "xxs", center: "y", color: "secondaryText", children: [_jsx(WalletIcon, { size: fontSize.xs }), balanceQuery.data ? (_jsx(Text, { size: "xs", color: "secondaryText", weight: 500, children: formatTokenBalance(balanceQuery.data, true) })) : (_jsx(Skeleton, { width: "70px", height: fontSize.xs }))] })] })] }));
}
//# sourceMappingURL=PayWithCrypto.js.map