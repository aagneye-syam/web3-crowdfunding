import { jsx as _jsx } from "react/jsx-runtime";
import { useState } from "react";
import { isSwapRequiredPostOnramp } from "../../../../../../../pay/buyWithFiat/isSwapRequiredPostOnramp.js";
import { openOnrampPopup } from "../openOnRamppopup.js";
import { addPendingTx } from "../swap/pendingSwapTx.js";
import { OnrampStatusScreen } from "./FiatStatusScreen.js";
import { FiatSteps, fiatQuoteToPartialQuote } from "./FiatSteps.js";
import { PostOnRampSwapFlow } from "./PostOnRampSwapFlow.js";
export function FiatFlow(props) {
    const hasTwoSteps = isSwapRequiredPostOnramp(props.quote);
    const [screen, setScreen] = useState(hasTwoSteps
        ? {
            id: "step-1",
        }
        : {
            id: "onramp-status",
        });
    const [popupWindow, setPopupWindow] = useState(props.openedWindow);
    if (screen.id === "step-1") {
        return (_jsx(FiatSteps, { client: props.client, onBack: props.onBack, partialQuote: fiatQuoteToPartialQuote(props.quote), step: 1, onContinue: () => {
                const popup = openOnrampPopup(props.quote.onRampLink, props.theme);
                addPendingTx({
                    type: "fiat",
                    intentId: props.quote.intentId,
                });
                setPopupWindow(popup);
                setScreen({ id: "onramp-status" });
            } }));
    }
    if (screen.id === "onramp-status") {
        return (_jsx(OnrampStatusScreen, { client: props.client, intentId: props.quote.intentId, onBack: props.onBack, onViewPendingTx: props.onViewPendingTx, hasTwoSteps: hasTwoSteps, openedWindow: popupWindow, quote: props.quote, onDone: props.onDone, onShowSwapFlow: (_status) => {
                setScreen({ id: "postonramp-swap", data: _status });
            }, isBuyForTx: props.isBuyForTx, isEmbed: props.isEmbed }));
    }
    if (screen.id === "postonramp-swap") {
        return (_jsx(PostOnRampSwapFlow, { status: screen.data, quote: fiatQuoteToPartialQuote(props.quote), client: props.client, onBack: props.onBack, onViewPendingTx: props.onViewPendingTx, onDone: props.onDone, onSwapFlowStarted: () => {
                // no op
            }, isBuyForTx: props.isBuyForTx, isEmbed: props.isEmbed }));
    }
    // never
    return null;
}
//# sourceMappingURL=FiatFlow.js.map