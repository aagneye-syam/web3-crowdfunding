"use client";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from "react";
import { ConnectButton } from "./ConnectWallet/ConnectButton.js";
import { useConnectLocale } from "./ConnectWallet/locale/getConnectLocale.js";
import BuyScreen from "./ConnectWallet/screens/Buy/BuyScreen.js";
import { BuyTxHistory } from "./ConnectWallet/screens/Buy/tx-history/BuyTxHistory.js";
import { DynamicHeight } from "./components/DynamicHeight.js";
import { Spinner } from "./components/Spinner.js";
import { Container } from "./components/basic.js";
import { CustomThemeProvider } from "./design-system/CustomThemeProvider.js";
import { radius } from "./design-system/index.js";
/**
 * Embed thirdweb Pay UI for Buy tokens using Crypto or Credit Card.
 *
 * PayEmbed also renders a "Connect" button if the user is not connected to a wallet. You can customize the options for "Connect" button using the `connectOptions` prop.
 *
 * @param props - Props of type [`PayEmbedProps`](https://portal.thirdweb.com/references/typescript/v5/PayEmbedProps) to configure the PayEmbed component.
 *
 * @example
 * ```tsx
 * <PayEmbed
 *   client={client}
 *   connectOptions={{
 *     connectModal: {
 *       size: 'compact',
 *     }
 *   }}
 *   payOptions={{
 *     buyWithCrypto: false,
 *   }}
 *  />
 * ```
 */
export function PayEmbed(props) {
    const localeQuery = useConnectLocale(props.locale || "en_US");
    const [screen, setScreen] = useState("buy");
    let content = null;
    if (!localeQuery.data) {
        content = (_jsx("div", { style: {
                minHeight: "350px",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
            }, children: _jsx(Spinner, { size: "xl", color: "secondaryText" }) }));
    }
    else {
        // show and hide screens with CSS to not lose state when switching between them
        content = (_jsxs(_Fragment, { children: [_jsx("div", { style: { display: screen === "tx-history" ? "none" : "inherit" }, children: _jsx(BuyScreen, { isEmbed: true, supportedTokens: props.supportedTokens, theme: props.theme || "dark", client: props.client, connectLocale: localeQuery.data, onViewPendingTx: () => {
                            setScreen("tx-history");
                        }, payOptions: props.payOptions || {}, onDone: () => {
                            // noop
                        }, connectButton: _jsx(ConnectButton, { ...props.connectOptions, client: props.client, connectButton: {
                                style: {
                                    width: "100%",
                                },
                            } }) }) }), screen === "tx-history" && (_jsx(BuyTxHistory, { client: props.client, onBack: () => {
                        setScreen("buy");
                    }, onDone: () => {
                        // noop
                    }, isBuyForTx: false, isEmbed: true }))] }));
    }
    return (_jsx(CustomThemeProvider, { theme: props.theme || "dark", children: _jsx(Container, { bg: "modalBg", style: {
                borderRadius: radius.lg,
                minWidth: "360px",
                borderWidth: "1px",
                borderStyle: "solid",
                position: "relative",
                overflow: "hidden",
            }, borderColor: "borderColor", children: _jsx(DynamicHeight, { children: content }) }) }));
}
//# sourceMappingURL=PayEmbed.js.map