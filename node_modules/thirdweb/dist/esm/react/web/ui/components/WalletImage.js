"use client";
import { jsx as _jsx } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import { getInstalledWalletProviders } from "../../../../wallets/injected/mipdStore.js";
import { getStoredActiveWalletId } from "../../../../wallets/manager/index.js";
import { useActiveWallet } from "../../../core/hooks/wallets/wallet-hooks.js";
import { getStorage } from "../../../core/storage.js";
import { getLastAuthProvider } from "../../wallets/in-app/storage.js";
import { emailIcon, genericWalletIcon, passkeyIcon, phoneIcon, } from "../ConnectWallet/icons/dataUris.js";
import { appleIconUri, facebookIconUri, googleIconUri, } from "../ConnectWallet/icons/socialLogins.js";
import { radius } from "../design-system/index.js";
import { useWalletImage } from "../hooks/useWalletInfo.js";
import { Img } from "./Img.js";
// Note: Must not use useConnectUI here
/**
 * @internal
 */
export function WalletImage(props) {
    const [image, setImage] = useState(undefined);
    const activeWallet = useActiveWallet();
    useEffect(() => {
        async function fetchImage() {
            // show EOA icon for external wallets
            // show auth provider icon for in-app wallets
            // show the admin EOA icon for smart
            const storage = getStorage();
            let activeEOAId = props.id;
            if (props.id === "smart") {
                const storedId = await getStoredActiveWalletId(storage);
                if (storedId) {
                    activeEOAId = storedId;
                }
            }
            let mipdImage = getInstalledWalletProviders().find((provider) => provider.info.rdns === activeEOAId)?.info.icon;
            if (activeEOAId === "inApp" &&
                activeWallet &&
                (activeWallet.id === "inApp" || activeWallet.id === "smart")) {
                // when showing an active wallet icon - check last auth provider and override the IAW icon
                const lastAuthProvider = await getLastAuthProvider(storage);
                switch (lastAuthProvider) {
                    case "google":
                        mipdImage = googleIconUri;
                        break;
                    case "apple":
                        mipdImage = appleIconUri;
                        break;
                    case "facebook":
                        mipdImage = facebookIconUri;
                        break;
                    case "phone":
                        mipdImage = phoneIcon;
                        break;
                    case "email":
                        mipdImage = emailIcon;
                        break;
                    case "passkey":
                        mipdImage = passkeyIcon;
                        break;
                }
            }
            setImage(mipdImage);
        }
        fetchImage();
    }, [props.id, activeWallet]);
    if (image) {
        return (_jsx(Img, { src: image, width: props.size, height: props.size, loading: "eager", client: props.client, style: {
                borderRadius: radius.md,
            } }));
    }
    return (_jsx(WalletImageQuery, { id: props.id, size: props.size, client: props.client }));
}
function WalletImageQuery(props) {
    const walletImage = useWalletImage(props.id);
    return (_jsx(Img, { client: props.client, src: walletImage.isLoading ? undefined : walletImage.data || "", fallbackImage: genericWalletIcon, width: props.size, height: props.size, loading: "eager", style: {
            borderRadius: radius.md,
        } }));
}
//# sourceMappingURL=WalletImage.js.map