import { getClaimParams } from "../../../../utils/extensions/drops/get-claim-params.js";
import { claim } from "../../__generated__/IDropERC20/write/claim.js";
import { decimals } from "../../read/decimals.js";
/**
 * Claim ERC20 NFTs to a specified address
 * @param options - The options for the transaction
 * @extension ERC20
 * @example
 * ```ts
 * import { claimTo } from "thirdweb/extensions/erc20";
 * const tx = await claimTo({
 *   contract,
 *   to: "0x...",
 *   quantity: 100n,
 * });
 * ```
 * @throws If no claim condition is set
 * @returns A promise that resolves with the submitted transaction hash.
 */
export function claimTo(options) {
    return claim({
        contract: options.contract,
        asyncParams: async () => {
            const quantity = await (async () => {
                if ("quantityInWei" in options) {
                    return options.quantityInWei;
                }
                const { toUnits } = await import("../../../../utils/units.js");
                return toUnits(options.quantity, await decimals({ contract: options.contract }));
            })();
            return getClaimParams({
                type: "erc20",
                contract: options.contract,
                to: options.to,
                quantity,
                from: options.from,
                tokenDecimals: await decimals({ contract: options.contract }),
            });
        },
    });
}
//# sourceMappingURL=claimTo.js.map