import { readContract } from "../../../../../transaction/read-contract.js";
import { decodeAbiParameters } from "viem";
import { detectMethod } from "../../../../../utils/bytecode/detectExtension.js";
export const FN_SELECTOR = "0xb280f703";
const FN_INPUTS = [];
const FN_OUTPUTS = [
    {
        type: "string",
        name: "name",
    },
    {
        type: "string",
        name: "description",
    },
    {
        type: "string",
        name: "imageURI",
    },
    {
        type: "string",
        name: "animationURI",
    },
];
/**
 * Checks if the `sharedMetadata` method is supported by the given contract.
 * @param contract The ThirdwebContract.
 * @returns A promise that resolves to a boolean indicating if the `sharedMetadata` method is supported.
 * @extension ERC721
 * @example
 * ```ts
 * import { isSharedMetadataSupported } from "thirdweb/extensions/erc721";
 *
 * const supported = await isSharedMetadataSupported(contract);
 * ```
 */
export async function isSharedMetadataSupported(contract) {
    return detectMethod({
        contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
    });
}
/**
 * Decodes the result of the sharedMetadata function call.
 * @param result - The hexadecimal result to decode.
 * @returns The decoded result as per the FN_OUTPUTS definition.
 * @extension ERC721
 * @example
 * ```ts
 * import { decodeSharedMetadataResult } from "thirdweb/extensions/erc721";
 * const result = decodeSharedMetadataResult("...");
 * ```
 */
export function decodeSharedMetadataResult(result) {
    return decodeAbiParameters(FN_OUTPUTS, result);
}
/**
 * Calls the "sharedMetadata" function on the contract.
 * @param options - The options for the sharedMetadata function.
 * @returns The parsed result of the function call.
 * @extension ERC721
 * @example
 * ```ts
 * import { sharedMetadata } from "thirdweb/extensions/erc721";
 *
 * const result = await sharedMetadata({
 *  contract,
 * });
 *
 * ```
 */
export async function sharedMetadata(options) {
    return readContract({
        contract: options.contract,
        method: [FN_SELECTOR, FN_INPUTS, FN_OUTPUTS],
        params: [],
    });
}
//# sourceMappingURL=sharedMetadata.js.map