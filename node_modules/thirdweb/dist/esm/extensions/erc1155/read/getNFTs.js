import { min } from "../../../utils/bigint.js";
import { nextTokenIdToMint } from "../__generated__/IERC1155Enumerable/read/nextTokenIdToMint.js";
import { getNFT } from "./getNFT.js";
const DEFAULT_QUERY_ALL_COUNT = 100n;
/**
 * Retrieves an array of NFTs ("ERC1155") based on the provided options.
 * @param options - The options for retrieving the NFTs.
 * @returns A promise that resolves to an array of NFTs.
 * @extension ERC1155
 * @example
 * ```ts
 * import { getNFTs } from "thirdweb/extensions/erc1155";
 * const nfts = await getNFTs({
 *  contract,
 *  start: 0,
 *  count: 10,
 * });
 * ```
 */
export async function getNFTs(options) {
    const start = BigInt(options.start || 0);
    const count = BigInt(options.count || DEFAULT_QUERY_ALL_COUNT);
    const totalCount = await nextTokenIdToMint(options);
    const maxId = min(totalCount, start + count);
    const promises = [];
    for (let i = start; i < maxId; i++) {
        promises.push(getNFT({
            ...options,
            tokenId: i,
        }));
    }
    return await Promise.all(promises);
}
//# sourceMappingURL=getNFTs.js.map