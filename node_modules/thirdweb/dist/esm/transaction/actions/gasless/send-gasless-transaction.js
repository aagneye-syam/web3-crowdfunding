export async function sendGaslessTransaction({ account, transaction, serializableTransaction, gasless, }) {
    // TODO: handle special case for mutlicall transactions!
    // Steps:
    // 1. check if the method is `multicall` by comparing the 4bytes data with the `multicall` selector
    // 2. split the rest of the data into its "parts"
    // 3. solidityPack the parts with the part data + the `account.address`
    // see v4: `core/classes/transactions.ts>Transaction>prepareGasless:L551`
    if (serializableTransaction.value && serializableTransaction.value > 0n) {
        throw new Error("Gasless transactions cannot have a value");
    }
    // TODO: multiply gas by 2 for some reason(?) - we do in v4, *should* we?
    // biconomy
    if (gasless.provider === "biconomy") {
        const { relayBiconomyTransaction } = await import("./providers/biconomy.js");
        return relayBiconomyTransaction({
            account,
            transaction,
            serializableTransaction,
            gasless,
        });
    }
    // openzeppelin
    if (gasless.provider === "openzeppelin") {
        const { relayOpenZeppelinTransaction } = await import("./providers/openzeppelin.js");
        return relayOpenZeppelinTransaction({
            account,
            transaction,
            serializableTransaction,
            gasless,
        });
    }
    if (gasless.provider === "engine") {
        const { relayEngineTransaction } = await import("./providers/engine.js");
        return relayEngineTransaction({
            account,
            transaction,
            serializableTransaction,
            gasless,
        });
    }
    throw new Error("Unsupported gasless provider");
}
//# sourceMappingURL=send-gasless-transaction.js.map