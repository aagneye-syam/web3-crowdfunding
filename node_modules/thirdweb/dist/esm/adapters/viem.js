import { http, createPublicClient, createWalletClient, custom, } from "viem";
import { getRpcUrlForChain } from "../chains/utils.js";
import { resolveContractAbi } from "../contract/actions/resolve-abi.js";
import { getContract } from "../contract/contract.js";
import { getRpcClient } from "../rpc/rpc.js";
import { estimateGas } from "../transaction/actions/estimate-gas.js";
import { sendTransaction } from "../transaction/actions/send-transaction.js";
import { prepareTransaction } from "../transaction/prepare-transaction.js";
export const viemAdapter = {
    contract: {
        /**
         * Creates a ThirdwebContract from a Viem contract.
         * @param options - The options for creating the contract.
         * @returns The ThirdwebContract.
         * @example
         * ```ts
         * import { viemAdapter } from "thirdweb/adapters/viem";
         *
         * const contract = viemAdapter.contract.fromViem({
         *  viemContract: viemContract,
         *  chain: ethereum,
         *  client,
         * });
         * ```
         */
        fromViem: fromViemContract,
        /**
         * Converts a ThirdwebContract instance to a Viem contract representation.
         * @param contract The ThirdwebContract instance to convert.
         * @returns A promise that resolves to the Viem contract representation.
         * @example
         * ```ts
         * import { viemAdapter } from "thirdweb/adapters";
         *  const viemContract = await viemAdapter.contract.toViem({ thirdwebContract });
         * ```
         */
        toViem: toViemContract,
    },
    /**
     * Converts options to a Viem public client.
     * @param options - The options for creating the Viem public client.
     * @returns The Viem public client.
     * @example
     * ```ts
     * import { viemAdapter } from "thirdweb/adapters/viem";
     *
     *  const publicClient = viemAdapter.publicClient.toViem({
     *  chain: ethereum,
     *  client,
     * });
     * ```
     */
    publicClient: {
        toViem: toViemPublicClient,
    },
    walletClient: {
        /**
         * Converts options to a Viem Wallet client.
         * @param options - The options for creating the Viem Wallet client.
         * @returns The Viem Wallet client.
         * @example
         * ```ts
         * import { viemAdapter } from "thirdweb/adapters/viem";
         *
         * const walletClient = viemAdapter.walletClient.toViem({
         *  account,
         *  client,
         *  chain: ethereum,
         * });
         * ```
         */
        toViem: toViemWalletClient,
        /**
         * Converts a Viem Wallet client to an Account.
         * @param options - The options for creating the Account.
         * @returns The Account.
         * @example
         * ```ts
         * import { viemAdapter } from "thirdweb/adapters/viem";
         *
         * const account = viemAdapter.walletClient.fromViem({
         *   walletClient,
         * });
         */
        fromViem: fromViemWalletClient,
    },
};
function fromViemContract(options) {
    return getContract({
        address: options.viemContract.address,
        abi: options.viemContract.abi,
        chain: options.chain,
        client: options.client,
    });
}
async function toViemContract(options) {
    return {
        address: options.thirdwebContract.address,
        abi: await resolveContractAbi(options.thirdwebContract),
    };
}
function toViemPublicClient(options) {
    const { chain, client } = options;
    const rpcUrl = getRpcUrlForChain({ chain, client });
    const viemChain = {
        id: chain.id,
        name: chain.name || "",
        rpcUrls: {
            default: { http: [rpcUrl] },
        },
        nativeCurrency: {
            name: chain.nativeCurrency?.name || "Ether",
            symbol: chain.nativeCurrency?.symbol || "ETH",
            decimals: chain.nativeCurrency?.decimals || 18,
        },
    };
    return createPublicClient({
        transport: http(rpcUrl, {
            fetchOptions: client.secretKey
                ? {
                    headers: {
                        "x-secret-key": client.secretKey,
                    },
                }
                : undefined,
        }),
        chain: viemChain,
    });
}
function toViemWalletClient(options) {
    const { account, chain, client } = options;
    if (!account) {
        throw new Error("Wallet not connected.");
    }
    const rpcUrl = getRpcUrlForChain({ chain, client });
    const viemChain = {
        id: chain.id,
        name: chain.name || "",
        rpcUrls: {
            default: { http: [rpcUrl] },
        },
        nativeCurrency: {
            name: chain.nativeCurrency?.name || "Ether",
            symbol: chain.nativeCurrency?.symbol || "ETH",
            decimals: chain.nativeCurrency?.decimals || 18,
        },
    };
    const rpcClient = getRpcClient({ client, chain });
    const transport = custom({
        request: async (request) => {
            if (request.method === "eth_sendTransaction") {
                const result = await sendTransaction({
                    transaction: prepareTransaction({
                        ...request.params[0],
                        chain,
                        client,
                    }),
                    account: account,
                });
                return result.transactionHash;
            }
            if (request.method === "eth_estimateGas") {
                return estimateGas({
                    transaction: prepareTransaction({
                        ...request.params[0],
                        chain,
                        client,
                    }),
                    account: account,
                });
            }
            if (request.method === "personal_sign") {
                return account.signMessage({
                    message: {
                        raw: request.params[0],
                    },
                });
            }
            if (request.method === "eth_signTypedData_v4") {
                const data = JSON.parse(request.params[1]);
                return account.signTypedData(data);
            }
            if (request.method === "eth_accounts") {
                return [account.address];
            }
            return rpcClient(request);
        },
    });
    return createWalletClient({
        transport,
        account: account.address,
        chain: viemChain,
        key: "thirdweb-wallet",
    });
}
function fromViemWalletClient(options) {
    const viemAccount = options.walletClient.account;
    if (!viemAccount) {
        throw new Error("Account not found in walletClient, please pass it explicitly.");
    }
    return {
        address: viemAccount.address,
        signMessage: async (msg) => {
            return options.walletClient.signMessage({
                account: viemAccount,
                ...msg,
            });
        },
        sendTransaction: async (tx) => {
            const tx1559 = tx; // TODO check other txTypes
            const txHash = await options.walletClient.sendTransaction({
                account: viemAccount,
                chain: options.walletClient.chain,
                ...tx1559,
            });
            return {
                transaction: tx,
                transactionHash: txHash,
            };
        },
        signTypedData(_typedData) {
            if (!_typedData) {
                throw new Error("Typed data is required to signTypedData");
            }
            // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later
            return options.walletClient.signTypedData(_typedData);
        },
    };
}
//# sourceMappingURL=viem.js.map