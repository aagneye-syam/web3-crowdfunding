import { getCachedChain } from "../../../../../chains/utils.js";
import { eth_sendRawTransaction } from "../../../../../rpc/actions/eth_sendRawTransaction.js";
import { getRpcClient } from "../../../../../rpc/rpc.js";
import { UserWalletStatus } from "../../interfaces/in-app-wallets/in-app-wallets.js";
import { LocalStorage } from "../../utils/Storage/LocalStorage.js";
/**
 *
 */
export class InAppWallet {
    /**
     * Not meant to be initialized directly. Call {@link initializeUser} to get an instance
     * @internal
     */
    constructor({ client, querier }) {
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "walletManagerQuerier", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "localStorage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.client = client;
        this.walletManagerQuerier = querier;
        this.localStorage = new LocalStorage({ clientId: client.clientId });
    }
    /**
     * Used to set-up the user device in the case that they are using incognito
     * @returns `{walletAddress : string }` The user's wallet details
     * @internal
     */
    async postWalletSetUp({ deviceShareStored, walletAddress, isIframeStorageEnabled, walletUserId, }) {
        if (!isIframeStorageEnabled) {
            await this.localStorage.saveDeviceShare(deviceShareStored, walletUserId);
        }
        return { walletAddress };
    }
    /**
     * Gets the various status states of the user
     * @example
     * ```typescript
     *  const userStatus = await Paper.getUserWalletStatus();
     *  switch (userStatus.status) {
     *  case UserWalletStatus.LOGGED_OUT: {
     *    // User is logged out, call one of the auth methods on Paper.auth to authenticate the user
     *    break;
     *  }
     *  case UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED: {
     *    // User is logged in, but does not have a wallet associated with it
     *    // you also have access to the user's details
     *    userStatus.user.authDetails;
     *    break;
     *  }
     *  case UserWalletStatus.LOGGED_IN_NEW_DEVICE: {
     *    // User is logged in and created a wallet already, but is missing the device shard
     *    // You have access to:
     *    userStatus.user.authDetails;
     *    userStatus.user.walletAddress;
     *    break;
     *  }
     *  case UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED: {
     *    // user is logged in and wallet is all set up.
     *    // You have access to:
     *    userStatus.user.authDetails;
     *    userStatus.user.walletAddress;
     *    userStatus.user.wallet;
     *    break;
     *  }
     *}
     *```
     * @returns `{GetUserWalletStatusFnReturnType}` an object to containing various information on the user statuses
     * @internal
     */
    async getUserWalletStatus() {
        const userStatus = await this.walletManagerQuerier.call({
            procedureName: "getUserStatus",
            params: undefined,
        });
        if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED) {
            return {
                status: UserWalletStatus.LOGGED_IN_WALLET_INITIALIZED,
                ...userStatus.user,
                wallet: this,
            };
        }
        if (userStatus.status === UserWalletStatus.LOGGED_IN_NEW_DEVICE) {
            return {
                status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,
                ...userStatus.user,
            };
        }
        if (userStatus.status === UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED) {
            return {
                status: UserWalletStatus.LOGGED_IN_WALLET_UNINITIALIZED,
                ...userStatus.user,
            };
        }
        // Logged out
        return { status: userStatus.status };
    }
    /**
     * Returns an account that communicates with the iFrame for signing operations
     * @internal
     */
    async getAccount() {
        const querier = this
            .walletManagerQuerier;
        const { address } = await querier.call({
            procedureName: "getAddress",
            params: undefined,
        });
        const _signTransaction = async (tx) => {
            // biome-ignore lint/suspicious/noExplicitAny: ethers tx transformation
            const transaction = {
                to: tx.to ?? undefined,
                data: tx.data,
                value: tx.value,
                gasLimit: tx.gas,
                nonce: tx.nonce,
                chainId: tx.chainId,
            };
            if (tx.maxFeePerGas) {
                // ethers (in the iframe) rejects any type 0 trasaction with unknown keys
                // TODO remove this once iframe is upgraded to v5
                transaction.accessList = tx.accessList;
                transaction.maxFeePerGas = tx.maxFeePerGas;
                transaction.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
                transaction.type = 2;
            }
            else {
                transaction.gasPrice = tx.gasPrice;
                transaction.type = 0;
            }
            const { signedTransaction } = await querier.call({
                procedureName: "signTransaction",
                params: {
                    transaction,
                    chainId: tx.chainId,
                    rpcEndpoint: `https://${tx.chainId}.rpc.thirdweb.com`, // TODO (ew) shouldnt be needed
                },
            });
            return signedTransaction;
        };
        const client = this.client;
        return {
            address,
            async signTransaction(tx) {
                if (!tx.chainId) {
                    throw new Error("chainId required in tx to sign");
                }
                return _signTransaction({
                    ...tx,
                    chainId: tx.chainId,
                });
            },
            async sendTransaction(tx) {
                const rpcRequest = getRpcClient({
                    client,
                    chain: getCachedChain(tx.chainId),
                });
                const signedTx = await _signTransaction(tx);
                const transactionHash = await eth_sendRawTransaction(rpcRequest, signedTx);
                return {
                    transactionHash,
                };
            },
            async signMessage({ message }) {
                const messageDecoded = typeof message === "string" ? message : message.raw;
                const { signedMessage } = await querier.call({
                    procedureName: "signMessage",
                    params: {
                        // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later
                        message: messageDecoded, // wants Bytes or string
                        chainId: 1, // TODO check if we need this
                    },
                });
                return signedMessage;
            },
            async signTypedData(_typedData) {
                // deleting EIP712 Domain as it results in ambiguous primary type on some cases
                // this happens when going from viem to ethers via the iframe
                if (_typedData.types?.EIP712Domain) {
                    _typedData.types.EIP712Domain = undefined;
                }
                // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later
                const chainId = Number(_typedData.domain?.chainId || 1);
                const { signedTypedData } = await querier.call({
                    procedureName: "signTypedDataV4",
                    params: {
                        // biome-ignore lint/suspicious/noExplicitAny: TODO: fix later
                        domain: _typedData.domain,
                        types: _typedData.types,
                        message: _typedData.message,
                        chainId,
                        rpcEndpoint: `https://${chainId}.rpc.thirdweb.com`, // TODO (ew) shouldnt be needed
                    },
                });
                return signedTypedData;
            },
        };
    }
}
//# sourceMappingURL=in-app-wallet.js.map