import { AUTH_TOKEN_LOCAL_STORAGE_NAME, DEVICE_SHARE_LOCAL_STORAGE_NAME, PASSKEY_CREDENTIAL_ID_LOCAL_STORAGE_NAME, WALLET_USER_ID_LOCAL_STORAGE_NAME, } from "../../constants/settings.js";
const data = new Map();
/**
 * @internal
 */
export class LocalStorage {
    /**
     * @internal
     */
    constructor({ clientId }) {
        Object.defineProperty(this, "isSupported", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "clientId", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.isSupported = typeof window !== "undefined" && !!window.localStorage;
        this.clientId = clientId;
    }
    async getItem(key) {
        if (this.isSupported) {
            return window.localStorage.getItem(key);
        }
        return data.get(key) ?? null;
    }
    async setItem(key, value) {
        if (this.isSupported) {
            return window.localStorage.setItem(key, value);
        }
        data.set(key, value);
    }
    async removeItem(key) {
        const item = await this.getItem(key);
        if (this.isSupported && item) {
            window.localStorage.removeItem(key);
            return true;
        }
        return false;
    }
    /**
     * @internal
     */
    async savePasskeyCredentialId(id) {
        await this.setItem(PASSKEY_CREDENTIAL_ID_LOCAL_STORAGE_NAME(this.clientId), id);
    }
    /**
     * @internal
     */
    async getPasskeyCredentialId() {
        return this.getItem(PASSKEY_CREDENTIAL_ID_LOCAL_STORAGE_NAME(this.clientId));
    }
    /**
     * @internal
     */
    async saveAuthCookie(cookie) {
        await this.setItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId), cookie);
    }
    /**
     * @internal
     */
    async getAuthCookie() {
        return this.getItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));
    }
    /**
     * @internal
     */
    async removeAuthCookie() {
        return this.removeItem(AUTH_TOKEN_LOCAL_STORAGE_NAME(this.clientId));
    }
    /**
     * @internal
     */
    async saveDeviceShare(share, userId) {
        await this.saveWalletUserId(userId);
        await this.setItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId), share);
    }
    /**
     * @internal
     */
    async getDeviceShare() {
        const userId = await this.getWalletUserId();
        if (userId) {
            return this.getItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId));
        }
        return null;
    }
    /**
     * @internal
     */
    async removeDeviceShare() {
        const userId = await this.getWalletUserId();
        if (userId) {
            return this.removeItem(DEVICE_SHARE_LOCAL_STORAGE_NAME(this.clientId, userId));
        }
        return false;
    }
    /**
     * @internal
     */
    async getWalletUserId() {
        return this.getItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));
    }
    /**
     * @internal
     */
    async saveWalletUserId(userId) {
        await this.setItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId), userId);
    }
    /**
     * @internal
     */
    async removeWalletUserId() {
        return this.removeItem(WALLET_USER_ID_LOCAL_STORAGE_NAME(this.clientId));
    }
}
//# sourceMappingURL=LocalStorage.js.map