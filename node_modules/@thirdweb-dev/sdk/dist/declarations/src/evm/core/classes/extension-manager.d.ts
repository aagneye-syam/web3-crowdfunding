import type { BaseRouter } from "@thirdweb-dev/contracts-js";
import { DetectableFeature } from "../interfaces/DetectableFeature";
import { ContractWrapper } from "./internal/contract-wrapper";
import { Transaction } from "./transactions";
import { Extension, ExtensionFunction, ExtensionMetadata, FunctionInput } from "../../types/extension";
import { ContractInterface } from "ethers";
import { TransactionReceipt } from "@ethersproject/abstract-provider";
import { DynamicContractExtensionMetadataOrUri } from "../../types/deploy/deploy-metadata";
export declare class ExtensionManager implements DetectableFeature {
    featureName: "DynamicContract";
    private contractWrapper;
    constructor(contractWrapper: ContractWrapper<BaseRouter>);
    getAddress(): string;
    /** ******************************
     * READ FUNCTIONS
     *******************************/
    getAll(): Promise<Extension[]>;
    get(extensionName: string): Promise<Extension>;
    getExtensionAddress(extensionName: string): Promise<string>;
    getAllFunctions(extensionName: string): Promise<ExtensionFunction[]>;
    getExtensionForFunction(functionInput: FunctionInput): Promise<ExtensionMetadata>;
    getExtensionAddressForFunction(functionInput: FunctionInput): Promise<string>;
    /** ******************************
     * WRITE FUNCTIONS
     *******************************/
    /**
     * Adds an extension to the contract
     */
    add: {
        (inputArgs: {
            extension: Extension;
            extensionAbi?: ContractInterface | undefined;
        }): Promise<Promise<TransactionReceipt>>;
        prepare: (inputArgs: {
            extension: Extension;
            extensionAbi?: ContractInterface | undefined;
        }) => Promise<Transaction<Promise<TransactionReceipt>>>;
    };
    /**
     * Adds a deployed extension to the contract
     */
    addDeployed: {
        (inputArgs: {
            extensionName: string;
            extensionAddress: string;
            extensionMetadata?: DynamicContractExtensionMetadataOrUri | undefined;
            extensionAbi?: ContractInterface | undefined;
        }): Promise<Promise<TransactionReceipt>>;
        prepare: (inputArgs: {
            extensionName: string;
            extensionAddress: string;
            extensionMetadata?: DynamicContractExtensionMetadataOrUri | undefined;
            extensionAbi?: ContractInterface | undefined;
        }) => Promise<Transaction<Promise<TransactionReceipt>>>;
    };
    /**
     * Adds a published extension to the contract, and deploys it deterministically if necessary
     */
    addPublished: {
        (inputArgs: {
            extensionName: string;
            publisherAddress?: string | undefined;
            version?: string | undefined;
            extensionMetadataOverride?: DynamicContractExtensionMetadataOrUri | undefined;
        }): Promise<Promise<TransactionReceipt>>;
        prepare: (inputArgs: {
            extensionName: string;
            publisherAddress?: string | undefined;
            version?: string | undefined;
            extensionMetadataOverride?: DynamicContractExtensionMetadataOrUri | undefined;
        }) => Promise<Transaction<Promise<TransactionReceipt>>>;
    };
    replace: {
        (inputArgs: {
            extension: Extension;
            extensionAbi?: ContractInterface | undefined;
        }): Promise<Promise<TransactionReceipt>>;
        prepare: (inputArgs: {
            extension: Extension;
            extensionAbi?: ContractInterface | undefined;
        }) => Promise<Transaction<Promise<TransactionReceipt>>>;
    };
    replaceDeployed: {
        (inputArgs: {
            extensionName: string;
            extensionAddress: string;
            extensionMetadata?: DynamicContractExtensionMetadataOrUri | undefined;
            extensionAbi?: ContractInterface | undefined;
        }): Promise<Promise<TransactionReceipt>>;
        prepare: (inputArgs: {
            extensionName: string;
            extensionAddress: string;
            extensionMetadata?: DynamicContractExtensionMetadataOrUri | undefined;
            extensionAbi?: ContractInterface | undefined;
        }) => Promise<Transaction<Promise<TransactionReceipt>>>;
    };
    replacePublished: {
        (inputArgs: {
            extensionName: string;
            publisherAddress?: string | undefined;
            version?: string | undefined;
            extensionMetadataOverride?: DynamicContractExtensionMetadataOrUri | undefined;
        }): Promise<Promise<TransactionReceipt>>;
        prepare: (inputArgs: {
            extensionName: string;
            publisherAddress?: string | undefined;
            version?: string | undefined;
            extensionMetadataOverride?: DynamicContractExtensionMetadataOrUri | undefined;
        }) => Promise<Transaction<Promise<TransactionReceipt>>>;
    };
    remove: {
        (inputArgs: {
            extensionName: string;
        }): Promise<Promise<TransactionReceipt>>;
        prepare: (inputArgs: {
            extensionName: string;
        }) => Promise<Transaction<Promise<TransactionReceipt>>>;
    };
    /** ******************************
     * Internal / private
     *******************************/
    private filterAbiForAdd;
    private filterAbiForRemove;
    private deployExtension;
}
//# sourceMappingURL=extension-manager.d.ts.map