import { ChainId } from "../../constants/chains/ChainId";
import { NativeToken } from "../../types/currency";
/**
 * @internal
 */
export declare const CONTRACT_ADDRESSES: Record<number, {
    openzeppelinForwarder: string;
    openzeppelinForwarderEOA: string;
    biconomyForwarder: string;
}>;
/**
 * @public
 */
export declare const NATIVE_TOKEN_ADDRESS = "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee";
/**
 * @public
 */
export declare const NATIVE_TOKENS: Record<number, NativeToken>;
export declare const blockExplorerApiMap: Record<number, string>;
export declare const IMPLEMENTATIONS: Record<number, Record<string, string>>;
/**
 * @internal
 * @param chainId - chain id
 * @param contractType - contract type
 */
export declare function getImplementation(chainId: number, contractName: string, version?: string): string | null;
/**
 *
 * @param chainId - chain id
 * @returns The array of trusted forwarders for the given chain id
 * @internal
 */
export declare function zkGetDefaultTrustedForwarders(chainId: number, contractName?: string): string[];
/**
 * Returns the native token for a given chain
 * @param chainId - the chain id
 * @public
 */
export declare function getZkNativeTokenByChainId(chainId: ChainId): NativeToken;
//# sourceMappingURL=addresses.d.ts.map