import { ThirdwebStorage } from "@thirdweb-dev/storage";
/**
 * @internal
 * @param publishMetadataUri - The publish metadata URI to fetch
 * @param storage - The storage to use
 */
export declare function fetchRawPredeployMetadata(publishMetadataUri: string, storage: ThirdwebStorage): Promise<import("zod").objectOutputType<{
    name: import("zod").ZodString;
    metadataUri: import("zod").ZodString;
    bytecodeUri: import("zod").ZodString;
    analytics: import("zod").ZodOptional<import("zod").ZodAny>;
    compilers: import("zod").ZodOptional<import("zod").ZodRecord<import("zod").ZodUnion<[import("zod").ZodLiteral<"solc">, import("zod").ZodLiteral<"zksolc">]>, import("zod").ZodArray<import("zod").ZodObject<{
        compilerVersion: import("zod").ZodOptional<import("zod").ZodString>;
        evmVersion: import("zod").ZodOptional<import("zod").ZodString>;
        metadataUri: import("zod").ZodString;
        bytecodeUri: import("zod").ZodString;
    }, "strip", import("zod").ZodTypeAny, {
        metadataUri: string;
        bytecodeUri: string;
        compilerVersion?: string | undefined;
        evmVersion?: string | undefined;
    }, {
        metadataUri: string;
        bytecodeUri: string;
        compilerVersion?: string | undefined;
        evmVersion?: string | undefined;
    }>, "many">>>;
}, import("zod").ZodAny, "strip">>;
//# sourceMappingURL=fetchRawPredeployMetadata.d.ts.map