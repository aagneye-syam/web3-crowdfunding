import { NFTMetadata, NFTMetadataOrUri } from "../../core/schema/nft";
import type { ThirdwebStorage, UploadProgressEvent } from "@thirdweb-dev/storage";
import { type BigNumberish, type providers } from "ethers";
export declare const FALLBACK_METADATA: {
    name: string;
};
/**
 * fetches the token metadata
 * @param tokenId - the id (to get it back in the output)
 * @param tokenUri - the uri to fetch
 * @param storage - which storage to fetch from
 *
 * @internal
 */
export declare function fetchTokenMetadata(tokenId: BigNumberish, tokenUri: string, storage: ThirdwebStorage): Promise<NFTMetadata>;
/**
 * @internal
 * @param contractAddress - the contract address
 * @param provider - the provider to use
 * @param tokenId - the token id
 * @param storage - the storage to use
 */
export declare function fetchTokenMetadataForContract(contractAddress: string, provider: providers.Provider, tokenId: BigNumberish, storage: ThirdwebStorage): Promise<NFTMetadata>;
/**
 * @internal
 * @param metadata - the metadata to upload
 * @param storage - the storage to use
 */
export declare function uploadOrExtractURI(metadata: NFTMetadataOrUri, storage: ThirdwebStorage): Promise<string>;
/**
 * @internal
 * @param metadatas - the metadata to upload
 * @param storage - the storage to use
 * @param startNumber - the number to start the file names at
 * @param contractAddress - the contract address
 * @param signerAddress - the signer address
 * @param options - options
 */
export declare function uploadOrExtractURIs(metadatas: NFTMetadataOrUri[], storage: ThirdwebStorage, startNumber?: number, options?: {
    onProgress: (event: UploadProgressEvent) => void;
}): Promise<string[]>;
export declare function getBaseUriFromBatch(uris: string[]): string;
//# sourceMappingURL=nft.d.ts.map