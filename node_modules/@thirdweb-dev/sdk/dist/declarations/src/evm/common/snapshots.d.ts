import { SnapshotInfo, SnapshotInput } from "../types/claim-conditions/claim-conditions";
import { SnapshotFormatVersion } from "./sharded-merkle-tree";
import { ThirdwebStorage } from "@thirdweb-dev/storage";
import { providers } from "ethers";
import { MerkleTree } from "@thirdweb-dev/merkletree";
import { SnapshotEntry } from "../schema/contracts/common/snapshots";
/**
 * Create a snapshot (merkle tree) from a list of addresses and uploads it to IPFS
 * @param snapshotInput - the list of addresses to hash
 * @param tokenDecimals - the token decimals
 * @param provider - the provider to use
 * @param storage - the storage to upload to
 * @param snapshotFormatVersion - the snapshot format version
 * @returns The generated snapshot and URI
 * @internal
 */
export declare function createSnapshot(snapshotInput: SnapshotInput, tokenDecimals: number, provider: providers.Provider, storage: ThirdwebStorage, snapshotFormatVersion: SnapshotFormatVersion): Promise<SnapshotInfo>;
/**
 * Create a MerkleTree based on an allow list of addresses and maxClaimable
 * @param snapshotInput - the list of addresses and maxClaimable
 * @param tokenDecimals - optional decimals for the token to claim (default 18)
 * @param version - optional version of the snapshot format (default V1)
 * @returns The generated MerkleTree
 */
export declare function createMerkleTreeFromAllowList(snapshotInput: SnapshotInput, tokenDecimals?: number, version?: SnapshotFormatVersion): Promise<MerkleTree>;
/**
 * Get the proofs for a given entry of addresses
 * @param merkleTree - the merkle tree to get the proof from
 * @param snapshotEntry - the entry to get the proof for
 * @param tokenDecimals - optional decimals for the token to claim (default 18)
 * @param version - optional version of the snapshot format (default V1)
 * @returns
 */
export declare function getProofsForAllowListEntry(merkleTree: MerkleTree, snapshotEntry: SnapshotEntry, tokenDecimals?: number, version?: SnapshotFormatVersion): Promise<string[]>;
/**
 * Hash an allow list entry for use in a MerkleTree
 * @param snapshotEntry - the entry to hash
 * @param tokenDecimals - optional decimals for the token to claim (default 18)
 * @param version - optional version of the snapshot format (default V1)
 * @returns
 */
export declare function hashAllowListEntry(snapshotEntry: SnapshotEntry, tokenDecimals?: number, version?: SnapshotFormatVersion): string;
//# sourceMappingURL=snapshots.d.ts.map