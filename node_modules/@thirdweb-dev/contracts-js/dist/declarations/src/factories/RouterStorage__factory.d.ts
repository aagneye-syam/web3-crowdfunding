import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RouterStorage, RouterStorageInterface } from "../RouterStorage";
type RouterStorageConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class RouterStorage__factory extends ContractFactory {
    constructor(...args: RouterStorageConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<RouterStorage>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): RouterStorage;
    connect(signer: Signer): RouterStorage__factory;
    static readonly bytecode = "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80632be9b20e146038575b600080fd5b605e7f012ef321094c8c682aa635dfdfcd754624a7473f08ad6ac415bb7f35eb12a10081565b60405190815260200160405180910390f3fea26469706673582212202074bfd7bd8bcb0717d275fe0fbe8a5832331eb4b3d51ecb017ddb348efcea3264736f6c63430008170033";
    static readonly abi: {
        type: string;
        name: string;
        inputs: never[];
        outputs: {
            name: string;
            type: string;
            internalType: string;
        }[];
        stateMutability: string;
    }[];
    static createInterface(): RouterStorageInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): RouterStorage;
}
export {};
//# sourceMappingURL=RouterStorage__factory.d.ts.map