import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { LazyMintStorage, LazyMintStorageInterface } from "../LazyMintStorage";
type LazyMintStorageConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class LazyMintStorage__factory extends ContractFactory {
    constructor(...args: LazyMintStorageConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<LazyMintStorage>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): LazyMintStorage;
    connect(signer: Signer): LazyMintStorage__factory;
    static readonly bytecode = "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063806dca6a146038575b600080fd5b605e7fb9d1563179e0b515350da446a9b78048cef890c6aaa6e34cdf88122d970b5c0081565b60405190815260200160405180910390f3fea264697066735822122089523306ffe2c65eb2aa01a8652de778327db202cdea86d81167dc7d41f903af64736f6c63430008170033";
    static readonly abi: {
        type: string;
        name: string;
        inputs: never[];
        outputs: {
            name: string;
            type: string;
            internalType: string;
        }[];
        stateMutability: string;
    }[];
    static createInterface(): LazyMintStorageInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): LazyMintStorage;
}
export {};
//# sourceMappingURL=LazyMintStorage__factory.d.ts.map