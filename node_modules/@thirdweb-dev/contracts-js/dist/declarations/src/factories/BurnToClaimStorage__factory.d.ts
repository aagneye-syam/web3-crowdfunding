import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BurnToClaimStorage, BurnToClaimStorageInterface } from "../BurnToClaimStorage";
type BurnToClaimStorageConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class BurnToClaimStorage__factory extends ContractFactory {
    constructor(...args: BurnToClaimStorageConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<BurnToClaimStorage>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): BurnToClaimStorage;
    connect(signer: Signer): BurnToClaimStorage__factory;
    static readonly bytecode = "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80638670809d146038575b600080fd5b605e7f6f0d20bed2d5528732497d5a17ac45087a6175b2a140eebe2a39ab447d7ad40081565b60405190815260200160405180910390f3fea26469706673582212203d444f2c1217e52b07d4a3011d917acb28d09f92259abaf0e13775af3292e77d64736f6c63430008170033";
    static readonly abi: {
        type: string;
        name: string;
        inputs: never[];
        outputs: {
            name: string;
            type: string;
            internalType: string;
        }[];
        stateMutability: string;
    }[];
    static createInterface(): BurnToClaimStorageInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): BurnToClaimStorage;
}
export {};
//# sourceMappingURL=BurnToClaimStorage__factory.d.ts.map