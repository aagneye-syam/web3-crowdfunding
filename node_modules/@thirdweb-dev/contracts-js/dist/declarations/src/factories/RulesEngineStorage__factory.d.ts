import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RulesEngineStorage, RulesEngineStorageInterface } from "../RulesEngineStorage";
type RulesEngineStorageConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class RulesEngineStorage__factory extends ContractFactory {
    constructor(...args: RulesEngineStorageConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): Promise<RulesEngineStorage>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string | Promise<string>;
    }): TransactionRequest;
    attach(address: string): RulesEngineStorage;
    connect(signer: Signer): RulesEngineStorage__factory;
    static readonly bytecode = "0x60a6610038600b82828239805160001a607314602b57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063ac93ae44146038575b600080fd5b605e7f41d4cb087b2c44a761b2288e4c8ac115e76a546efd837c9a2e9cec2661a49a0081565b60405190815260200160405180910390f3fea2646970667358221220257ecb112bb5767d1770d09d03d419b8c1820779bccba9540c3cf9424d2b41da64736f6c63430008170033";
    static readonly abi: {
        type: string;
        name: string;
        inputs: never[];
        outputs: {
            name: string;
            type: string;
            internalType: string;
        }[];
        stateMutability: string;
    }[];
    static createInterface(): RulesEngineStorageInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): RulesEngineStorage;
}
export {};
//# sourceMappingURL=RulesEngineStorage__factory.d.ts.map